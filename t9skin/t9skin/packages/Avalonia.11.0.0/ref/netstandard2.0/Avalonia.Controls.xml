<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Controls</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Controls.AcrylicPlatformCompensationLevels">
            <summary>
            Defines compensation levels for the platform depending on the transparency level.
            It controls the base opacity level of the 'tracing paper' layer that compensates
            for low blur radius.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Startup">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.ShutdownRequested">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Exit">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Args">
            <summary>
            Gets the arguments passed to the AppBuilder Start method.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.ShutdownMode">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.MainWindow">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Windows">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs">
            <summary>
            Contains the arguments for the <see cref="E:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Exit"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs.ApplicationExitCode">
            <summary>
            Gets or sets the exit code that an application returns to the operating system when the application exits.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime">
            <summary>
            Controls application lifetime in classic desktop style
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.TryShutdown(System.Int32)">
            <summary>
            Tries to Shutdown the application. <see cref="E:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.ShutdownRequested" /> event can be used to cancel the shutdown.
            </summary>
            <param name="exitCode">An integer exit code for an application. The default exit code is 0.</param>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.Args">
            <summary>
            Gets the arguments passed to the
            <see cref="M:Avalonia.ClassicDesktopStyleApplicationLifetimeExtensions.StartWithClassicDesktopLifetime(Avalonia.AppBuilder,System.String[],Avalonia.Controls.ShutdownMode)"/>
            method.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.ShutdownMode">
            <summary>
            Gets or sets the <see cref="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.ShutdownMode"/>. This property indicates whether the application is shutdown explicitly or implicitly. 
            If <see cref="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.ShutdownMode"/> is set to OnExplicitShutdown the application is only closes if Shutdown is called.
            The default is OnLastWindowClose
            </summary>
            <value>
            The shutdown mode.
            </value>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.MainWindow">
            <summary>
            Gets or sets the main window of the application.
            </summary>
            <value>
            The main window.
            </value>
        </member>
        <member name="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.Windows">
            <summary>
            Gets the list of all open windows in the application.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.ShutdownRequested">
            <summary>
            Raised by the platform when an application shutdown is requested.
            </summary>
            <remarks>
            Application Shutdown can be requested for various reasons like OS shutdown.
            
            On Windows this will be called when an OS Session (logout or shutdown) terminates. Cancelling the eventargs will 
            block OS shutdown.
            
            On OSX this has the same behavior as on Windows and in addition:
            This event is raised via the Quit menu or right-clicking on the application icon and selecting Quit. 
            
            This event provides a first-chance to cancel application shutdown; if shutdown is not canceled at this point the application
            will try to close each non-owned open window, invoking the <see cref="E:Avalonia.Controls.Window.Closing"/> event on each and allowing
            each window to cancel the shutdown of the application. Windows cannot however prevent OS shutdown.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Startup">
            <summary>
            Sent when the application is starting up.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Exit">
            <summary>
            Sent when the application is exiting.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Shutdown(System.Int32)">
            <summary>
            Shuts down the application and sets the exit code that is returned to the operating system when the application exits.
            </summary>
            <param name="exitCode">An integer exit code for an application. The default exit code is 0.</param>
        </member>
        <member name="T:Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs">
            <summary>
            Contains the arguments for the <see cref="E:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime.Startup"/> event.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteFilterPredicate`1">
            <summary>
            Represents the filter used by the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control to
            determine whether an item is a possible match for the specified text.
            </summary>
            <returns>true to indicate <paramref name="item" /> is a possible match
            for <paramref name="search" />; otherwise false.</returns>
            <param name="search">The string used as the basis for filtering.</param>
            <param name="item">The item that is compared with the
            <paramref name="search" /> parameter.</param>
            <typeparam name="T">The type used for filtering the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" />. This type can
            be either a string or an object.</typeparam>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteSelector`1">
            <summary>
            Represents the selector used by the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control to
            determine how the specified text should be modified with an item.
            </summary>
            <returns>
            Modified text that will be used by the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" />.
            </returns>
            <param name="search">The string used as the basis for filtering.</param>
            <param name="item">
            The selected item that should be combined with the
            <paramref name="search" /> parameter.
            </param>
            <typeparam name="T">
            The type used for filtering the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" />.
            This type can be either a string or an object.
            </typeparam>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteBox">
            <summary>
            Represents a control that provides a text box for user input and a
            drop-down that contains possible matches based on the input in the text
            box.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementSelectionAdapter">
            <summary>
            Specifies the name of the selection adapter TemplatePart.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementSelector">
            <summary>
            Specifies the name of the Selector TemplatePart.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementPopup">
            <summary>
            Specifies the name of the Popup TemplatePart.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementTextBox">
            <summary>
            The name for the text box part.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._items">
            <summary>
            Gets or sets a local cached copy of the items data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._view">
            <summary>
            Gets or sets the observable collection that contains references to
            all of the items in the generated view of data that is provided to
            the selection-style control adapter.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._ignoreTextPropertyChange">
            <summary>
            Gets or sets a value to ignore a number of pending change handlers.
            The value is decremented after each use. This is used to reset the
            value of properties without performing any of the actions in their
            change handlers.
            </summary>
            <remarks>The int is important as a value because the TextBox
            TextChanged event does not immediately fire, and this will allow for
            nested property changes to be ignored.</remarks>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending
            change handlers.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._ignoreTextSelectionChange">
            <summary>
            Gets or sets a value indicating whether to ignore the selection
            changed event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._skipSelectedItemTextUpdate">
            <summary>
            Gets or sets a value indicating whether to skip the text update
            processing when the selected item is updated.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._textSelectionStart">
            <summary>
            Gets or sets the last observed text box selection start location.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._userCalledPopulate">
            <summary>
            Gets or sets a value indicating whether the user initiated the
            current populate call.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._delayTimer">
            <summary>
            Gets or sets the DispatcherTimer used for the MinimumPopulateDelay
            condition for auto completion.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._allowWrite">
            <summary>
            Gets or sets a value indicating whether a read-only dependency
            property change handler should allow the value to be set.  This is
            used to ensure that read-only properties cannot be changed via
            SetValue, etc.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._textBox">
            <summary>
            The TextBox template part.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._adapter">
            <summary>
            The SelectionAdapter.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._valueBindingEvaluator">
            <summary>
            A control that can provide updated string values from a binding.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._collectionChangeSubscription">
            <summary>
            A weak subscription for the collection changed event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.SelectionChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.TextChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.AutoCompleteBox.TextChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnControlIsEnabledChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnMinimumPopulateDelayChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            MinimumPopulateDelayProperty property changed handler. Any current
            dispatcher timer will be stopped. The timer will not be restarted
            until the next TextUpdate call by the user.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnIsDropDownOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTextPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            TextProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnFilterModePropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            FilterModeProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnItemFilterPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            ItemFilterProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnItemsSourcePropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.DropDownPopup">
            <summary>
            Gets or sets the drop down popup control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.TextBox">
            <summary>
            Gets or sets the Text template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.SelectionAdapter">
            <summary>
            Gets or sets the selection adapter used to populate the drop-down
            with a list of selectable items.
            </summary>
            <value>The selection adapter used to populate the drop-down with a
            list of selectable items.</value>
            <remarks>
            You can use this property when you create an automation peer to
            use with AutoCompleteBox or deriving from AutoCompleteBox to
            create a custom control.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.GetSelectionAdapterPart(Avalonia.Controls.INameScope)">
            <summary>
            Returns the
            <see cref="T:Avalonia.Controls.ISelectionAdapter" /> part, if
            possible.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.ISelectionAdapter" /> object,
            if possible. Otherwise, null.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <summary>
            Called to update the validation state for properties for which data validation is
            enabled.
            </summary>
            <param name="property">The property.</param>
            <param name="state">The current data binding state.</param>
            <param name="error">The current data binding error, if any.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.InputElement.KeyDown" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Input.KeyEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.UIElement.GotFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.UIElement.LostFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.HasFocus">
            <summary>
            Determines whether the text box or drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control has
            focus.
            </summary>
            <returns>true to indicate the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has focus;
            otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control
            currently has the focus.</param>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.TextChanged">
            <summary>
            Occurs asynchronously when the text in the <see cref="P:Avalonia.Controls.AutoCompleteBox.TextBox"/> portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.Populating">
            <summary>
            Occurs when the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> is
            populating the drop-down with possible matches based on the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
            <remarks>
            If the event is canceled, by setting the PopulatingEventArgs.Cancel
            property to true, the AutoCompleteBox will not automatically
            populate the selection adapter contained in the drop-down.
            In this case, if you want possible matches to appear, you must
            provide the logic for populating the selection adapter.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.Populated">
            <summary>
            Occurs when the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has
            populated the drop-down with possible matches based on the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownOpening">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from false to true.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownOpened">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownClosing">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from true to false.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownClosed">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property was changed from true to false and the drop-down is open.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.SelectionChanged">
            <summary>
            Occurs when the selected item in the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has
            changed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnPopulating(Avalonia.Controls.PopulatingEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populating" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.PopulatingEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnPopulated(Avalonia.Controls.PopulatedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populated" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.PopulatedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnSelectionChanged(Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.SelectionChanged" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.SelectionChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownOpening" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.CancelEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownOpened(System.EventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownOpened" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.EventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownClosing" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.CancelEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownClosed(System.EventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownClosed" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.EventArgs" />
            which contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTextChanged(Avalonia.Controls.TextChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.AutoCompleteBox.TextChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Controls.TextChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.ClosingDropDown(System.Boolean)">
            <summary>
            Begin closing the drop-down.
            </summary>
            <param name="oldValue">The original value.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OpeningDropDown(System.Boolean)">
            <summary>
            Begin opening the drop down by firing cancelable events, opening the
            drop-down or reverting, depending on the event argument values.
            </summary>
            <param name="oldValue">The original value, if needed for a revert.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.DropDownPopup_Closed(System.Object,System.EventArgs)">
            <summary>
            Connects to the DropDownPopup Closed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.PopulateDropDown(System.Object,System.EventArgs)">
            <summary>
            Handles the timer tick when using a populate delay.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OpenDropDown">
            <summary>
            Private method that directly opens the popup, checks the expander
            button, and then fires the Opened event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.CloseDropDown">
            <summary>
            Private method that directly closes the popup, flips the Checked
            value, and then fires the Closed event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.FormatValue(System.Object,System.Boolean)">
            <summary>
            Formats an Item for text comparisons based on Converter
            and ConverterCulture properties.
            </summary>
            <param name="value">The object to format.</param>
            <param name="clearDataContext">A value indicating whether to clear
            the data context after the lookup is performed.</param>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.FormatValue(System.Object)">
            <summary>
            Converts the specified object to a string by using the
            <see cref="P:Avalonia.Data.Binding.Converter" /> and
            <see cref="P:Avalonia.Data.Binding.ConverterCulture" /> values
            of the binding object specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ValueMemberBinding" />
            property.
            </summary>
            <param name="value">The object to format as a string.</param>
            <returns>The string representation of the specified object.</returns>
            <remarks>
            Override this method to provide a custom string conversion.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTextBoxTextChanged">
            <summary>
            Handle the TextChanged event that is directly attached to the
            TextBox part. This ensures that only user initiated actions will
            result in an AutoCompleteBox suggestion and operation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateTextValue(System.String)">
            <summary>
            Updates both the text box value and underlying text dependency
            property value if and when they change. Automatically fires the
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateTextValue(System.String,System.Nullable{System.Boolean})">
            <summary>
            Updates both the text box value and underlying text dependency
            property value if and when they change. Automatically fires the
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
            <param name="userInitiated">A nullable bool value indicating whether
            the action was user initiated. In a user initiated mode, the
            underlying text dependency property is updated. In a non-user
            interaction, the text box value is updated. When user initiated is
            null, all values are updated.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.TextUpdated(System.String,System.Boolean)">
            <summary>
            Handle the update of the text for the control from any source,
            including the TextBox part and the Text dependency property.
            </summary>
            <param name="newText">The new text.</param>
            <param name="userInitiated">A value indicating whether the update
            is a user-initiated action. This should be a True value when the
            TextUpdated method is called from a TextBox event handler.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.ClearView">
            <summary>
            A simple helper method to clear the view and ensure that a view
            object is always present and not null.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.RefreshView">
            <summary>
            Walks through the items enumeration. Performance is not going to be
            perfect with the current implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnItemsSourceChanged(System.Collections.IEnumerable)">
            <summary>
            Handle any change to the ItemsSource dependency property, update
            the underlying ObservableCollection view, and set the selection
            adapter's ItemsSource to the view if appropriate.
            </summary>
            <param name="newValue">The new enumerable reference.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.PopulateComplete">
            <summary>
            Notifies the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> that the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Items" />
            property has been set and the data can be filtered to provide
            possible matches in the drop-down.
            </summary>
            <remarks>
            Call this method when you are providing custom population of
            the drop-down portion of the AutoCompleteBox, to signal the control
            that you are done with the population process.
            Typically, you use PopulateComplete when the population process
            is a long-running process and you want to cancel built-in filtering
             of the ItemsSource items. In this case, you can handle the
            Populated event and set PopulatingEventArgs.Cancel to true.
            When the long-running process has completed you call
            PopulateComplete to indicate the drop-down is populated.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateTextCompletion(System.Boolean)">
            <summary>
            Performs text completion, if enabled, and a lookup on the underlying
            item values for an exact match. Will update the SelectedItem value.
            </summary>
            <param name="userInitiated">A value indicating whether the operation
            was user initiated. Text completion will not be performed when not
            directly initiated by the user.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.TryGetMatch(System.String,Avalonia.Collections.AvaloniaList{System.Object},Avalonia.Controls.AutoCompleteFilterPredicate{System.String})">
            <summary>
            Attempts to look through the view and locate the specific exact
            text match.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="view">The view reference.</param>
            <param name="predicate">The predicate to use for the partial or
            exact match.</param>
            <returns>Returns the object or null.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnSelectedItemChanged(System.Object)">
            <summary>
            Called when the selected item is changed, updates the text value
            that is displayed in the text box part.
            </summary>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnAdapterSelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnAdapterSelectionComplete(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Commit event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnAdapterSelectionCanceled(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Cancel event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch">
            <summary>
            A predefined set of filter functions for the known, built-in
            AutoCompleteFilterMode enumeration values.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.GetFilter(Avalonia.Controls.AutoCompleteFilterMode)">
            <summary>
            Index function that retrieves the filter for the provided
            AutoCompleteFilterMode.
            </summary>
            <param name="FilterMode">The built-in search mode.</param>
            <returns>Returns the string-based comparison function.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a
            string comparison. The traditional .NET string Contains member uses
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWith(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWithCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWithOrdinal(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWithOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.Contains(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value. The current
            culture's case insensitive string comparison operator is used.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.ContainsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.ContainsOrdinal(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.ContainsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.Equals(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.EqualsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.EqualsOrdinal(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.EqualsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.#ctor(Avalonia.Data.IBinding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLength" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLength" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelay" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelay" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeight" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeight" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabled" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabled" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemTemplate" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemTemplate" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.SelectedItem" /> property.
            </summary>
            <value>The identifier the <see cref="P:Avalonia.Controls.AutoCompleteBox.SelectedItem" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.TextProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.SearchTextProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.SearchText" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.SearchText" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.FilterModeProperty">
            <summary>
            Gets the identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.FilterMode" /> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemFilterProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemFilter" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemFilter" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.TextFilterProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.TextFilter" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.TextFilter" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemSelector" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemSelector" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.TextSelectorProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.TextSelector" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.TextSelector" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Controls.AutoCompleteBox.AsyncPopulator" /> property.
            </summary>
            <value>The identifier for the <see cref="P:Avalonia.Controls.AutoCompleteBox.AsyncPopulator" /> property.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLength">
            <summary>
            Gets or sets the minimum number of characters required to be entered
            in the text box before the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> displays possible matches.
            </summary>
            <value>
            The minimum number of characters to be entered in the text box
            before the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            displays possible matches. The default is 1.
            </value>
            <remarks>
            If you set MinimumPrefixLength to -1, the AutoCompleteBox will
            not provide possible matches. There is no maximum value, but
            setting MinimumPrefixLength to value that is too large will
            prevent the AutoCompleteBox from providing possible matches as well.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabled">
            <summary>
            Gets or sets a value indicating whether the first possible match
            found during the filtering process will be displayed automatically
            in the text box.
            </summary>
            <value>
            True if the first possible match found will be displayed
            automatically in the text box; otherwise, false. The default is
            false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ItemTemplate">
            <summary>
            Gets or sets the <see cref="T:Avalonia.DataTemplate" /> used
            to display each item in the drop-down portion of the control.
            </summary>
            <value>The <see cref="T:Avalonia.DataTemplate" /> used to
            display each item in the drop-down. The default is null.</value>
            <remarks>
            You use the ItemTemplate property to specify the visualization
            of the data objects in the drop-down portion of the AutoCompleteBox
            control. If your AutoCompleteBox is bound to a collection and you
            do not provide specific display instructions by using a
            DataTemplate, the resulting UI of each item is a string
            representation of each object in the underlying collection.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelay">
            <summary>
            Gets or sets the minimum delay, after text is typed
            in the text box before the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control
            populates the list of possible matches in the drop-down.
            </summary>
            <value>The minimum delay, after text is typed in
            the text box, but before the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> populates
            the list of possible matches in the drop-down. The default is 0.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The maximum height of the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            The default is <see cref="F:System.Double.PositiveInfinity" />.</value>
            <exception cref="T:System.ArgumentException">The specified value is less than 0.</exception>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion of
            the control is open.
            </summary>
            <value>
            True if the drop-down is open; otherwise, false. The default is
            false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ValueMemberBinding">
            <summary>
            Gets or sets the  <see cref="T:Avalonia.Data.Binding" /> that
            is used to get the values for display in the text portion of
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The <see cref="T:Avalonia.Data.IBinding" /> object used
            when binding to a collection property.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.SelectedItem">
            <summary>
            Gets or sets the selected item in the drop-down.
            </summary>
            <value>The selected item in the drop-down.</value>
            <remarks>
            If the IsTextCompletionEnabled property is true and text typed by
            the user matches an item in the ItemsSource collection, which is
            then displayed in the text box, the SelectedItem property will be
            a null reference.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.Text">
            <summary>
            Gets or sets the text in the text box portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The text in the text box portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.SearchText">
            <summary>
            Gets the text that is used to filter items in the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> item collection.
            </summary>
            <value>The text that is used to filter items in the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> item collection.</value>
            <remarks>
            The SearchText value is typically the same as the
            Text property, but is set after the TextChanged event occurs
            and before the Populating event.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.FilterMode">
            <summary>
            Gets or sets how the text in the text box is used to filter items
            specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <value>One of the <see cref="T:Avalonia.Controls.AutoCompleteFilterMode" />
            values The default is <see cref="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWith" />.</value>
            <exception cref="T:System.ArgumentException">The specified value is not a valid
            <see cref="T:Avalonia.Controls.AutoCompleteFilterMode" />.</exception>
            <remarks>
            Use the FilterMode property to specify how possible matches are
            filtered. For example, possible matches can be filtered in a
            predefined or custom way. The search mode is automatically set to
            Custom if you set the ItemFilter property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ItemFilter">
            <summary>
            Gets or sets the custom method that uses user-entered text to filter
            the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <value>The custom method that uses the user-entered text to filter
            the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property. The default is null.</value>
            <remarks>
            The filter mode is automatically set to Custom if you set the
            ItemFilter property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.TextFilter">
            <summary>
            Gets or sets the custom method that uses the user-entered text to
            filter items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property in a text-based way for display in the drop-down.
            </summary>
            <value>The custom method that uses the user-entered text to filter
            items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property in a text-based way for display in the drop-down.</value>
            <remarks>
            The search mode is automatically set to Custom if you set the
            TextFilter property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ItemSelector">
            <summary>
            Gets or sets the custom method that combines the user-entered
            text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />.
            </summary>
            <value>
            The custom method that combines the user-entered
            text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />.
            </value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.TextSelector">
            <summary>
            Gets or sets the custom method that combines the user-entered
            text and one of the items specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> in a text-based way.
            </summary>
            <value>
            The custom method that combines the user-entered
            text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            in a text-based way.
            </value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the items for the
            drop-down portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The collection that is used to generate the items of the
            drop-down portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteFilterMode">
            <summary>
            Specifies how text in the text box portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control is used to filter items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.None">
            <summary>
            Specifies that no filter is used. All items are returned.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWith">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWithCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCulture" /> as the string
            comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWithOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the
            string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWithOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying <see cref="P:System.StringComparer.Ordinal" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.Contains">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.ContainsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.ContainsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.ContainsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.Equals">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as
            the search comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.EqualsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCulture" /> as the string
            comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.EqualsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the
            string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.EqualsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying <see cref="P:System.StringComparer.Ordinal" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.Custom">
            <summary>
            Specifies that a custom filter is used. This mode is used when the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.TextFilter" /> or <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemFilter" />
            properties are set.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.PopulatedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populated" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.PopulatedEventArgs.Data">
            <summary>
            Gets the list of possible matches added to the drop-down portion of
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The list of possible matches added to the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" />.</value>
        </member>
        <member name="M:Avalonia.Controls.PopulatedEventArgs.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.PopulatedEventArgs" />.
            </summary>
            <param name="data">The list of possible matches added to the
            drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</param>
        </member>
        <member name="T:Avalonia.Controls.PopulatingEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populating" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.PopulatingEventArgs.Parameter">
            <summary>
            Gets the text that is used to determine which items to display in
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The text that is used to determine which items to display in
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />.</value>
        </member>
        <member name="M:Avalonia.Controls.PopulatingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.PopulatingEventArgs" />.
            </summary>
            <param name="parameter">The value of the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.SearchText" />
            property, which is used to filter items for the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</param>
        </member>
        <member name="M:Avalonia.Controls.Automation.Peers.ProgressBarAutomationPeer.Avalonia#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Request to set the value that this UI element is representing
            </summary>
            <param name="val">Value to set the UI to, as an object</param>
            <returns>true if the UI element was successfully set to the specified value</returns>
        </member>
        <member name="P:Avalonia.Controls.Automation.Peers.ProgressBarAutomationPeer.Avalonia#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>Indicates that the value can only be read, not modified.
            returns True if the control is read-only</summary>
        </member>
        <member name="P:Avalonia.Controls.Automation.Peers.ProgressBarAutomationPeer.Avalonia#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>Value of a Large Change</summary>
        </member>
        <member name="P:Avalonia.Controls.Automation.Peers.ProgressBarAutomationPeer.Avalonia#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>Value of a Small Change</summary>
        </member>
        <member name="T:Avalonia.Controls.Border">
            <summary>
            A control which decorates a child with a border and background.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.CornerRadius"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BoxShadowProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BoxShadow"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Border.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Border"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.Background">
            <summary>
            Gets or sets a brush with which to paint the background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BorderBrush">
            <summary>
            Gets or sets a brush with which to paint the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BoxShadow">
            <summary>
            Gets or sets the box shadow effect parameters
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Border.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Border.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Border.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's child.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.ClickMode">
            <summary>
            Defines how a <see cref="T:Avalonia.Controls.Button"/> reacts to clicks.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ClickMode.Release">
            <summary>
            The <see cref="E:Avalonia.Controls.Button.Click"/> event is raised when the pointer is released.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ClickMode.Press">
            <summary>
            The <see cref="E:Avalonia.Controls.Button.Click"/> event is raised when the pointer is pressed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Button">
            <summary>
            A standard button control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.ClickModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.ClickMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.HotKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.HotKey"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.IsDefaultProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.IsDefault"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.IsCancelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.IsCancel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.IsPressedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.IsPressed"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.FlyoutProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.Flyout"/> property
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Button"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Button"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Button.Click">
            <summary>
            Raised when the user clicks the button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.ClickMode">
            <summary>
            Gets or sets a value indicating how the <see cref="T:Avalonia.Controls.Button"/> should react to clicks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.Command">
            <summary>
            Gets or sets an <see cref="T:System.Windows.Input.ICommand"/> to be invoked when the button is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.HotKey">
            <summary>
            Gets or sets an <see cref="T:Avalonia.Input.KeyGesture"/> associated with this control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.CommandParameter">
            <summary>
            Gets or sets a parameter to be passed to the <see cref="P:Avalonia.Controls.Button.Command"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.IsDefault">
            <summary>
            Gets or sets a value indicating whether the button is the default button for the
            window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.IsCancel">
            <summary>
            Gets or sets a value indicating whether the button is the Cancel button for the
            window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.IsPressed">
            <summary>
            Gets or sets a value indicating whether the button is currently pressed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.Flyout">
            <summary>
            Gets or sets the Flyout that should be shown with this button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.IsEnabledCore">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnClick">
            <summary>
            Invokes the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OpenFlyout">
            <summary>
            Opens the button's flyout.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.CloseFlyout">
            <summary>
            Closes the button's flyout.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OnFlyoutOpened">
            <summary>
            Invoked when the button's flyout is opened.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OnFlyoutClosed">
            <summary>
            Invoked when the button's flyout is closed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event fires.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.RegisterFlyoutEvents(Avalonia.Controls.Primitives.FlyoutBase)">
            <summary>
            Registers all flyout events.
            </summary>
            <param name="flyout">The flyout to connect events to.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.UnregisterFlyoutEvents(Avalonia.Controls.Primitives.FlyoutBase)">
            <summary>
            Explicitly unregisters all flyout events.
            </summary>
            <param name="flyout">The flyout to disconnect events from.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.ListenForDefault(Avalonia.Input.IInputElement)">
            <summary>
            Starts listening for the Enter key when the button <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.ListenForCancel(Avalonia.Input.IInputElement)">
            <summary>
            Starts listening for the Escape key when the button <see cref="P:Avalonia.Controls.Button.IsCancel"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.StopListeningForDefault(Avalonia.Input.IInputElement)">
            <summary>
            Stops listening for the Enter key when the button is no longer <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.StopListeningForCancel(Avalonia.Input.IInputElement)">
            <summary>
            Stops listening for the Escape key when the button is no longer <see cref="P:Avalonia.Controls.Button.IsCancel"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.RootDefaultKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed on the input root and the button <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.RootCancelKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed on the input root and the button <see cref="P:Avalonia.Controls.Button.IsCancel"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.UpdatePseudoClasses">
            <summary>
            Updates the visual state of the control by applying latest PseudoClasses.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.Flyout_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for when the button's flyout is opened.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.Flyout_Closed(System.Object,System.EventArgs)">
            <summary>
            Event handler for when the button's flyout is closed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ButtonSpinner.AllowSpinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ButtonSpinner.AllowSpin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ButtonSpinner.ShowButtonSpinner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocation"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ButtonSpinner"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.AllowSpin">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.ButtonSpinner"/> should allow to spin.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.ShowButtonSpinner">
            <summary>
            Gets or sets a value indicating whether the spin buttons should be shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocation">
            <summary>
            Gets or sets current location of the <see cref="T:Avalonia.Controls.ButtonSpinner"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnAllowSpinChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ButtonSpinner.AllowSpin"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.AllowSpinChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ButtonSpinner.AllowSpin"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnButtonClick(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when user clicks one of the spin buttons.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.CalendarDatePicker">
            <summary>
            A date selection control that allows the user to select dates from a drop down calendar.
            </summary>
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.CalendarDatePicker.CalendarClosed">
            <summary>
            Occurs when the drop-down
            <see cref="T:Avalonia.Controls.Calendar" /> is closed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.CalendarDatePicker.CalendarOpened">
            <summary>
            Occurs when the drop-down
            <see cref="T:Avalonia.Controls.Calendar" /> is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.CalendarDatePicker.DateValidationError">
            <summary>
            Occurs when <see cref="P:Avalonia.Controls.DatePicker.Text" />
            is assigned a value that cannot be interpreted as a date.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.CalendarDatePicker.SelectedDateChanged">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.CalendarDatePicker.SelectedDate" />
            property is changed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.CalendarDatePicker" /> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.UpdatePseudoClasses">
            <summary>
            Updates the visual state of the control by applying latest PseudoClasses.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.OnDateValidationError(Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.CalendarDatePicker.DateValidationError" />
            event.
            </summary>
            <param name="e">
            A
            <see cref="T:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs" />
            that contains the event data.
            </param>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.TogglePopUp">
            <summary>
            Toggles the <see cref="P:Avalonia.Controls.CalendarDatePicker.IsDropDownOpen"/> property to open/close the calendar popup.
            This will automatically adjust control focus as well.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePicker.ParseText(System.String)">
            <summary>
            Input text is parsed in the correct format and changed into a
            DateTime object.  If the text can not be parsed TextParseError Event
            is thrown.
            </summary>
            <param name="text">Inherited code: Requires comment.</param>
            <returns>
            IT SHOULD RETURN NULL IF THE STRING IS NOT VALID, RETURN THE
            DATETIME VALUE IF IT IS VALID.
            </returns>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.DisplayDateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDateStart"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDateEnd"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.FirstDayOfWeek"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.IsDropDownOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.IsTodayHighlighted"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.SelectedDateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.SelectedDate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.SelectedDateFormat"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.CustomDateFormatString"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.WatermarkProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.Watermark"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.UseFloatingWatermark"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.CalendarDatePicker.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.BlackoutDates">
            <summary>
            Gets a collection of dates that are marked as not selectable.
            </summary>
            <value>
            A collection of dates that cannot be selected. The default value is
            an empty collection.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.DisplayDate">
            <summary>
            Gets or sets the date to display.
            </summary>
            <value>
            The date to display. The default is <see cref="P:System.DateTime.Today" />.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified date is not in the range defined by
            <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDateStart" />
            and
            <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDateEnd" />.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.DisplayDateStart">
            <summary>
            Gets or sets the first date to be displayed.
            </summary>
            <value>The first date to display.</value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.DisplayDateEnd">
            <summary>
            Gets or sets the last date to be displayed.
            </summary>
            <value>The last date to display.</value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek" /> representing the beginning of
            the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down
            <see cref="T:Avalonia.Controls.Calendar" /> is open or closed.
            </summary>
            <value>
            True if the <see cref="T:Avalonia.Controls.Calendar" /> is
            open; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether the current date will be
            highlighted.
            </summary>
            <value>
            True if the current date is highlighted; otherwise, false. The
            default is true.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.SelectedDate">
            <summary>
            Gets or sets the currently selected date.
            </summary>
            <value>
            The date currently selected. The default is null.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified date is not in the range defined by
            <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDateStart" />
            and
            <see cref="P:Avalonia.Controls.CalendarDatePicker.DisplayDateEnd" />,
            or the specified date is in the
            <see cref="P:Avalonia.Controls.CalendarDatePicker.BlackoutDates" />
            collection.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.SelectedDateFormat">
            <summary>
            Gets or sets the format that is used to display the selected date.
            </summary>
            <value>
            The format that is used to display the selected date. The default is
            <see cref="F:Avalonia.Controls.CalendarDatePickerFormat.Short" />.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An specified format is not valid.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.Text">
            <summary>
            Gets or sets the text that is displayed by the <see cref="T:Avalonia.Controls.CalendarDatePicker" />.
            </summary>
            <value>
            The text displayed by the <see cref="T:Avalonia.Controls.CalendarDatePicker" />.
            </value>
            <exception cref="T:System.FormatException">
            The text entered cannot be parsed to a valid date, and the exception
            is not suppressed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The text entered parses to a date that is not selectable.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.Watermark">
            <inheritdoc cref="P:Avalonia.Controls.TextBox.Watermark"/>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.UseFloatingWatermark">
            <inheritdoc cref="P:Avalonia.Controls.TextBox.UseFloatingWatermark"/>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePicker.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.CalendarDatePicker.DateValidationError" />
            event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs" />
            class.
            </summary>
            <param name="exception">
            The initial exception from the
            <see cref="E:Avalonia.Controls.CalendarDatePicker.DateValidationError" />
            event.
            </param>
            <param name="text">
            The text that caused the
            <see cref="E:Avalonia.Controls.CalendarDatePicker.DateValidationError" />
            event.
            </param>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs.Exception">
            <summary>
            Gets the initial exception associated with the
            <see cref="E:Avalonia.Controls.CalendarDatePicker.DateValidationError" />
            event.
            </summary>
            <value>
            The exception associated with the validation failure.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs.Text">
            <summary>
            Gets the text that caused the
            <see cref="E:Avalonia.Controls.CalendarDatePicker.DateValidationError" />
            event.
            </summary>
            <value>
            The text that caused the validation failure.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs.ThrowException">
            <summary>
            Gets or sets a value indicating whether
            <see cref="P:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs.Exception" />
            should be thrown.
            </summary>
            <value>
            True if the exception should be thrown; otherwise, false.
            </value>
            <exception cref="T:System.ArgumentException">
            If set to true and
            <see cref="P:Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs.Exception" />
            is null.
            </exception>
        </member>
        <member name="T:Avalonia.Controls.CalendarDatePickerFormat">
            <summary>
            Specifies date formats for a
            <see cref="T:Avalonia.Controls.CalendarDatePicker" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePickerFormat.Long">
            <summary>
            Specifies that the date should be displayed using unabbreviated days
            of the week and month names.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePickerFormat.Short">
            <summary>
            Specifies that the date should be displayed using abbreviated days
            of the week and month names.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarDatePickerFormat.Custom">
            <summary>
            Specifies that the date should be displayed using a custom format string.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CalendarMode">
            <summary>
            Specifies values for the different modes of operation of a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarMode.Month">
            <summary>
            The <see cref="T:Avalonia.Controls.Calendar" /> displays a
            month at a time.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarMode.Year">
            <summary>
            The <see cref="T:Avalonia.Controls.Calendar" /> displays a
            year at a time.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarMode.Decade">
            <summary>
            The <see cref="T:Avalonia.Controls.Calendar" /> displays a
            decade at a time.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CalendarSelectionMode">
            <summary>
            Specifies values that describe the available selection modes for a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
            <remarks>
            This enumeration provides the values that are used by the SelectionMode
            property.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.SingleDate">
            <summary>
            Only a single date can be selected. Use the
            <see cref="P:Avalonia.Controls.Calendar.SelectedDate" />
            property to retrieve the selected date.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.SingleRange">
            <summary>
            A single range of dates can be selected. Use 
            <see cref="P:Avalonia.Controls.Calendar.SelectedDates" />
            property to retrieve the selected dates.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.MultipleRange">
            <summary>
            Multiple non-contiguous ranges of dates can be selected. Use the
            <see cref="P:Avalonia.Controls.Calendar.SelectedDates" />
            property to retrieve the selected dates.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.None">
            <summary>
            No selections are allowed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CalendarDateChangedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.Calendar.DisplayDateChanged" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateChangedEventArgs.RemovedDate">
            <summary>
            Gets the date that was previously displayed.
            </summary>
            <value>
            The date previously displayed.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateChangedEventArgs.AddedDate">
            <summary>
            Gets the date to be newly displayed.
            </summary>
            <value>The new date to display.</value>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateChangedEventArgs.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the CalendarDateChangedEventArgs
            class.
            </summary>
            <param name="removedDate">
            The date that was previously displayed.
            </param>
            <param name="addedDate">The date to be newly displayed.</param>
        </member>
        <member name="T:Avalonia.Controls.CalendarModeChangedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.Calendar.DisplayModeChanged" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarModeChangedEventArgs.OldMode">
            <summary>
            Gets the previous mode of the
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
            <value>
            A <see cref="T:Avalonia.Controls.CalendarMode" /> representing
            the previous mode.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarModeChangedEventArgs.NewMode">
            <summary>
            Gets the new mode of the
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
            <value>
            A <see cref="T:Avalonia.Controls.CalendarMode" /> 
            the new mode.
            </value>
        </member>
        <member name="M:Avalonia.Controls.CalendarModeChangedEventArgs.#ctor(Avalonia.Controls.CalendarMode,Avalonia.Controls.CalendarMode)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.CalendarModeChangedEventArgs" />
            class.
            </summary>
            <param name="oldMode">The previous mode.</param>
            <param name="newMode">The new mode.</param>
        </member>
        <member name="T:Avalonia.Controls.Calendar">
            <summary>
            Represents a control that enables a user to select a date by using a
            visual calendar display.
            </summary>
            <remarks>
            <para>
            A Calendar control can be used on its own, or as a drop-down part of a
            DatePicker control. For more information, see DatePicker.  A Calendar
            displays either the days of a month, the months of a year, or the years
            of a decade, depending on the value of the DisplayMode property.  When
            displaying the days of a month, the user can select a date, a range of
            dates, or multiple ranges of dates.  The kinds of selections that are
            allowed are controlled by the SelectionMode property.
            </para>
            <para>
            The range of dates displayed is governed by the DisplayDateStart and
            DisplayDateEnd properties.  If DisplayMode is Year or Decade, only
            months or years that contain displayable dates will be displayed.
            Setting the displayable range to a range that does not include the
            current DisplayDate will throw an ArgumentOutOfRangeException.
            </para>
            <para>
            The BlackoutDates property can be used to specify dates that cannot be
            selected. These dates will be displayed as dimmed and disabled.
            </para>
            <para>
            By default, Today is highlighted.  This can be disabled by setting
            IsTodayHighlighted to false.
            </para>
            <para>
            The Calendar control provides basic navigation using either the mouse or
            keyboard. The following table summarizes keyboard navigation.
            
                Key Combination     DisplayMode     Action
                ARROW               Any             Change focused date, unselect
                                                    all selected dates, and select
                                                    new focused date.
                                                    
                SHIFT+ARROW         Any             If SelectionMode is not set to
                                                    SingleDate or None begin
                                                    selecting a range of dates.
                                                    
                CTRL+UP ARROW       Any             Switch to the next larger
                                                    DisplayMode.  If DisplayMode is
                                                    already Decade, no action.
                                                    
                CTRL+DOWN ARROW     Any             Switch to the next smaller
                                                    DisplayMode.  If DisplayMode is
                                                    already Month, no action.
                                                    
                SPACEBAR            Month           Select focused date.
                
                SPACEBAR            Year or Decade  Switch DisplayMode to the Month
                                                    or Year represented by focused
                                                    item.
            </para>
            <para>
            XAML Usage for Classes Derived from Calendar
            If you define a class that derives from Calendar, the class can be used
            as an object element in XAML, and all of the inherited properties and
            events that show a XAML usage in the reference for the Calendar members
            can have the same XAML usage for the derived class. However, the object
            element itself must have a different prefix mapping than the controls:
            mapping shown in the usages, because the derived class comes from an
            assembly and namespace that you create and define.  You must define your
            own prefix mapping to an XML namespace to use the class as an object
            element in XAML.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek" /> representing the beginning of
            the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnFirstDayOfWeekChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            FirstDayOfWeekProperty property changed handler.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:Avalonia.Controls.Calendar.IsValidFirstDayOfWeek(System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="value">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="P:Avalonia.Controls.Calendar.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether the current date is
            highlighted.
            </summary>
            <value>
            True if the current date is highlighted; otherwise, false. The
            default is true.
            </value>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnIsTodayHighlightedChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            IsTodayHighlightedProperty property changed handler.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayMode">
            <summary>
            Gets or sets a value indicating whether the calendar is displayed in
            months, years, or decades.
            </summary>
            <value>
            A value indicating what length of time the
            <see cref="T:System.Windows.Controls.Calendar" /> should display.
            </value>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnDisplayModePropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            DisplayModeProperty property changed handler.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:Avalonia.Controls.Calendar.SelectionMode">
            <summary>
            Gets or sets a value that indicates what kind of selections are
            allowed.
            </summary>
            <value>
            A value that indicates the current selection mode. The default is
            <see cref="F:System.Windows.Controls.CalendarSelectionMode.SingleDate" />.
            </value>
            <remarks>
            <para>
            This property determines whether the Calendar allows no selection,
            selection of a single date, or selection of multiple dates.  The
            selection mode is specified with the CalendarSelectionMode
            enumeration.
            </para>
            <para>
            When this property is changed, all selected dates will be cleared.
            </para>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Calendar.IsValidSelectionMode(System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="value">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="P:Avalonia.Controls.Calendar.SelectedDate">
            <summary>
            Gets or sets the currently selected date.
            </summary>
            <value>The date currently selected. The default is null.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given date is outside the range specified by
            <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" />
            and <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />
            -or-
            The given date is in the
            <see cref="P:System.Windows.Controls.Calendar.BlackoutDates" />
            collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If set to anything other than null when
            <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> is
            set to
            <see cref="F:System.Windows.Controls.CalendarSelectionMode.None" />.
            </exception>
            <remarks>
            Use this property when SelectionMode is set to SingleDate.  In other
            modes, this property will always be the first date in SelectedDates.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.SelectedDates">
            <summary>
            Gets a collection of selected dates.
            </summary>
            <value>
            A <see cref="T:System.Windows.Controls.SelectedDatesCollection" />
            object that contains the currently selected dates. The default is an
            empty collection.
            </value>
            <remarks>
            Dates can be added to the collection either individually or in a
            range using the AddRange method.  Depending on the value of the
            SelectionMode property, adding a date or range to the collection may
            cause it to be cleared.  The following table lists how
            CalendarSelectionMode affects the SelectedDates property.
            
                CalendarSelectionMode   Description
                None                    No selections are allowed.  SelectedDate
                                        cannot be set and no values can be added
                                        to SelectedDates.
                                        
                SingleDate              Only a single date can be selected,
                                        either by setting SelectedDate or the
                                        first value in SelectedDates.  AddRange
                                        cannot be used.
                                        
                SingleRange             A single range of dates can be selected.
                                        Setting SelectedDate, adding a date
                                        individually to SelectedDates, or using
                                        AddRange will clear all previous values
                                        from SelectedDates.
                MultipleRange           Multiple non-contiguous ranges of dates
                                        can be selected. Adding a date
                                        individually to SelectedDates or using
                                        AddRange will not clear SelectedDates.
                                        Setting SelectedDate will still clear
                                        SelectedDates, but additional dates or
                                        range can then be added.  Adding a range
                                        that includes some dates that are
                                        already selected or overlaps with
                                        another range results in the union of
                                        the ranges and does not cause an
                                        exception.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayDate">
            <summary>
            Gets or sets the date to display.
            </summary>
            <value>The date to display.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given date is not in the range specified by
            <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" />
            and
            <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />.
            </exception>
            <remarks>
            <para>
            This property allows the developer to specify a date to display.  If
            this property is a null reference (Nothing in Visual Basic),
            SelectedDate is displayed.  If SelectedDate is also a null reference
            (Nothing in Visual Basic), Today is displayed.  The default is
            Today.
            </para>
            <para>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayDateStart">
            <summary>
            Gets or sets the first date to be displayed.
            </summary>
            <value>The first date to display.</value>
            <remarks>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.BlackoutDates">
            <summary>
            Gets a collection of dates that are marked as not selectable.
            </summary>
            <value>
            A collection of dates that cannot be selected. The default value is
            an empty collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Adding a date to this collection when it is already selected or
            adding a date outside the range specified by DisplayDateStart and
            DisplayDateEnd.
            </exception>
            <remarks>
            <para>
            Dates in this collection will appear as disabled on the calendar.
            </para>
            <para>
            To make all past dates not selectable, you can use the
            AddDatesInPast method provided by the collection returned by this
            property.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayDateEnd">
            <summary>
            Gets or sets the last date to be displayed.
            </summary>
            <value>The last date to display.</value>
            <remarks>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.CalendarDatePickerDisplayDateFlag">
            <summary>
            Gets or sets a value indicating whether CalendarDatePicker should change its 
            DisplayDate because of a SelectedDate change on its Calendar.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.HighlightDays">
            <summary>
            This method highlights the days in MultiSelection mode without
            adding them to the SelectedDates collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.UnHighlightDays">
            <summary>
            This method un-highlights the days that were hovered over but not
            added to the SelectedDates collection or un-highlighted the
            previously selected days in SingleRange Mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnDayClick(System.DateTime)">
            <summary>
            If the day is a trailing day, Update the DisplayDate.
            </summary>
            <param name="selectedDate">Inherited code: Requires comment.</param>
        </member>
        <member name="E:Avalonia.Controls.Calendar.DisplayDateChanged">
            <summary>
            Occurs when the
            <see cref="P:System.Windows.Controls.Calendar.DisplayDate" />
            property is changed.
            </summary>
            <remarks>
            This event occurs after DisplayDate is assigned its new value.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Calendar.DisplayModeChanged">
            <summary>
            Occurs when the
            <see cref="P:System.Windows.Controls.Calendar.DisplayMode" />
            property is changed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Calendar.DayButtonMouseUp">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.AddSelection">
            <summary>
            This method adds the days that were selected by Keyboard to the
            SelectedDays Collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <summary>
            Default mouse wheel handler for the calendar control.
            </summary>
            <param name="e">Mouse wheel event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnIsEnabledChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
             Called when the IsEnabled property changes.
            </summary>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:Avalonia.Controls.Calendar.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Calendar" /> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Calendar" /> when a new
            template is applied.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection._owner">
            <summary>
            The Calendar whose dates this object represents.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.#ctor(Avalonia.Controls.Calendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Avalonia.Controls.Calendar" /> whose dates
            this object represents.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.AddDatesInPast">
            <summary>
            Adds all dates before <see cref="P:System.DateTime.Today" /> to the
            collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.Contains(System.DateTime)">
            <summary>
            Returns a value that represents whether this collection contains the
            specified date.
            </summary>
            <param name="date">The date to search for.</param>
            <returns>
            True if the collection contains the specified date; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.Contains(System.DateTime,System.DateTime)">
            <summary>
            Returns a value that represents whether this collection contains the
            specified range of dates.
            </summary>
            <param name="start">The start of the date range.</param>
            <param name="end">The end of the date range.</param>
            <returns>
            True if all dates in the range are contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.ContainsAny(Avalonia.Controls.CalendarDateRange)">
            <summary>
            Returns a value that represents whether this collection contains any
            date in the specified range.
            </summary>
            <param name="range">The range of dates to search for.</param>
            <returns>
            True if any date in the range is contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.InsertItem(System.Int32,Avalonia.Controls.CalendarDateRange)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.SetItem(System.Int32,Avalonia.Controls.CalendarDateRange)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.CalendarButton">
            <summary>
            Represents a button on a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarButton._isCalendarButtonFocused">
            <summary>
            A value indicating whether the button is focused.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarButton._isInactive">
            <summary>
            A value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarButton._isSelected">
            <summary>
            A value indicating whether the button is selected.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.CalendarButton" />
            class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.Owner">
            <summary>
            Gets or sets the Calendar associated with this button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.IsCalendarButtonFocused">
            <summary>
            Gets or sets a value indicating whether the button is focused.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.IsInactive">
            <summary>
            Gets or sets a value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the button is selected.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.CalendarButton" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.SetPseudoClasses">
            <summary>
            Sets PseudoClasses based on current state.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            UIElement.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the
            stylus is removed from the tablet PC) while the mouse (or the
            stylus) is over a UIElement (or while a UIElement holds mouse
            capture).
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown event that
            occurs when the left mouse button is pressed while the mouse pointer
            is over this control.
            </summary>
            <param name="e">The event data. </param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonDown event as handled by
            setting the MouseButtonEventArgs.Handled property of the event data
            to true when the button is enabled and its ClickMode is not set to
            Hover.  Since this method marks the MouseLeftButtonDown event as
            handled in some situations, you should use the Click event instead
            to detect a button click.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event that occurs when
            the left mouse button is released while the mouse pointer is over
            this control. 
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonUp event as handled by setting
            the MouseButtonEventArgs.Handled property of the event data to true
            when the button is enabled and its ClickMode is not set to Hover.
            Since this method marks the MouseLeftButtonUp event as handled in
            some situations, you should use the Click event instead to detect a
            button click.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarDayButton.DefaultContent">
            <summary>
            Default content for the CalendarDayButton.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.CalendarDayButton" />
            class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.Owner">
            <summary>
            Gets or sets the Calendar associated with this button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsCurrent">
            <summary>
            Gets or sets a value indicating whether the button is the focused
            element on the Calendar control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.IgnoreMouseOverState">
            <summary>
            Ensure the button is not in the MouseOver state.
            </summary>
            <remarks>
            If a button is in the MouseOver state when a Popup is closed (as is
            the case when you select a date in the DatePicker control), it will
            continue to think it's in the mouse over state even when the Popup
            opens again and it's not.  This method is used to forcibly clear the
            state by changing the CommonStates state group.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsBlackout">
            <summary>
            Gets or sets a value indicating whether this is a blackout date.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsToday">
            <summary>
            Gets or sets a value indicating whether this button represents
            today.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsInactive">
            <summary>
            Gets or sets a value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the button is selected.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            UIElement.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the
            stylus is removed from the tablet PC) while the mouse (or the
            stylus) is over a UIElement (or while a UIElement holds mouse
            capture).
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown event that
            occurs when the left mouse button is pressed while the mouse pointer
            is over this control.
            </summary>
            <param name="e">The event data. </param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonDown event as handled by
            setting the MouseButtonEventArgs.Handled property of the event data
            to true when the button is enabled and its ClickMode is not set to
            Hover.  Since this method marks the MouseLeftButtonDown event as
            handled in some situations, you should use the Click event instead
            to detect a button click.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event that occurs when
            the left mouse button is released while the mouse pointer is over
            this control. 
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonUp event as handled by setting
            the MouseButtonEventArgs.Handled property of the event data to true
            when the button is enabled and its ClickMode is not set to Hover.
            Since this method marks the MouseLeftButtonUp event as handled in
            some situations, you should use the Click event instead to detect a
            button click.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.CalendarItem">
            <summary>
            Represents the currently displayed month or year on a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarItem.NumberOfDaysPerWeek">
            <summary>
            The number of days per week.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.HeaderButton">
            <summary>
            Gets the button that allows switching between month mode, year mode,
            and decade mode. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.NextButton">
            <summary>
            Gets the button that displays the next page of the calendar when it
            is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.PreviousButton">
            <summary>
            Gets the button that displays the previous page of the calendar when
            it is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.MonthView">
            <summary>
            Gets the Grid that hosts the content when in month mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.YearView">
            <summary>
            Gets the Grid that hosts the content when in year or decade mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarItem.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.CalendarItem" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarItem.PreviousMonthDays(System.DateTime)">
            <summary>
            How many days of the previous month need to be displayed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._addedItems">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._isCleared">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._isRangeAdded">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._owner">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.#ctor(Avalonia.Controls.Calendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.SelectedDatesCollection" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Avalonia.Controls.Calendar" /> associated
            with this object.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.AddRange(System.DateTime,System.DateTime)">
            <summary>
            Adds all the dates in the specified range, which includes the first
            and last dates, to the collection.
            </summary>
            <param name="start">The first date to add to the collection.</param>
            <param name="end">The last date to add to the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.InsertItem(System.Int32,System.DateTime)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.SetItem(System.Int32,System.DateTime)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeight"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.DateTimePickerPanel.PanelType"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormat"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoop"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.PanelType">
            <summary>
            Gets or sets what this panel displays in date or time units
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeight">
            <summary>
            Gets or sets the height of each item
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormat">
            <summary>
            Gets or sets the string format for the items, using standard
            .net DateTime or TimeSpan formatting. Format must match panel type
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoop">
            <summary>
            Gets or sets whether the panel should loop
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.MinimumValue">
            <summary>
            Gets or sets the minimum value
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.MaximumValue">
            <summary>
            Gets or sets the maximum value
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.SelectedValue">
            <summary>
            Gets or sets the selected value
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.DateTimePickerPanel.Increment">
            <summary>
            Gets or sets the increment
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.RefreshItems">
            <summary>
            Refreshes the content of the visible items
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.ScrollUp(System.Int32)">
            <summary>
            Scrolls up the specified number of items
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.ScrollDown(System.Int32)">
            <summary>
            Scrolls down the specified number of items
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.UpdateHelperInfo">
            <summary>
            Updates helper fields used in various calculations
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.CreateOrDestroyItems(Avalonia.Controls.Controls)">
            <summary>
            Ensures enough containers are visible in the viewport
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.UpdateItems">
            <summary>
            Updates item content based on the current selection 
            and the panel type
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.DateTimePickerPanel.CoerceSelected(System.Int32)">
            <summary>
            Ensures the <see cref="P:Avalonia.Controls.Primitives.DateTimePickerPanel.SelectedValue"/> is within the bounds and
            follows the current Increment
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PickerPresenterBase">
            <summary>
            Defines the base class for Date and Time PickerPresenters
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.FlyoutBase.IsOpen"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.FlyoutBase.TargetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.FlyoutBase.Target"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty">
            <summary>
            Defines the AttachedFlyout property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.FlyoutBase.IsOpen">
            <summary>
            Gets whether this Flyout is currently Open
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.FlyoutBase.Target">
            <summary>
            Gets the Target used for showing the Flyout
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.PlacementProperty">
            <inheritdoc cref="F:Avalonia.Controls.Primitives.Popup.PlacementProperty"/>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.HorizontalOffsetProperty">
            <inheritdoc cref="F:Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty"/>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.VerticalOffsetProperty">
            <inheritdoc cref="F:Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty"/>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.PlacementAnchorProperty">
            <inheritdoc cref="F:Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty"/>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.PlacementGravityProperty">
            <inheritdoc cref="F:Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty"/>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.ShowModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.PopupFlyoutBase.ShowMode"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupFlyoutBase.OverlayInputPassThroughElementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.PopupFlyoutBase.OverlayInputPassThroughElement"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.Placement">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.Placement"/>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.PlacementGravity">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementGravity"/>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.PlacementAnchor">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementAnchor"/>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.HorizontalOffset">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset"/>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.VerticalOffset">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.VerticalOffset"/>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.ShowMode">
            <summary>
            Gets or sets the desired ShowMode
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupFlyoutBase.OverlayInputPassThroughElement">
            <summary>
            Gets or sets an element that should receive pointer input events even when underneath
            the flyout's overlay.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupFlyoutBase.ShowAt(Avalonia.Controls.Control)">
            <summary>
            Shows the Flyout at the given Control
            </summary>
            <param name="placementTarget">The control to show the Flyout at</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupFlyoutBase.ShowAt(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Shows the Flyout for the given control at the current pointer location, as in a ContextFlyout
            </summary>
            <param name="placementTarget">The target control</param>
            <param name="showAtPointer">True to show at pointer</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupFlyoutBase.Hide">
            <summary>
            Hides the Flyout
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupFlyoutBase.HideCore(System.Boolean)">
            <returns>True, if action was handled</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupFlyoutBase.ShowAtCore(Avalonia.Controls.Control,System.Boolean)">
            <returns>True, if action was handled</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupFlyoutBase.CreatePresenter">
            <summary>
            Used to create the content the Flyout displays
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.IScrollable">
            <summary>
            Interface implemented by scrollable controls.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Extent">
            <summary>
            Gets the extent of the scrollable content, in logical units
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Offset">
            <summary>
            Gets or sets the current scroll offset, in logical units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Viewport">
            <summary>
            Gets the size of the viewport, in logical units.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.AccessText">
            <summary>
            A text block that displays a character prefixed with an underscore as an access key.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AccessText.ShowAccessKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.AccessText.ShowAccessKey"/> attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AccessText._accessKeys">
            <summary>
            The access key handler for the current window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AccessText.AccessKey">
            <summary>
            Gets the access key.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AccessText.ShowAccessKey">
            <summary>
            Gets or sets a value indicating whether the access key should be underlined.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.RenderCore(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.CreateTextLayout(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.TextChanged(System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.TextBlock.Text"/> property changes.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.AdornerLayer">
            <summary>
            Represents a surface for showing adorners.
            Adorners are always on top of the adorned element and are positioned to stay relative to the adorned element.
            </summary>
            <remarks>
            TODO: Need to track position of adorned elements and move the adorner if they move.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AdornerLayer.AdornedElementProperty">
            <summary>
            Allows for getting and setting of the adorned element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AdornerLayer.IsClipEnabledProperty">
            <summary>
            Allows for controlling clipping of the adorner.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AdornerLayer.AdornerProperty">
            <summary>
            Allows for getting and setting of the adorner for control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AdornerLayer.DefaultFocusAdornerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.AdornerLayer.DefaultFocusAdorner"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AdornerLayer.DefaultFocusAdorner">
            <summary>
            Gets or sets the default control's focus adorner.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AdornerLayer.MeasureOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.AdornerLayer.ArrangeOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedContentControl">
            <summary>
            A <see cref="T:Avalonia.Controls.ContentControl"/> with a header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedContentControl.Header"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderTemplate"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedContentControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header content of the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedContentControl.RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedItemsControl">
            <summary>
            Represents an <see cref="T:Avalonia.Controls.ItemsControl"/> with a related header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Header"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderTemplate"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Header">
            <summary>
            Gets or sets the content of the control's header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Avalonia#Controls#Presenters#IContentPresenterHost#LogicalChildren">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> with a related header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderTemplate"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header">
            <summary>
            Gets or sets the content of the control's header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Avalonia#Controls#Presenters#IContentPresenterHost#LogicalChildren">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ILogicalScrollable">
            <summary>
            Interface implemented by controls that handle their own scrolling when placed inside a 
            <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </summary>
            <remarks>
            Controls that implement this interface, when placed inside a <see cref="T:Avalonia.Controls.ScrollViewer"/>
            can override the physical scrolling behavior of the scroll viewer with logical scrolling.
            Physical scrolling means that the scroll viewer is a simple viewport onto a larger canvas
            whereas logical scrolling means that the scrolling is handled by the child control itself
            and it can choose to do handle the scroll information as it sees fit.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled">
            <summary>
            Gets a value indicating whether logical scrolling is enabled on the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize">
            <summary>
            Gets the size to scroll by, in logical units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize">
            <summary>
            Gets the size to page by, in logical units.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.ILogicalScrollable.ScrollInvalidated">
            <summary>
            Raised when the scroll is invalidated.
            </summary>
            <remarks>
            This event notifies an attached <see cref="T:Avalonia.Controls.ScrollViewer"/> of a change in 
            one of the scroll properties.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Avalonia.Controls.Control,Avalonia.Rect)">
            <summary>
            Attempts to bring a portion of the target visual into view by scrolling the content.
            </summary>
            <param name="target">The target visual.</param>
            <param name="targetRect">The portion of the target visual to bring into view.</param>
            <returns>True if the scroll offset was changed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.Control)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.RaiseScrollInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.Primitives.ILogicalScrollable.ScrollInvalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.IPopupHost">
            <summary>
            Represents the top-level control opened by a <see cref="T:Avalonia.Controls.Primitives.Popup"/>.
            </summary>
            <remarks>
            A popup host can be either be a popup window created by the operating system
            (<see cref="T:Avalonia.Controls.Primitives.PopupRoot"/>) or an <see cref="T:Avalonia.Controls.Primitives.OverlayPopupHost"/> which is created
            on an <see cref="T:Avalonia.Controls.Primitives.OverlayLayer"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.Width">
            <summary>
            Gets or sets the fixed width of the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.MinWidth">
            <summary>
            Gets or sets the minimum width of the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.MaxWidth">
            <summary>
            Gets or sets the maximum width of the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.Height">
            <summary>
            Gets or sets the fixed height of the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.MinHeight">
            <summary>
            Gets or sets the minimum height of the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.MaxHeight">
            <summary>
            Gets or sets the maximum height of the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.Presenter">
            <summary>
            Gets the presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.Topmost">
            <summary>
            Gets or sets whether the popup appears on top of all other windows.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.Transform">
            <summary>
            Gets or sets a transform that will be applied to the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IPopupHost.HostedVisualTreeRoot">
            <summary>
            Gets the root of the visual tree in the case where the popup is presented using a
            separate visual tree.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.IPopupHost.TemplateApplied">
            <summary>
            Raised when the control's template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.IPopupHost.ConfigurePosition(Avalonia.Visual,Avalonia.Controls.PlacementMode,Avalonia.Point,Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor,Avalonia.Controls.Primitives.PopupPositioning.PopupGravity,Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment,System.Nullable{Avalonia.Rect})">
            <summary>
            Configures the position of the popup according to a target control and a set of
            placement parameters.
            </summary>
            <param name="target">The placement target.</param>
            <param name="placement">The placement mode.</param>
            <param name="offset">The offset, in device-independent pixels.</param>
            <param name="anchor">The anchor point.</param>
            <param name="gravity">The popup gravity.</param>
            <param name="constraintAdjustment">Defines how a popup position will be adjusted if the unadjusted position would result in the popup being partly constrained.</param>
            <param name="rect">
            The anchor rect. If null, the bounds of <paramref name="target"/> will be used.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.IPopupHost.SetChild(Avalonia.Controls.Control)">
            <summary>
            Sets the control to display in the popup.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.IPopupHost.Show">
            <summary>
            Shows the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.IPopupHost.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.IScrollSnapPointsInfo">
            <summary>
            Describes snap point behavior for objects that contain and present items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollSnapPointsInfo.AreHorizontalSnapPointsRegular">
            <summary>
            Gets or sets a value that indicates whether the horizontal snap points for the container are equidistant from each other.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollSnapPointsInfo.AreVerticalSnapPointsRegular">
            <summary>
            Gets or sets a value that indicates whether the vertical snap points for the container are equidistant from each other.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.IScrollSnapPointsInfo.GetIrregularSnapPoints(Avalonia.Layout.Orientation,Avalonia.Controls.Primitives.SnapPointsAlignment)">
            <summary>
            Returns the set of distances between irregular snap points for a specified orientation and alignment.
            </summary>
            <param name="orientation">The orientation for the desired snap point set.</param>
            <param name="snapPointsAlignment">The alignment to use when applying the snap points.</param>
            <returns>The read-only collection of snap point distances. Returns an empty collection when no snap points are present.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.IScrollSnapPointsInfo.GetRegularSnapPoints(Avalonia.Layout.Orientation,Avalonia.Controls.Primitives.SnapPointsAlignment,System.Double@)">
            <summary>
            Gets the distance between regular snap points for a specified orientation and alignment.
            </summary>
            <param name="orientation">The orientation for the desired snap point set.</param>
            <param name="snapPointsAlignment">The alignment to use when applying the snap points.</param>
            <param name="offset">Out parameter. The offset of the first snap point.</param>
            <returns>The distance between the equidistant snap points. Returns 0 when no snap points are present.</returns>
        </member>
        <member name="E:Avalonia.Controls.Primitives.IScrollSnapPointsInfo.HorizontalSnapPointsChanged">
            <summary>
            Occurs when the measurements for horizontal snap points change.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.IScrollSnapPointsInfo.VerticalSnapPointsChanged">
            <summary>
            Occurs when the measurements for vertical snap points change.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.LightDismissOverlayLayer">
            <summary>
            A layer that is used to dismiss a <see cref="T:Avalonia.Controls.Primitives.Popup"/> when the user clicks outside.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.LightDismissOverlayLayer.GetLightDismissOverlayLayer(Avalonia.Visual)">
            <summary>
            Returns the light dismiss overlay for a specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The light dismiss overlay, or null if none found.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.LightDismissOverlayLayer.HitTest(Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="F:Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.OverlayPopupHost.Transform"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.OverlayPopupHost.SetChild(Avalonia.Controls.Control)">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Controls.Primitives.OverlayPopupHost.HostedVisualTreeRoot">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Controls.Primitives.OverlayPopupHost.Transform">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Controls.Primitives.OverlayPopupHost.InteractiveParent">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.OverlayPopupHost.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.OverlayPopupHost.Show">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.OverlayPopupHost.Hide">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.OverlayPopupHost.ConfigurePosition(Avalonia.Visual,Avalonia.Controls.PlacementMode,Avalonia.Point,Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor,Avalonia.Controls.Primitives.PopupPositioning.PopupGravity,Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment,System.Nullable{Avalonia.Rect})">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.OverlayPopupHost.ArrangeOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Primitives.Popup">
            <summary>
            Displays a popup window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.InheritsTransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.InheritsTransform"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.IsOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementAnchorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementAnchor"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementGravityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementGravity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.Placement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementRect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementTargetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.IsLightDismissEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.IsLightDismissEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.VerticalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.TopmostProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.Topmost"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.Popup"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.Closed">
            <summary>
            Raised when the popup closes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.Opened">
            <summary>
            Raised when the popup opens.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Child">
            <summary>
            Gets or sets the control to display in the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.DependencyResolver">
            <summary>
            Gets or sets a dependency resolver for the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/>.
            </summary>
            <remarks>
            This property allows a client to customize the behaviour of the popup by injecting
            a specialized dependency resolver into the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/>'s constructor.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.InheritsTransform">
            <summary>
            Gets or sets a value that determines whether the popup inherits the render transform
            from its <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>. Defaults to false.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.IsLightDismissEnabled">
            <summary>
            Gets or sets a value that determines how the <see cref="T:Avalonia.Controls.Primitives.Popup"/> can be dismissed.
            </summary>
            <remarks>
            Light dismiss is when the user taps on any area other than the popup.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.IsOpen">
            <summary>
            Gets or sets a value indicating whether the popup is currently open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementAnchor">
            <summary>
            Gets or sets the anchor point on the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementRect"/> when <see cref="P:Avalonia.Controls.Primitives.Popup.Placement"/>
            is <see cref="F:Avalonia.Controls.PlacementMode.AnchorAndGravity"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustment">
            <summary>
            Gets or sets a value describing how the popup position will be adjusted if the
            unadjusted position would result in the popup being partly constrained.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementGravity">
            <summary>
            Gets or sets a value which defines in what direction the popup should open
            when <see cref="P:Avalonia.Controls.Primitives.Popup.Placement"/> is <see cref="F:Avalonia.Controls.PlacementMode.AnchorAndGravity"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementMode">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.Placement"/>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Placement">
            <summary>
            Gets or sets the desired placement of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementRect">
            <summary>
            Gets or sets the the anchor rectangle within the parent that the popup will be placed
            relative to when <see cref="P:Avalonia.Controls.Primitives.Popup.Placement"/> is <see cref="F:Avalonia.Controls.PlacementMode.AnchorAndGravity"/>.
            </summary>
            <remarks>
            The placement rect defines a rectangle relative to <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/> around
            which the popup will be opened, with <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementAnchor"/> determining which edge
            of the placement target is used.
            
            If unset, the anchor rectangle will be the bounds of the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementTarget">
            <summary>
            Gets or sets the control that is used to determine the popup's position.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThrough">
            <summary>
            Gets or sets a value indicating whether the event that closes the popup is passed
            through to the parent window.
            </summary>
            <remarks>
            When <see cref="P:Avalonia.Controls.Primitives.Popup.IsLightDismissEnabled"/> is set to true, clicks outside the the popup
            cause the popup to close. When <see cref="P:Avalonia.Controls.Primitives.Popup.OverlayDismissEventPassThrough"/> is set to
            false, these clicks will be handled by the popup and not be registered by the parent
            window. When set to true, the events will be passed through to the parent window.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.OverlayInputPassThroughElement">
            <summary>
            Gets or sets an element that should receive pointer input events even when underneath
            the popup's overlay.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset">
            <summary>
            Gets or sets the Horizontal offset of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.VerticalOffset">
            <summary>
            Gets or sets the Vertical offset of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Topmost">
            <summary>
            Gets or sets whether this popup appears on top of all other windows
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.Open">
            <summary>
            Opens the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.Close">
            <summary>
            Closes the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.MeasureCore(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>A size of 0,0 as Popup itself takes up no space.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.IsOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.Popup.IsOpen"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.ChildChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.Popup.Child"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters">
            <summary>
            Provides positioning parameters to <see cref="T:Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner"/>.
            </summary>
            <remarks>
            The IPopupPositioner provides a collection of rules for the placement of a a popup relative
            to its parent. Rules can be defined to ensure the popup remains within the visible area's
            borders, and to specify how the popup changes its position, such as sliding along an axis,
            or flipping around a rectangle. These positioner-created rules are constrained by the
            requirement that a popup must intersect with or be at least partially adjacent to its parent
            surface.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters.Size">
            <summary>
            Set the size of the popup that is to be positioned with the positioner object, in device-
            independent pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters.AnchorRectangle">
            <summary>
            Specifies the anchor rectangle within the parent that the popup will be placed relative
            to, in device-independent pixels.
            </summary>
            <remarks>
            The rectangle is relative to the parent geometry and may not extend outside the window
            geometry of the popup's parent.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters.Anchor">
            <summary>
            Defines the anchor point for the anchor rectangle.
            </summary>
            <remarks>
            The specified anchor is used derive an anchor point that the popup will be positioned
            relative to. If a corner anchor is set (e.g. 'TopLeft' or 'BottomRight'), the anchor
            point will be at the specified corner; otherwise, the derived anchor point will be
            centered on the specified edge, or in the center of the anchor rectangle if no edge is
            specified.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters.Gravity">
            <summary>
            Defines in what direction a popup should be positioned, relative to the anchor point of
            the parent.
            </summary>
            <remarks>
            If a corner gravity is specified (e.g. 'BottomRight' or 'TopLeft'), then the popup will
            be placed towards the specified gravity; otherwise, the popup will be centered over the
            anchor point on any axis that had no gravity specified.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters.ConstraintAdjustment">
            <summary>
            Specify how the popup should be positioned if the originally intended position caused
            the popup to be constrained.
            </summary>
            <remarks>
            Adjusts the popup position if the intended position caused the popup to be constrained;
            meaning at least partially outside positioning boundaries set by the positioner. The
            adjustment is set by constructing a bitmask describing the adjustment to be made when
            the popup is constrained on that axis.
            
            If no bit for one axis is set, the positioner will assume that the child surface should
            not change its position on that axis when constrained.
            
            If more than one bit for one axis is set, the order of how adjustments are applied is
            specified in the corresponding adjustment descriptions.
            
            The default adjustment is none.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters.Offset">
            <summary>
            Specify the popup position offset relative to the position of the
            anchor on the anchor rectangle and the anchor on the popup.
            </summary>
            <remarks>
            For example if the anchor of the anchor rectangle is at (x, y), the popup has the
            gravity bottom|right, and the offset is (ox, oy), the calculated surface position will
            be (x + ox, y + oy). The offset position of the surface is the one used for constraint
            testing. See set_constraint_adjustment.
            
            An example use case is placing a popup menu on top of a user interface element, while
            aligning the user interface element of the parent surface with some user interface
            element placed somewhere in the popup.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment">
            <summary>
            Defines how a popup position will be adjusted if the unadjusted position would result in
            the popup being partly constrained.
            </summary>
            <remarks>
            Whether a popup is considered 'constrained' is left to the positioner to determine. For
            example, the popup may be partly outside the target platform defined 'work area', thus
            necessitating the popup's position be adjusted until it is entirely inside the work area.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.None">
            <summary>
            Don't alter the surface position even if it is constrained on some
            axis, for example partially outside the edge of an output.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideX">
             <summary>
             Slide the surface along the x axis until it is no longer constrained.
             </summary>
             <remarks>
             First try to slide towards the direction of the gravity on the x axis until either the
             edge in the opposite direction of the gravity is unconstrained or the edge in the
             direction of the gravity is constrained.
            
             Then try to slide towards the opposite direction of the gravity on the x axis until
             either the edge in the direction of the gravity is unconstrained or the edge in the
             opposite direction of the gravity is constrained.
             </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideY">
            <summary>
            Slide the surface along the y axis until it is no longer constrained.
            </summary>
            <remarks>
            First try to slide towards the direction of the gravity on the y axis until either the
            edge in the opposite direction of the gravity is unconstrained or the edge in the
            direction of the gravity is constrained.
            
            Then try to slide towards the opposite direction of the gravity on the y axis until
            either the edge in the direction of the gravity is unconstrained or the edge in the
            opposite direction of the gravity is constrained.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipX">
            <summary>
            Invert the anchor and gravity on the x axis if the surface is constrained on the x axis.
            </summary>
            <remarks>
            For example, if the left edge of the surface is constrained, the gravity is 'left' and
            the anchor is 'left', change the gravity to 'right' and the anchor to 'right'.
            
            If the adjusted position also ends up being constrained, the resulting position of the
            FlipX adjustment will be the one before the adjustment.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipY">
            <summary>
            Invert the anchor and gravity on the y axis if the surface is constrained on the y axis.
            </summary>
            <remarks>
            For example, if the bottom edge of the surface is constrained, the gravity is 'bottom'
            and the anchor is 'bottom', change the gravity to 'top' and the anchor to 'top'.
            
            The adjusted position is calculated given the original anchor rectangle and offset, but
            with the new flipped anchor and gravity values.
            
            If the adjusted position also ends up being constrained, the resulting position of the
            FlipY adjustment will be the one before the adjustment.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeX">
            <summary>
            Horizontally resize the surface
            </summary>
            <remarks>
            Resize the surface horizontally so that it is completely unconstrained.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeY">
            <summary>
            Vertically resize the surface
            </summary>
            <remarks>
            Resize the surface vertically so that it is completely unconstrained.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor">
            <summary>
            Defines the edges around an anchor rectangle on which a popup will open.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None">
            <summary>
            The center of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Top">
            <summary>
            The top edge of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Bottom">
            <summary>
            The bottom edge of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Left">
            <summary>
            The left edge of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Right">
            <summary>
            The right edge of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopLeft">
            <summary>
            The top-left corner of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopRight">
            <summary>
            The top-right corner of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomLeft">
            <summary>
            The bottom-left corner of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomRight">
            <summary>
            The bottom-right corner of the anchor rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.VerticalMask">
            <summary>
            A mask for the vertical component flags.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.HorizontalMask">
            <summary>
            A mask for the horizontal component flags.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.AllMask">
            <summary>
            A mask for all flags.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity">
            <summary>
            Defines the direction in which a popup will open.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None">
            <summary>
            The popup will be centered over the anchor edge.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Top">
            <summary>
            The popup will be positioned above the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Bottom">
            <summary>
            The popup will be positioned below the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Left">
            <summary>
            The popup will be positioned to the left of the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Right">
            <summary>
            The popup will be positioned to the right of the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopLeft">
            <summary>
            The popup will be positioned to the top-left of the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopRight">
            <summary>
            The popup will be positioned to the top-right of the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomLeft">
            <summary>
            The popup will be positioned to the bottom-left of the anchor edge
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomRight">
            <summary>
            The popup will be positioned to the bottom-right of the anchor edge
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner">
            <summary>
            Positions an <see cref="T:Avalonia.Controls.Primitives.IPopupHost"/>.
            </summary>
            <remarks>
            <see cref="T:Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner"/> is an abstraction of the wayland xdg_positioner spec.
            
            The popup positioner implementation is determined by the platform implementation. A default
            managed implementation is provided in <see cref="T:Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositioner"/> for platforms
            on which popups can be arbitrarily positioned.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner.Update(Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters)">
            <summary>
            Updates the position of the associated <see cref="T:Avalonia.Controls.Primitives.IPopupHost"/> according to the
            specified parameters.
            </summary>
            <param name="parameters">The positioning parameters.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositioner">
            <summary>
            An <see cref="T:Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner"/> implementation for platforms on which a popup can be
            arbitrarily positioned.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerPopupImplHelper">
            <summary>
            This class is used to simplify integration of IPopupImpl implementations with popup positioner
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupRoot">
            <summary>
            The root window of a <see cref="T:Avalonia.Controls.Primitives.Popup"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.PopupRoot.TransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.PopupRoot.Transform"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#ctor(Avalonia.Controls.TopLevel,Avalonia.Platform.IPopupImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#ctor(Avalonia.Controls.TopLevel,Avalonia.Platform.IPopupImpl,Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
            <param name="parent">The popup parent.</param>
            <param name="impl">The popup implementation.</param>
            <param name="dependencyResolver">
            The dependency resolver to use. If null the default dependency resolver will be used.
            </param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Transform">
            <summary>
            Gets or sets a transform that will be applied to the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.InteractiveParent">
            <summary>
            Gets the parent control in the event route.
            </summary>
            <remarks>
            Popup events are passed to their parent window. This facilitates this.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#VisualTree#IHostedVisualTreeRoot#Host">
            <summary>
            Gets the control that is hosting the popup root.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#Styling#IStyleHost#StylingParent">
            <summary>
            Gets the styling parent of the popup root.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.RangeBase">
            <summary>
            Base class for controls that display a value within a range.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.MinimumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.MaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.ValueProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.SmallChange"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.LargeChange"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.ValueChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.RangeBase.ValueChanged"/> event.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.RangeBase.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> property changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Minimum">
            <summary>
            Gets or sets the minimum possible value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Maximum">
            <summary>
            Gets or sets the maximum possible value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.SmallChange">
            <summary>
            Gets or sets the small increment value added or subtracted from the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.LargeChange">
            <summary>
            Gets or sets the large increment value added or subtracted from the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateDouble(System.Double)">
            <summary>
            Checks if the double value is not infinity nor NaN.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs">
            <summary>
            Provides data specific to a <see cref="E:Avalonia.Controls.Primitives.RangeBase.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs.#ctor(System.Double,System.Double,Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value of the range value property.</param>
            <param name="newValue">The new value of the range value property.</param>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs.#ctor(System.Double,System.Double,Avalonia.Interactivity.RoutedEvent,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value of the range value property.</param>
            <param name="newValue">The new value of the range value property.</param>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the range value property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the range value property.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ScrollBar">
            <summary>
            A scrollbar control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.ViewportSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.Visibility"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.IsExpandedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.AllowAutoHideProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.AllowAutoHide"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.HideDelayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.HideDelay"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.ShowDelayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.ShowDelay"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.ViewportSize">
            <summary>
            Gets or sets the amount of the scrollable content that is currently visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.Visibility">
            <summary>
            Gets or sets a value that indicates whether the scrollbar should hide itself when it
            is not needed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.Orientation">
            <summary>
            Gets or sets the orientation of the scrollbar.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.IsExpanded">
            <summary>
            Gets a value that indicates whether the scrollbar is expanded.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.AllowAutoHide">
            <summary>
            Gets a value that indicates whether the scrollbar can hide itself when user is not interacting with it.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.HideDelay">
            <summary>
            Gets a value that determines how long will be the hide delay after user stops interacting with the scrollbar.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.ShowDelay">
            <summary>
            Gets a value that determines how long will be the show delay when user starts interacting with the scrollbar.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.UpdateIsVisible">
            <summary>
            Calculates and updates whether the scrollbar should be visible.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.AttachToScrollViewer">
            <summary>
            Locates the first <see cref="T:Avalonia.Controls.ScrollViewer"/> ancestor and binds to its properties. Properties which have been set through other means are not bound.
            </summary>
            <remarks>
            This method is automatically called when the control is attached to a visual tree.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ScrollBarVisibility">
            <summary>
            Specifies the visibility of a <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> for scrollable content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled">
            <summary>
            No scrollbars and no scrolling in this dimension.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBarVisibility.Auto">
            <summary>
            The scrollbar should be visible only if there is more content than fits in the viewport.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden">
            <summary>
            The scrollbar should never be visible.  No space should ever be reserved for the scrollbar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBarVisibility.Visible">
            <summary>
            The scrollbar should always be visible.  Space should always be reserved for the scrollbar.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ScrollEventType">
            <summary>    
            Specifies the type of Avalonia.Controls.Primitives.ScrollBar.Scroll event
            that occurred.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.SmallDecrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.SmallChange.
            The Avalonia.Controls.Primitives.Thumb moved to the left for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or upward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.SmallIncrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.SmallChange.
            The Avalonia.Controls.Primitives.Thumb moved to the right for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or downward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.LargeDecrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.LargeChange.
            The Avalonia.Controls.Primitives.Thumb moved to the left for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or upward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.LargeIncrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.LargeChange.
            The Avalonia.Controls.Primitives.Thumb moved to the right for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or downward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.ThumbTrack">
            <summary>    
            The Avalonia.Controls.Primitives.Thumb was dragged and caused a Avalonia.UIElement.MouseMove
            event. A Avalonia.Controls.Primitives.ScrollBar.Scroll event of this Avalonia.Controls.Primitives.ScrollEventType
            may occur more than one time when the Avalonia.Controls.Primitives.Thumb
            is dragged in the Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.EndScroll">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb was dragged to a
            new position and is now no longer being dragged by the user.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.SelectingItemsControl">
            <summary>
            An <see cref="T:Avalonia.Controls.ItemsControl"/> that maintains a selection.
            </summary>
            <remarks>
            <para>
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> provides a base class for <see cref="T:Avalonia.Controls.ItemsControl"/>s
            that maintain a selection (single or multiple). By default only its 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex"/> and <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem"/> properties are visible; the
            current multiple <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection"/> and <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> together with the
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> properties are protected, however a derived class can expose
            these if it wishes to support multiple selection.
            </para>
            <para>
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> maintains a selection respecting the current 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> but it does not react to user input; this must be handled in a
            derived class. It does, however, respond to <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/> events
            from items and updates the selection accordingly.
            </para>
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValueProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValue"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValueBindingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValueBinding"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedProperty">
            <summary>
            Defines the IsSelected attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsTextSearchEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.IsTextSearchEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent">
            <summary>
            Event that should be raised by containers when their selection state changes to notify
            the parent <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> that their selection state has changed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.WrapSelectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.WrapSelection"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged">
            <summary>
            Occurs when the control's selection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItem">
            <summary>
            Gets or sets a value indicating whether to automatically scroll to newly selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValueBinding">
            <summary>
            Gets the <see cref="T:Avalonia.Data.IBinding"/> instance used to obtain the 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValue"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValue">
            <summary>
            Gets or sets the value of the selected item, obtained using 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedValueBinding"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
            <remarks>
            By default returns a collection that can be modified in order to manipulate the control
            selection, however this property will return null if <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection"/> is
            re-assigned; you should only use _either_ Selection or SelectedItems.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection">
            <summary>
            Gets or sets the model that holds the current selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.IsTextSearchEnabled">
            <summary>
            Gets or sets a value that specifies whether a user can jump to a value by typing.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.WrapSelection">
            <summary>
            Gets or sets a value which indicates whether to wrap around when the first
            or last item is reached.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
            <remarks>
            Note that the selection mode only applies to selections made via user interaction.
            Multiple selections can be made programmatically regardless of the value of this property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.AlwaysSelected">
            <summary>
            Gets a value indicating whether <see cref="F:Avalonia.Controls.SelectionMode.AlwaysSelected"/> is set.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ScrollIntoView(System.Int32)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.GetIsSelected(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedProperty"/> on the specified control.
            </summary>
            <param name="control">The control.</param>
            <returns>The value of the attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SetIsSelected(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Gets the value of the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedProperty"/> on the specified control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The value of the property.</param>
            <returns>The value of the attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.GetContainerFromEventSource(System.Object)">
            <summary>
            Tries to get the container that was the source of an event.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <returns>The container or null if the event did not originate in a container.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ContainerIndexChangedOverride(Avalonia.Controls.Control,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ClearContainerForItemOverride(Avalonia.Controls.Control)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnDataContextBeginUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnDataContextEndUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <summary>
            Called to update the validation state for properties for which data validation is
            enabled.
            </summary>
            <param name="property">The property.</param>
            <param name="state">The current data binding state.</param>
            <param name="error">The current data binding error, if any.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnTextInput(Avalonia.Input.TextInputEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean,System.Boolean)">
            <summary>
            Moves the selection in the specified direction relative to the current selection.
            </summary>
            <param name="direction">The direction to move.</param>
            <param name="wrap">Whether to wrap when the selection reaches the first or last item.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <returns>True if the selection was moved; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MoveSelection(Avalonia.Controls.Control,Avalonia.Input.NavigationDirection,System.Boolean,System.Boolean)">
            <summary>
            Moves the selection in the specified direction relative to the specified container.
            </summary>
            <param name="from">The container which serves as a starting point for the movement.</param>
            <param name="direction">The direction to move.</param>
            <param name="wrap">Whether to wrap when the selection reaches the first or last item.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <returns>True if the selection was moved; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelection(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for an item based on user interaction.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="select">Whether the item should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <param name="rightButton">Whether the event is a right-click.</param>
            <param name="fromFocus">Wheter the event is a focus event</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelection(Avalonia.Controls.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for a container based on user interaction.
            </summary>
            <param name="container">The container.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <param name="rightButton">Whether the event is a right-click.</param>
            <param name="fromFocus">Wheter the event is a focus event</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelectionFromEventSource(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection based on an event that may have originated in a container that
            belongs to the control.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <param name="rightButton">Whether the event is a right-click.</param>
            <param name="fromFocus">Wheter the event is a focus event</param>
            <returns>
            True if the event originated from a container that belongs to the control; otherwise
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnSelectionModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> is raised on
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnSelectionModelSelectionChanged(System.Object,Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs)">
            <summary>
            Called when <see cref="E:Avalonia.Controls.Selection.ISelectionModel.SelectionChanged"/> event is raised on
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnSelectionModelLostSelection(System.Object,System.EventArgs)">
            <summary>
            Called when <see cref="E:Avalonia.Controls.Selection.ISelectionModel.LostSelection"/> event is raised on
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.Selection"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ContainerSelectionChanged(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a container raises the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/>.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkContainerSelected(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedProperty"/> on the specified container.
            </summary>
            <param name="container">The container.</param>
            <param name="selected">Whether the control is selected</param>
            <returns>The previous selection state.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.SelectingItemsControl.BindingHelper">
            <summary>
            Helper class for evaluating a binding from an Item and IBinding instance
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.SnapPointsAlignment">
            <summary>
            Specify options for snap point alignment relative to an edge. Which edge depends on the orientation of the object where the alignment is applied
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SnapPointsAlignment.Near">
            <summary>
            Use snap points grouped closer to the orientation edge.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SnapPointsAlignment.Center">
            <summary>
            Use snap points that are centered in the orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SnapPointsAlignment.Far">
            <summary>
            Use snap points grouped farther from the orientation edge.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.SnapPointsType">
            <summary>
            Specify how panning snap points are processed for gesture input.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SnapPointsType.None">
            <summary>
            No snapping behavior.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SnapPointsType.Mandatory">
            <summary>
            Content always stops at the snap point closest to where inertia would naturally stop along the direction of inertia.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SnapPointsType.MandatorySingle">
            <summary>
            Content always stops at the snap point closest to the release point along the direction of inertia.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TabStrip.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TabStrip.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TabStripItem">
            <summary>
            Represents a tab in a <see cref="T:Avalonia.Controls.Primitives.TabStrip"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TemplateAppliedEventArgs">
            <summary>
            Holds the details of the <see cref="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplateAppliedEventArgs.#ctor(Avalonia.Controls.INameScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.TemplateAppliedEventArgs"/> class.
            </summary>
            <param name="nameScope">The applied template's name scope.</param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplateAppliedEventArgs.NameScope">
            <summary>
            Gets the name scope of the applied template.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TemplatedControl">
            <summary>
            A lookless control whose visual appearance is defined by its <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.CornerRadius"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontStretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Padding"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.TemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.IsTemplateFocusTargetProperty">
            <summary>
            Defines the IsTemplateFocusTarget attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.TemplateAppliedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> routed event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied">
            <summary>
            Raised when the control's template is applied.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Background">
            <summary>
            Gets or sets the brush used to draw the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.BorderBrush">
            <summary>
            Gets or sets the brush used to draw the control's border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.BorderThickness">
            <summary>
            Gets or sets the thickness of the control's border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontFamily">
            <summary>
            Gets or sets the font family used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontSize">
            <summary>
            Gets or sets the size of the control's text in points.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontStyle">
            <summary>
            Gets or sets the font style used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight">
            <summary>
            Gets or sets the font weight used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontStretch">
            <summary>
            Gets or sets the font stretch used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Foreground">
            <summary>
            Gets or sets the brush used to draw the control's text and other foreground elements.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Padding">
            <summary>
            Gets or sets the padding placed between the border of the control and its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Template">
            <summary>
            Gets or sets the template that defines the control's appearance.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.GetIsTemplateFocusTarget(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the IsTemplateFocusTargetProperty attached property on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The property value.</returns>
            <see cref="M:Avalonia.Controls.Primitives.TemplatedControl.SetIsTemplateFocusTarget(Avalonia.Controls.Control,System.Boolean)"/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.SetIsTemplateFocusTarget(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the IsTemplateFocusTargetProperty attached property on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value.</param>
            <remarks>
            When a control is navigated to using the keyboard, a focus adorner is shown - usually
            around the control itself. However if the TemplatedControl.IsTemplateFocusTarget 
            attached property is set to true on an element in the control template, then the focus
            adorner will be shown around that control instead.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.GetTemplateFocusTarget">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.NotifyChildResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Called when the control's template is applied.
            In simple terms, this means the method is called just before the control is displayed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.ApplyTemplatedParent(Avalonia.StyledElement,Avalonia.AvaloniaObject)">
            <summary>
            Sets the TemplatedParent property for the created template children.
            </summary>
            <param name="control">The control.</param>
            <param name="templatedParent">The templated parent to apply.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TextSearch">
            <summary>
            Allows to customize text searching in <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TextSearch.TextProperty">
            <summary>
            Defines the Text attached property.
            This text will be considered during text search in <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> (such as <see cref="T:Avalonia.Controls.ComboBox"/>)
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TextSearch.SetText(Avalonia.Controls.Control,System.String)">
            <summary>
            Sets the <see cref="F:Avalonia.Controls.Primitives.TextSearch.TextProperty"/> for a control.
            </summary>
            <param name="control">The control</param>
            <param name="text">The search text to set</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TextSearch.GetText(Avalonia.Controls.Control)">
            <summary>
            Gets the <see cref="F:Avalonia.Controls.Primitives.TextSearch.TextProperty"/> of a control.
            </summary>
            <param name="control">The control</param>
            <returns>The property value</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ToggleButton">
            <summary>
            Represents a control that a user can select (check) or clear (uncheck). Base class for controls that can switch states.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ToggleButton.IsCheckedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ToggleButton.IsThreeStateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsThreeState"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ToggleButton.CheckedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.ToggleButton.Checked"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ToggleButton.UncheckedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.ToggleButton.Unchecked"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ToggleButton.IndeterminateEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.ToggleButton.Unchecked"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ToggleButton.IsCheckedChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.ToggleButton.IsCheckedChanged"/> event.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.ToggleButton.Checked">
            <summary>
            Raised when a <see cref="T:Avalonia.Controls.Primitives.ToggleButton"/> is checked.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.ToggleButton.Unchecked">
            <summary>
            Raised when a <see cref="T:Avalonia.Controls.Primitives.ToggleButton"/> is unchecked.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.ToggleButton.Indeterminate">
            <summary>
            Raised when a <see cref="T:Avalonia.Controls.Primitives.ToggleButton"/> is neither checked nor unchecked.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.ToggleButton.IsCheckedChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> property value changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked">
            <summary>
            Gets or sets whether the <see cref="T:Avalonia.Controls.Primitives.ToggleButton"/> is checked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ToggleButton.IsThreeState">
            <summary>
            Gets or sets a value that indicates whether the control supports three states.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ToggleButton.Toggle">
            <summary>
            Toggles the <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ToggleButton.OnChecked(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> becomes true.
            </summary>
            <param name="e">Event arguments for the routed event that is raised by the default implementation of this method.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ToggleButton.OnUnchecked(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> becomes false.
            </summary>
            <param name="e">Event arguments for the routed event that is raised by the default implementation of this method.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ToggleButton.OnIndeterminate(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> becomes null.
            </summary>
            <param name="e">Event arguments for the routed event that is raised by the default implementation of this method.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ToggleButton.OnIsCheckedChanged(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when <see cref="P:Avalonia.Controls.Primitives.ToggleButton.IsChecked"/> changes.
            </summary>
            <param name="e">Event arguments for the routed event that is raised by the default implementation of this method.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ToggleButton.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Track.ValueFromPoint(Avalonia.Point)">
            <summary>
            Calculates the distance along the <see cref="P:Avalonia.Controls.Primitives.Track.Thumb"/> of a specified point along the
            track.
            </summary>
            <param name="point">The specified point.</param>
            <returns>
            The distance between the Thumb and the specified pt value.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Track.ValueFromDistance(System.Double,System.Double)">
            <summary>
            Calculates the change in the <see cref="P:Avalonia.Controls.Primitives.Track.Value"/> of the <see cref="T:Avalonia.Controls.Primitives.Track"/> when the
            <see cref="P:Avalonia.Controls.Primitives.Track.Thumb"/> moves.
            </summary>
            <param name="horizontal">The horizontal displacement of the thumb.</param>
            <param name="vertical">The vertical displacement of the thumb.</param>        
        </member>
        <member name="T:Avalonia.Controls.Primitives.UniformGrid">
            <summary>
            A <see cref="T:Avalonia.Controls.Panel"/> with uniform column and row sizes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.UniformGrid.RowsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.UniformGrid.Rows"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.UniformGrid.Columns"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.UniformGrid.FirstColumn"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.UniformGrid.Rows">
            <summary>
            Specifies the row count. If set to 0, row count will be calculated automatically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.UniformGrid.Columns">
            <summary>
            Specifies the column count. If set to 0, column count will be calculated automatically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.UniformGrid.FirstColumn">
            <summary>
            Specifies, for the first row, the column where the items should start.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.VisualLayerManager.NotifyChildResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.VisualLayerManager.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.VisualLayerManager.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.VisualLayerManager.MeasureOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Primitives.VisualLayerManager.ArrangeOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Primitives.SplitViewTemplateSettings">
            <summary>
            Provides calculated values for use with the <see cref="T:Avalonia.Controls.SplitView"/>'s control theme or template.
            </summary>
            <remarks>
            This class is NOT intended for general use outside of control templates.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateRange.Start">
            <summary>
            Gets the first date in the represented range.
            </summary>
            <value>The first date in the represented range.</value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateRange.End">
            <summary>
            Gets the last date in the represented range.
            </summary>
            <value>The last date in the represented range.</value>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateRange.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.CalendarDateRange" /> class
            with a single date.
            </summary>
            <param name="day">The date to be represented by the range.</param>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.CalendarDateRange" /> class
            with a range of dates.
            </summary>
            <param name="start">
            The start of the range to be represented.
            </param>
            <param name="end">The end of the range to be represented.</param>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateRange.ContainsAny(Avalonia.Controls.CalendarDateRange)">
            <summary>
            Returns true if any day in the given DateTime range is contained in
            the current CalendarDateRange.
            </summary>
            <param name="range">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="T:Avalonia.Controls.Canvas">
            <summary>
            A panel that displays child controls at arbitrary locations.
            </summary>
            <remarks>
            Unlike other <see cref="T:Avalonia.Controls.Panel"/> implementations, the <see cref="T:Avalonia.Controls.Canvas"/> doesn't lay out
            its children in any particular layout. Instead, the positioning of each child control is
            defined by the <code>Canvas.Left</code>, <code>Canvas.Top</code>, <code>Canvas.Right</code>
            and <code>Canvas.Bottom</code> attached properties.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Canvas.LeftProperty">
            <summary>
            Defines the Left attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.TopProperty">
            <summary>
            Defines the Top attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.RightProperty">
            <summary>
            Defines the Right attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.BottomProperty">
            <summary>
            Defines the Bottom attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Canvas.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Canvas"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetLeft(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Left attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetLeft(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Left attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetTop(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Top attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's top coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetTop(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Top attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The top value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetRight(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Right attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's right coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetRight(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Right attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The right value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetBottom(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Bottom attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's bottom coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetBottom(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Bottom attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The bottom value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.ArrangeChild(Avalonia.Controls.Control,Avalonia.Size)">
            <summary>
            Arranges a single child.
            </summary>
            <param name="child">The child to arrange.</param>
            <param name="finalSize">The size allocated to the canvas.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.Carousel">
            <summary>
            An items control that displays its items as pages that fill the control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.PageTransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Carousel.PageTransition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.DefaultPanel">
            <summary>
            The default value of <see cref="F:Avalonia.Controls.ItemsControl.ItemsPanelProperty"/> for 
            <see cref="T:Avalonia.Controls.Carousel"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Carousel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Carousel.PageTransition">
            <summary>
            Gets or sets the transition to use when moving between pages.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.Next">
            <summary>
            Moves to the next item in the carousel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.Previous">
            <summary>
            Moves to the previous item in the carousel.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CheckBox">
            <summary>
            A check box control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Chrome.CaptionButtons">
            <summary>
            Draws window minimize / maximize / close buttons in a <see cref="T:Avalonia.Controls.Chrome.TitleBar"/> when managed client decorations are enabled.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Chrome.CaptionButtons.HostWindow">
            <summary>
            Currently attached window.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Chrome.TitleBar">
            <summary>
            Draws a titlebar when managed client decorations are enabled.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Chrome.TitleBar.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Chrome.TitleBar.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Chrome.TitleBar.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.ColumnDefinition">
            <summary>
            Holds a column definitions for a <see cref="T:Avalonia.Controls.Grid"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.MaxWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.MaxWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.MinWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.MinWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.WidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.Width"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
            <param name="value">The width of the column.</param>
            <param name="type">The width unit of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor(Avalonia.Controls.GridLength)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
            <param name="width">The width of the column.</param>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.ActualWidth">
            <summary>
            Gets the actual calculated width of the column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.MaxWidth">
            <summary>
            Gets or sets the maximum width of the column in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.MinWidth">
            <summary>
            Gets or sets the minimum width of the column in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ColumnDefinitions">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.ColumnDefinition"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinitions"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinitions"/> class.
            </summary>
            <param name="s">A string representation of the column definitions.</param>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.Parse(System.String)">
            <summary>
            Parses a string representation of column definitions collection.
            </summary>
            <param name="s">The column definitions string.</param>
            <returns>The <see cref="T:Avalonia.Controls.ColumnDefinitions"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.ComboBox">
            <summary>
            A drop-down list control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.IsDropDownOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.IsDropDownOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.MaxDropDownHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.MaxDropDownHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.SelectionBoxItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.SelectionBoxItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.PlaceholderTextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.PlaceholderText"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.PlaceholderForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.PlaceholderForeground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ComboBox"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ComboBox.DropDownClosed">
            <summary>
            Occurs after the drop-down (popup) list of the <see cref="T:Avalonia.Controls.ComboBox"/> closes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ComboBox.DropDownOpened">
            <summary>
            Occurs after the drop-down (popup) list of the <see cref="T:Avalonia.Controls.ComboBox"/> opens.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the dropdown is currently open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height for the dropdown list.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.SelectionBoxItem">
            <summary>
            Gets or sets the item to display as the control's content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.PlaceholderText">
            <summary>
            Gets or sets the PlaceHolder text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.PlaceholderForeground">
            <summary>
            Gets or sets the Brush that renders the placeholder text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.ComboBoxItem">
            <summary>
            A selectable item in a <see cref="T:Avalonia.Controls.ComboBox"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ContainerClearingEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.ItemsControl.ContainerClearing"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContainerClearingEventArgs.Container">
            <summary>
            Gets the prepared container.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ContainerIndexChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.ItemsControl.ContainerIndexChanged"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContainerIndexChangedEventArgs.Container">
            <summary>
            Get the container for which the index changed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContainerIndexChangedEventArgs.NewIndex">
            <summary>
            Gets the index of the container after the change.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContainerIndexChangedEventArgs.OldIndex">
            <summary>
            Gets the index of the container before the change.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ContainerPreparedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.ItemsControl.ContainerPrepared"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContainerPreparedEventArgs.Container">
            <summary>
            Gets the prepared container.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContainerPreparedEventArgs.Index">
            <summary>
            Gets the index of the item the container was prepared for.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ContentControl">
            <summary>
            Displays <see cref="P:Avalonia.Controls.ContentControl.Content"/> according to an <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.Content"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Content">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Presenter">
            <summary>
            Gets the presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Avalonia#Controls#Presenters#IContentPresenterHost#LogicalChildren">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.ContextMenu">
            <summary>
            A control context menu.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.HorizontalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.VerticalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.VerticalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementAnchorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.PlacementAnchor"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.PlacementConstraintAdjustment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementGravityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.PlacementGravity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.Placement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.PlacementMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.PlacementRect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.WindowManagerAddShadowHint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContextMenu.PlacementTargetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContextMenu.PlacementTarget"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#ctor(Avalonia.Controls.Platform.IMenuInteractionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
            <param name="interactionHandler">The menu interaction handler.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.HorizontalOffset">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.VerticalOffset">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.VerticalOffset"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.PlacementAnchor">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementAnchor"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.PlacementConstraintAdjustment">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementConstraintAdjustment"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.PlacementGravity">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementGravity"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.PlacementMode">
            <inheritdoc cref="P:Avalonia.Controls.ContextMenu.Placement"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.Placement">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.Placement"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.PlacementRect">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementRect"/>
        </member>
        <member name="P:Avalonia.Controls.ContextMenu.PlacementTarget">
            <inheritdoc cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>
        </member>
        <member name="E:Avalonia.Controls.ContextMenu.Opening">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.ContextMenu.IsOpen" />
            property is changing from false to true.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ContextMenu.Closing">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.ContextMenu.IsOpen" />
            property is changing from true to false.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.ContextMenuChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Control.ContextMenu"/> property changes on a control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Open">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Open(Avalonia.Controls.Control)">
            <summary>
            Opens a context menu on the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Close">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ContextRequestedEventArgs">
            <summary>
            Provides event data for the ContextRequested event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextRequestedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ContextRequestedEventArgs class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextRequestedEventArgs.#ctor(Avalonia.Input.PointerEventArgs)">
            <inheritdoc cref="M:Avalonia.Controls.ContextRequestedEventArgs.#ctor" />
        </member>
        <member name="M:Avalonia.Controls.ContextRequestedEventArgs.TryGetPosition(Avalonia.Controls.Control,Avalonia.Point@)">
            <summary>
            Gets the x- and y-coordinates of the pointer position, optionally evaluated against a coordinate origin of a supplied <see cref="T:Avalonia.Controls.Control"/>.
            </summary>
            <param name="relativeTo">
            Any <see cref="T:Avalonia.Controls.Control"/>-derived object that is connected to the same object tree.
            To specify the object relative to the overall coordinate system, use a relativeTo  value of null.
            </param>
            <param name="point">
            A <see cref="T:Avalonia.Point"/> that represents the current x- and y-coordinates of the mouse pointer position.
            If null was passed as relativeTo, this coordinate is for the overall window.
            If a relativeTo value other than null was passed, this coordinate is relative to the object referenced by relativeTo.
            </param>
            <returns>
            true if the context request was initiated by a pointer device; otherwise, false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Control">
             <summary>
             Base class for Avalonia controls.
             </summary>
             <remarks>
             The control class extends <see cref="T:Avalonia.Input.InputElement"/> and adds the following features:
            
             - A <see cref="P:Avalonia.Controls.Control.Tag"/> property to allow user-defined data to be attached to the control.
             - <see cref="F:Avalonia.Controls.Control.ContextRequestedEvent"/> and other context menu related members.
             </remarks>
        </member>
        <member name="F:Avalonia.Controls.Control.FocusAdornerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.FocusAdorner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.TagProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.Tag"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.ContextMenuProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.ContextMenu"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.ContextFlyoutProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.ContextFlyout"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.RequestBringIntoViewEvent">
            <summary>
            Event raised when an element wishes to be scrolled into view.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.ContextRequestedEvent">
            <summary>
            Provides event data for the <see cref="E:Avalonia.Controls.Control.ContextRequested"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.LoadedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Control.Loaded"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.UnloadedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Control.Unloaded"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.SizeChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Control.SizeChanged"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.FocusAdorner">
            <summary>
            Gets or sets the control's focus adorner.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.DataTemplates">
            <summary>
            Gets or sets the data templates for the control.
            </summary>
            <remarks>
            Each control may define data templates which are applied to the control itself and its
            children.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.ContextMenu">
            <summary>
            Gets or sets a context menu to the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.ContextFlyout">
            <summary>
            Gets or sets a context flyout to the control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.IsLoaded">
            <summary>
            Gets a value indicating whether the control is fully constructed in the visual tree
            and both layout and render are complete.
            </summary>
            <remarks>
            This is set to true while raising the <see cref="E:Avalonia.Controls.Control.Loaded"/> event.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.Tag">
            <summary>
            Gets or sets a user-defined object attached to the control.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Control.ContextRequested">
            <summary>
            Occurs when the user has completed a context input gesture, such as a right-click.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Control.Loaded">
            <summary>
            Occurs when the control has been fully constructed in the visual tree and both
            layout and render are complete.
            </summary>
            <remarks>
            This event is guaranteed to occur after the control template is applied and references
            to objects created after the template is applied are available. This makes it different
            from OnAttachedToVisualTree which doesn't have these references. This event occurs at the
            latest possible time in the control creation life-cycle.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Control.Unloaded">
            <summary>
            Occurs when the control is removed from the visual tree.
            </summary>
            <remarks>
            This is API symmetrical with <see cref="E:Avalonia.Controls.Control.Loaded"/> and exists for compatibility with other
            XAML frameworks; however, it behaves the same as OnDetachedFromVisualTree.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Control.SizeChanged">
            <summary>
            Occurs when the bounds (actual size) of the control have changed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#Controls#Templates#IDataTemplateHost#IsDataTemplatesInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.Avalonia#Styling#ISetterValue#Initialize(Avalonia.Styling.SetterBase)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.Avalonia#Rendering#IVisualBrushInitialize#EnsureInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.GetTemplateFocusTarget">
            <summary>
            Gets the element that receives the focus adorner.
            </summary>
            <returns>The control that receives the focus adorner.</returns>
        </member>
        <member name="M:Avalonia.Controls.Control.ScheduleOnLoadedCore">
            <summary>
            Schedules <see cref="M:Avalonia.Controls.Control.OnLoadedCore"/> to be called for this control.
            For performance, it will be queued with other controls.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.OnLoadedCore">
            <summary>
            Invoked as the first step of marking the control as loaded and raising the
            <see cref="E:Avalonia.Controls.Control.Loaded"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.OnUnloadedCore">
            <summary>
            Invoked as the first step of marking the control as unloaded and raising the
            <see cref="E:Avalonia.Controls.Control.Unloaded"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.OnLoaded(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Control.Loaded"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.OnUnloaded(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Control.Unloaded"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.OnSizeChanged(Avalonia.Controls.SizeChangedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnCreateAutomationPeer">
            <summary>
            Returns a new, type-specific <see cref="T:Avalonia.Automation.Peers.AutomationPeer"/> implementation for the control.
            </summary>
            <returns>The type-specific <see cref="T:Avalonia.Automation.Peers.AutomationPeer"/> implementation.</returns>
        </member>
        <member name="M:Avalonia.Controls.Control.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.ControlExtensions">
            <summary>
            Adds common functionality to <see cref="T:Avalonia.Controls.Control"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.BringIntoView(Avalonia.Controls.Control)">
            <summary>
            Tries to bring the control into view.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.BringIntoView(Avalonia.Controls.Control,Avalonia.Rect)">
            <summary>
            Tries to bring the control into view.
            </summary>
            <param name="control">The control.</param>
            <param name="rect">The area of the control to being into view.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.FindControl``1(Avalonia.Controls.Control,System.String)">
            <summary>
            Finds the named control in the scope of the specified control.
            </summary>
            <typeparam name="T">The type of the control to find.</typeparam>
            <param name="control">The control to look in.</param>
            <param name="name">The name of the control to find.</param>
            <returns>The control or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.GetControl``1(Avalonia.Controls.Control,System.String)">
            <summary>
            Finds the named control in the scope of the specified control and throws if not found.
            </summary>
            <typeparam name="T">The type of the control to find.</typeparam>
            <param name="control">The control to look in.</param>
            <param name="name">The name of the control to find.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.Set(Avalonia.Controls.IPseudoClasses,System.String,System.IObservable{System.Boolean})">
            <summary>
            Sets a pseudoclass depending on an observable trigger.
            </summary>
            <param name="classes">The pseudoclasses collection.</param>
            <param name="name">The name of the pseudoclass to set.</param>
            <param name="trigger">The trigger: true adds the pseudoclass, false removes.</param>
            <returns>A disposable used to cancel the subscription.</returns>
        </member>
        <member name="T:Avalonia.Controls.Controls">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Control"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Controls.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Controls"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Controls.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Controls.Control})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Controls"/> class.
            </summary>
            <param name="items">The initial items in the collection.</param>
        </member>
        <member name="T:Avalonia.Controls.Converters.CornerRadiusFilterConverter">
            <summary>
            Converts an existing CornerRadius struct to a new CornerRadius struct,
            with filters applied to extract only the specified corners, leaving the others set to 0.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Converters.CornerRadiusFilterConverter.Filter">
            <summary>
            Gets or sets the corners to filter by.
            Only the specified corners will be included in the converted <see cref="T:Avalonia.CornerRadius"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Converters.CornerRadiusFilterConverter.Scale">
            <summary>
            Gets or sets the scale multiplier applied uniformly to each corner.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Converters.CornerRadiusFilterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Converters.CornerRadiusFilterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Converters.CornerRadiusToDoubleConverter">
            <summary>
            Converts one corner of a <see cref="T:Avalonia.CornerRadius"/> to its double value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Converters.CornerRadiusToDoubleConverter.Corner">
            <summary>
            Gets or sets the specific corner of the <see cref="T:Avalonia.CornerRadius"/> to convert to double.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Converters.CornerRadiusToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Converters.CornerRadiusToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Converters.Corners">
            <summary>
            Defines constants that specify one or more corners of a <see cref="T:Avalonia.CornerRadius"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Converters.Corners.None">
            <summary>
            No corner.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Converters.Corners.TopLeft">
            <summary>
            The TopLeft corner.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Converters.Corners.TopRight">
            <summary>
            The TopRight corner.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Converters.Corners.BottomLeft">
            <summary>
            The BottomLeft corner.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Converters.Corners.BottomRight">
            <summary>
            The BottomRight corner.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Converters.EnumToBoolConverter">
            <summary>
            Converter to convert an enum value to bool by comparing to the given parameter.
            Both value and parameter must be of the same enum type.
            </summary>
            <remarks>
            This converter is useful to enable binding of radio buttons with a selected enum value.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Converters.EnumToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Converters.EnumToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Converters.PlatformKeyGestureConverter">
            <summary>
            Converts a <see cref="T:Avalonia.Input.KeyGesture"/> to a string, formatting it according to the current
            platform's style guidelines.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Converters.PlatformKeyGestureConverter.ToPlatformString(Avalonia.Input.KeyGesture)">
            <summary>
            Converts a <see cref="T:Avalonia.Input.KeyGesture"/> to a string, formatting it according to the current
            platform's style guidelines.
            </summary>
            <param name="gesture">The gesture.</param>
            <returns>The gesture formatted according to the current platform.</returns>
        </member>
        <member name="T:Avalonia.Controls.Converters.StringFormatConverter">
            <summary>
            Calls <see cref="M:System.String.Format(System.String,System.Object[])"/> on the passed in values, where the first element in the list
            is the string, and everything after it is passed into the object array in order.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DataValidationErrors">
            <summary>
            A control which displays an error notifier when there is a DataValidationError. 
            Provides attached properties to track errors on a control
            </summary>
            <remarks>
            You will probably only want to create instances inside of control templates.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.DataValidationErrors.ErrorsProperty">
            <summary>
            Defines the DataValidationErrors.Errors attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataValidationErrors.HasErrorsProperty">
            <summary>
            Defines the DataValidationErrors.HasErrors attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataValidationErrors.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.DataValidationErrors"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DatePicker">
            <summary>
            A control to allow the user to select a date
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.DayFormatProperty">
            <summary>
            Define the <see cref="P:Avalonia.Controls.DatePicker.DayFormat"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.DayVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.DayVisible"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.MaxYearProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.MaxYear"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.MinYearProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.MinYear"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.MonthFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.MonthFormat"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.MonthVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.MonthVisible"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.YearFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.YearFormat"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.YearVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.YearVisible"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePicker.SelectedDateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePicker.SelectedDate"/> Property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.DayVisible">
            <summary>
            Gets or sets whether the day is visible
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.MaxYear">
            <summary>
            Gets or sets the maximum year for the picker
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.MinYear">
            <summary>
            Gets or sets the minimum year for the picker
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.MonthFormat">
            <summary>
            Gets or sets the month format
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.MonthVisible">
            <summary>
            Gets or sets whether the month is visible
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.YearFormat">
            <summary>
            Gets or sets the year format
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.YearVisible">
            <summary>
            Gets or sets whether the year is visible
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.SelectedDate">
            <summary>
            Gets or sets the Selected Date for the picker, can be null
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DatePicker.SelectedDateChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.DatePicker.SelectedDate"/> changes
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DatePickerPresenter">
            <summary>
            Defines the presenter used for selecting a date for a 
            <see cref="T:Avalonia.Controls.DatePicker"/>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.DateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.Date"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.DayFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.DayFormat"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.DayVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.DayVisible"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.MaxYearProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.MaxYear"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.MinYearProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.MinYear"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.MonthFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.MonthFormat"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.MonthVisible"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.YearFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.YearFormat"/> Property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerPresenter.YearVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DatePickerPresenter.YearVisible"/> Property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.Date">
            <summary>
            Gets or sets the current Date for the picker
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.DayFormat">
            <summary>
            Gets or sets the DayFormat
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.DayVisible">
            <summary>
            Get or sets whether the Day selector is visible
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.MaxYear">
            <summary>
            Gets or sets the maximum pickable year
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.MinYear">
            <summary>
            Gets or sets the minimum pickable year
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.MonthFormat">
            <summary>
            Gets or sets the month format
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.MonthVisible">
            <summary>
            Gets or sets whether the month selector is visible
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.YearFormat">
            <summary>
            Gets or sets the year format
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePickerPresenter.YearVisible">
            <summary>
            Gets or sets whether the year selector is visible
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DatePickerPresenter.InitPicker">
            <summary>
            Initializes the picker selectors.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DatePickerSelectedValueChangedEventArgs">
            <summary>
            Defines the argument passed when the <see cref="T:Avalonia.Controls.DatePicker"/> SelectedDate changes
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TimePicker">
            <summary>
            A control to allow the user to select a time.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TimePicker.MinuteIncrementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TimePicker.MinuteIncrement"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TimePicker.ClockIdentifierProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TimePicker.ClockIdentifier"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TimePicker.SelectedTimeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TimePicker.SelectedTime"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TimePicker.MinuteIncrement">
            <summary>
            Gets or sets the minute increment in the picker
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TimePicker.ClockIdentifier">
            <summary>
            Gets or sets the clock identifier, either 12HourClock or 24HourClock
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TimePicker.SelectedTime">
            <summary>
            Gets or sets the selected time. Can be null.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TimePicker.SelectedTimeChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.TimePicker.SelectedTime"/> property changes
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TimePickerPresenter">
            <summary>
            Defines the presenter used for selecting a time. Intended for use with
            <see cref="T:Avalonia.Controls.TimePicker"/> but can be used independently
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TimePickerPresenter.MinuteIncrementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TimePickerPresenter.MinuteIncrement"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TimePickerPresenter.ClockIdentifierProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TimePickerPresenter.ClockIdentifier"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TimePickerPresenter.TimeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TimePickerPresenter.Time"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TimePickerPresenter.MinuteIncrement">
            <summary>
            Gets or sets the minute increment in the selector
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TimePickerPresenter.ClockIdentifier">
            <summary>
            Gets or sets the current clock identifier, either 12HourClock or 24HourClock
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TimePickerPresenter.Time">
            <summary>
            Gets or sets the current time
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Decorator">
            <summary>
            Base class for controls which decorate a single child control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Decorator.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Decorator.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Decorator.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Decorator.Padding"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Decorator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Decorator"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Decorator.Child">
            <summary>
            Gets or sets the decorated control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Decorator.Padding">
            <summary>
            Gets or sets the padding to place around the <see cref="P:Avalonia.Controls.Decorator.Child"/> control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Decorator.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Decorator.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Decorator.ChildChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Decorator.Child"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.DefinitionBase">
            <summary>
            DefinitionBase provides core functionality used internally by Grid
            and ColumnDefinitionCollection / RowDefinitionCollection
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SharedSizeGroup">
            <summary>
            SharedSizeGroup property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.OnEnterParentTree">
            <summary>
            Callback to notify about entering model tree.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.OnExitParentTree">
            <summary>
            Callback to notify about exiting model tree.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.OnBeforeLayout(Avalonia.Controls.Grid)">
            <summary>
            Performs action preparing definition to enter layout calculation mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.UpdateMinSize(System.Double)">
            <summary>
            Updates min size.
            </summary>
            <param name="minSize">New size.</param>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SetMinSize(System.Double)">
            <summary>
            Sets min size.
            </summary>
            <param name="minSize">New size.</param>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.OnIsSharedSizeScopePropertyChanged(Avalonia.AvaloniaObject,Avalonia.AvaloniaPropertyChangedEventArgs)">
            <remarks>
            This method reflects Grid.SharedScopeProperty state by setting / clearing
            dynamic property PrivateSharedSizeScopeProperty. Value of PrivateSharedSizeScopeProperty
            is a collection of SharedSizeState objects for the scope.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.OnUserSizePropertyChanged(Avalonia.Controls.DefinitionBase,Avalonia.AvaloniaPropertyChangedEventArgs)">
            <remarks>
            Notifies parent <see cref="T:Avalonia.Controls.Grid"/> or size scope that definition size has been changed.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.IsShared">
            <summary>
            Returns <c>true</c> if this definition is a part of shared group.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UserSize">
            <summary>
            Internal accessor to user size field.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UserMinSize">
            <summary>
            Internal accessor to user min size field.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UserMaxSize">
            <summary>
            Internal accessor to user max size field.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.Index">
            <summary>
            DefinitionBase's index in the parents collection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SizeType">
            <summary>
            Layout-time user size type.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.MeasureSize">
            <summary>
            Returns or sets measure size for the definition.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.PreferredSize">
            <summary>
            Returns definition's layout time type sensitive preferred size.
            </summary>
            <remarks>
            Returned value is guaranteed to be true preferred size.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SizeCache">
            <summary>
            Returns or sets size cache for the definition.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.MinSize">
            <summary>
            Returns min size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.MinSizeForArrange">
            <summary>
            Returns min size, always taking into account shared state.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.FinalOffset">
            <summary>
            Offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UserSizeValueCache">
            <summary>
            Internal helper to access up-to-date UserSize property value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UserMinSizeValueCache">
            <summary>
            Internal helper to access up-to-date UserMinSize property value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UserMaxSizeValueCache">
            <summary>
            Internal helper to access up-to-date UserMaxSize property value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SetFlags(System.Boolean,Avalonia.Controls.DefinitionBase.Flags)">
            <summary>
            SetFlags is used to set or unset one or multiple
            flags on the object.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.CheckFlagsAnd(Avalonia.Controls.DefinitionBase.Flags)">
            <summary>
            CheckFlagsAnd returns <c>true</c> if all the flags in the
            given bitmask are set on the object.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeGroupPropertyValueValid(System.String)">
            <remarks>
            Verifies that Shared Size Group Property string
            a) not empty.
            b) contains only letters, digits and underscore ('_').
            c) does not start with a digit.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.OnPrivateSharedSizeScopePropertyChanged(Avalonia.Controls.DefinitionBase,Avalonia.AvaloniaPropertyChangedEventArgs{Avalonia.Controls.DefinitionBase.SharedSizeScope})">
            <remark>
            OnPrivateSharedSizeScopePropertyChanged is called when new scope enters or
            existing scope just left. In both cases if the DefinitionBase object is already registered
            in SharedSizeState, it should un-register and register itself in a new one.
            </remark>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.UseSharedMinimum">
            <summary>
            Convenience accessor to UseSharedMinimum flag
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.LayoutWasUpdated">
            <summary>
            Convenience accessor to LayoutWasUpdated flag
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DefinitionBase.SharedSizeScope">
            <summary>
            Collection of shared states objects for a single scope
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeScope.EnsureSharedState(System.String)">
            <summary>
            Returns SharedSizeState object for a given group.
            Creates a new StatedState object if necessary.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeScope.Remove(System.Object)">
            <summary>
            Removes an entry in the registry by the given key.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DefinitionBase.SharedSizeState">
            <summary>
            Implementation of per shared group state object
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeState.#ctor(Avalonia.Controls.DefinitionBase.SharedSizeScope,System.String)">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeState.AddMember(Avalonia.Controls.DefinitionBase)">
            <summary>
            Adds / registers a definition instance.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeState.RemoveMember(Avalonia.Controls.DefinitionBase)">
            <summary>
            Removes / un-registers a definition instance.
            </summary>
            <remarks>
            If the collection of registered definitions becomes empty
            instantiates self removal from owner's collection.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeState.Invalidate">
            <summary>
            Propagates invalidations for all registered definitions.
            Resets its own state.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeState.EnsureDeferredValidation(Avalonia.Controls.Control)">
            <summary>
            Makes sure that one and only one layout updated handler is registered for this shared state.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SharedSizeState.MinSize">
            <summary>
            DefinitionBase's specific code.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SharedSizeState.UserSize">
            <summary>
            DefinitionBase's specific code.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.SharedSizeState.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            OnLayoutUpdated handler. Validates that all participating definitions
            have updated min size value. Forces another layout update cycle if needed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DefinitionBase.PrivateSharedSizeScopeProperty">
            <summary>
            Private shared size scope property holds a collection of shared state objects for the a given shared size scope.
            <see cref="M:Avalonia.Controls.DefinitionBase.OnIsSharedSizeScopePropertyChanged(Avalonia.AvaloniaObject,Avalonia.AvaloniaPropertyChangedEventArgs)"/>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DefinitionBase.SharedSizeGroupProperty">
            <summary>
            Shared size group property marks column / row definition as belonging to a group "Foo" or "Bar".
            </summary>
            <remarks>
            Value of the Shared Size Group Property must satisfy the following rules:
            <list type="bullet">
            <item><description>
            String must not be empty.
            </description></item>
            <item><description>
            String must consist of letters, digits and underscore ('_') only.
            </description></item>
            <item><description>
            String must not start with a digit.
            </description></item>
            </list>
            </remarks> 
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.#cctor">
            <summary>
            Static ctor. Used for static registration of properties.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DefinitionBase.AffectsParentMeasure(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property on a definition as affecting the parent grid's measurement.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Avalonia.Controls.DesktopApplicationExtensions.Run(Avalonia.Application,Avalonia.Input.ICloseable)">
            <summary>
            On desktop-style platforms runs the application's main loop until closable is closed
            </summary>
            <remarks>
            Consider using StartWithDesktopStyleLifetime instead, see https://github.com/AvaloniaUI/Avalonia/wiki/Application-lifetimes for details
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.DesktopApplicationExtensions.Run(Avalonia.Application,Avalonia.Controls.Window)">
            <summary>
            On desktop-style platforms runs the application's main loop until main window is closed
            </summary>
            <remarks>
            Consider using StartWithDesktopStyleLifetime instead, see https://github.com/AvaloniaUI/Avalonia/wiki/Application-lifetimes for details
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.DesktopApplicationExtensions.Run(Avalonia.Application,System.Threading.CancellationToken)">
            <summary>
            On desktop-style platforms runs the application's main loop with custom CancellationToken
            without setting a lifetime.
            </summary>
            <param name="app">The application.</param>
            <param name="token">The token to track.</param>
        </member>
        <member name="T:Avalonia.Controls.Diagnostics.IPopupHostProvider">
            <summary>
            Diagnostics interface to retrieve an associated <see cref="T:Avalonia.Controls.Primitives.IPopupHost"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost">
            <summary>
            The popup host.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHostChanged">
            <summary>
            Raised when the popup host changes.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Diagnostics.ToolTipDiagnostics">
            <summary>
            Helper class to provide diagnostics information for <see cref="T:Avalonia.Controls.ToolTip"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Diagnostics.ToolTipDiagnostics.ToolTipProperty">
            <summary>
            Provides access to the internal <see cref="F:Avalonia.Controls.ToolTip.ToolTipProperty"/> for use in DevTools.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Dock">
            <summary>
            Defines the available docking modes for a control in a <see cref="T:Avalonia.Controls.DockPanel"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DockPanel">
            <summary>
            A panel which arranges its children at the top, bottom, left, right or center.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DockPanel.DockProperty">
            <summary>
            Defines the Dock attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DockPanel.LastChildFillProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DockPanel.LastChildFill"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.DockPanel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.GetDock(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the Dock attached property on the specified control.
            </summary>
            <param name="control">The control.</param>
            <returns>The Dock attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.SetDock(Avalonia.Controls.Control,Avalonia.Controls.Dock)">
            <summary>
            Sets the value of the Dock attached property on the specified control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The value of the Dock property.</param>
        </member>
        <member name="P:Avalonia.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value which indicates whether the last child of the 
            <see cref="T:Avalonia.Controls.DockPanel"/> fills the remaining space in the panel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.MeasureOverride(Avalonia.Size)">
            <summary>
            Updates DesiredSize of the DockPanel.  Called by parent Control.  This is the first pass of layout.
            </summary>
            <remarks>
            Children are measured based on their sizing properties and <see cref="T:Avalonia.Controls.Dock" />.  
            Each child is allowed to consume all of the space on the side on which it is docked; Left/Right docked
            children are granted all vertical space for their entire width, and Top/Bottom docked children are
            granted all horizontal space for their entire height.
            </remarks>
            <param name="constraint">Constraint size is an "upper limit" that the return value should not exceed.</param>
            <returns>The Panel's desired size.</returns>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.ArrangeOverride(Avalonia.Size)">
            <summary>
            DockPanel computes a position and final size for each of its children based upon their
            <see cref="T:Avalonia.Controls.Dock" /> enum and sizing properties.
            </summary>
            <param name="arrangeSize">Size that DockPanel will assume to position children.</param>
        </member>
        <member name="T:Avalonia.Controls.Documents.Bold">
            <summary>
            Bold element - markup helper for indicating bolded content.
            Equivalent to a Span with FontWeight property set to FontWeights.Bold.
            Can contain other inline elements.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Documents.Inline">
            <summary>
            Inline element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.Inline.TextDecorationsProperty">
            <summary>
            AvaloniaProperty for <see cref="P:Avalonia.Controls.Documents.Inline.TextDecorations" /> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.Inline.BaselineAlignmentProperty">
            <summary>
            AvaloniaProperty for <see cref="P:Avalonia.Controls.Documents.Inline.BaselineAlignment" /> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.Inline.TextDecorations">
            <summary>
            The TextDecorations property specifies decorations that are added to the text of an element.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.Inline.BaselineAlignment">
            <summary>
            Describes how the baseline for a text-based element is positioned on the vertical axis,
            relative to the established baseline for text.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.Inline.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Documents.InlineCollection">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Documents.Inline"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.InlineCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Documents.InlineCollection"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.InlineCollection.Text">
            <summary>
            Gets or adds the text held by the inlines collection.
            <remarks>
            Can be null for complex content.
            </remarks>
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.InlineCollection.Add(System.String)">
            <summary>
            Adds a text segment to the collection.
            <remarks>
            For non complex content this appends the text to the end of currently held text.
            For complex content this adds a <see cref="T:Avalonia.Controls.Documents.Run"/> to the collection.
            </remarks>
            </summary>
            <param name="text">The to be added text.</param>
        </member>
        <member name="M:Avalonia.Controls.Documents.InlineCollection.Add(Avalonia.Controls.Control)">
            <summary>
            Adds a control wrapped inside a <see cref="T:Avalonia.Controls.Documents.InlineUIContainer"/> to the collection.
            </summary>
            <param name="control">The to be added control.</param>
        </member>
        <member name="E:Avalonia.Controls.Documents.InlineCollection.Invalidated">
            <summary>
            Raised when an inline in the collection changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.InlineCollection.Invalidate">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.Documents.InlineCollection.Invalidated"/> event.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Documents.InlineUIContainer">
            <summary>
            InlineUIContainer - a wrapper for embedded UIElements in text 
            flow content inline collections
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.InlineUIContainer.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.InlineUIContainer.Child"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.InlineUIContainer.#ctor">
            <summary>
            Initializes a new instance of InlineUIContainer element.
            </summary>
            <remarks>
            The purpose of this element is to be a wrapper for UIElements
            when they are embedded into text flow - as items of
            InlineCollections.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Documents.InlineUIContainer.#ctor(Avalonia.Controls.Control)">
            <summary>
            Initializes an InlineBox specifying its child UIElement
            </summary>
            <param name="child">
            UIElement set as a child of this inline item
            </param>
        </member>
        <member name="P:Avalonia.Controls.Documents.InlineUIContainer.Child">
            <summary>
            The content spanned by this TextElement.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Documents.Italic">
            <summary>
            Italic element - markup helper for indicating italicized content.
            Equivalent to a Span with FontStyle property set to FontStyles.Italic.
            Can contain other inline elements.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Documents.LineBreak">
            <summary>
            LineBreak element that forces a line breaking. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.LineBreak.#ctor">
            <summary>
            Creates a new LineBreak instance.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Documents.Run">
            <summary>
            A terminal element in text flow hierarchy - contains a uniformatted run of unicode characters
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.Run.#ctor">
            <summary>
            Initializes an instance of Run class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.Run.#ctor(System.String)">
            <summary>
            Initializes an instance of Run class specifying its text content.
            </summary>
            <param name="text">
            Text content assigned to the Run.
            </param>
        </member>
        <member name="F:Avalonia.Controls.Documents.Run.TextProperty">
            <summary>
            Dependency property backing Text.
            </summary>
            <remarks>
            Note that when a TextRange that intersects with this Run gets modified (e.g. by editing 
            a selection in RichTextBox), we will get two changes to this property since we delete 
            and then insert when setting the content of a TextRange.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Documents.Run.Text">
            <summary>
            The content spanned by this TextElement.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Documents.Span">
            <summary>
            Span element used for grouping other Inline elements.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.Span.InlinesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.Span.Inlines"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.Span.Inlines">
            <summary>
            Gets or sets the inlines.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.Span.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Documents.TextElement">
            <summary>
            TextElement is an  base class for content in text based controls.
            TextElements span other content, applying property values or providing structural information.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.FontStretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.FontStretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Documents.TextElement.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Documents.TextElement.Foreground"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.Background">
            <summary>
            Gets or sets a brush used to paint the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Documents.TextElement.Foreground">
            <summary>
            Gets or sets a brush used to paint the text.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.GetFontFamily(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontFamilyProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.SetFontFamily(Avalonia.Controls.Control,Avalonia.Media.FontFamily)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontFamilyProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.GetFontSize(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontSizeProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font size.</returns>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.SetFontSize(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontSizeProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.GetFontStyle(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontStyleProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font style.</returns>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.SetFontStyle(Avalonia.Controls.Control,Avalonia.Media.FontStyle)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontStyleProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.GetFontWeight(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontWeightProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font weight.</returns>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.SetFontWeight(Avalonia.Controls.Control,Avalonia.Media.FontWeight)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontWeightProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.GetFontStretch(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontStretchProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font stretch.</returns>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.SetFontStretch(Avalonia.Controls.Control,Avalonia.Media.FontStretch)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.FontStretchProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.GetForeground(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.ForegroundProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The foreground.</returns>
        </member>
        <member name="M:Avalonia.Controls.Documents.TextElement.SetForeground(Avalonia.Controls.Control,Avalonia.Media.IBrush)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.Documents.TextElement.ForegroundProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="T:Avalonia.Controls.Documents.Underline">
            <summary>
            Underline element - markup helper for indicating superscript content.
            Equivalent to a Span with TextDecorations property set to TextDecorations.Underlined.
            Can contain other inline elements.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DropDownButton">
            <summary>
            A button with an added drop-down chevron to visually indicate it has a flyout with additional actions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.DropDownButton"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ExpandDirection">
            <summary>
            Direction in which an <see cref="T:Avalonia.Controls.Expander"/> control opens.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ExpandDirection.Down">
            <summary>
            Opens down.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ExpandDirection.Up">
            <summary>
            Opens up.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ExpandDirection.Left">
            <summary>
            Opens left.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ExpandDirection.Right">
            <summary>
            Opens right.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Expander">
            <summary>
            A control with a header that has a collapsible content section.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.ContentTransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Expander.ContentTransition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.ExpandDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Expander.ExpandDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.IsExpandedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Expander.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.CollapsedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Expander.Collapsed"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.CollapsingEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Expander.Collapsing"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.ExpandedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Expander.Expanded"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Expander.ExpandingEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Expander.Expanding"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Expander"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Expander.ContentTransition">
            <summary>
            Gets or sets the transition used when expanding or collapsing the content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Expander.ExpandDirection">
            <summary>
            Gets or sets the direction in which the <see cref="T:Avalonia.Controls.Expander"/> opens.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Expander.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.Expander"/>
            content area is open and visible.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Expander.Collapsed">
            <summary>
            Occurs after the content area has closed and only the header is visible.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Expander.Collapsing">
            <summary>
            Occurs as the content area is closing.
            </summary>
            <remarks>
            The event args <see cref="P:Avalonia.Interactivity.CancelRoutedEventArgs.Cancel"/> property may be set to true to cancel the event
            and keep the control open (expanded).
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Expander.Expanded">
            <summary>
            Occurs after the <see cref="T:Avalonia.Controls.Expander"/> has opened to display both its header and content.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Expander.Expanding">
            <summary>
            Occurs as the content area is opening.
            </summary>
            <remarks>
            The event args <see cref="P:Avalonia.Interactivity.CancelRoutedEventArgs.Cancel"/> property may be set to true to cancel the event
            and keep the control closed (collapsed).
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Expander.OnCollapsed(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Expander.Collapsed"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.OnCollapsing(Avalonia.Interactivity.CancelRoutedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Expander.Collapsing"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.OnExpanded(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Expander.Expanded"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.OnExpanding(Avalonia.Interactivity.CancelRoutedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:Avalonia.Controls.Expander.Expanding"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.StartContentTransition">
            <summary>
            Starts the content transition (if set) and invokes the <see cref="E:Avalonia.Controls.Expander.Expanded"/>
            and <see cref="E:Avalonia.Controls.Expander.Collapsed"/> events when completed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Expander.UpdatePseudoClasses">
            <summary>
            Updates the visual state of the control by applying latest PseudoClasses.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Expander.OnCoerceIsExpanded(System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Expander.IsExpanded"/> property has to be coerced.
            </summary>
            <param name="value">The value to coerce.</param>
        </member>
        <member name="M:Avalonia.Controls.Expander.CoerceIsExpanded(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Coerces/validates the <see cref="P:Avalonia.Controls.Expander.IsExpanded"/> property value.
            </summary>
            <param name="instance">The <see cref="T:Avalonia.Controls.Expander"/> instance.</param>
            <param name="value">The value to coerce.</param>
            <returns>The coerced/validated value.</returns>
        </member>
        <member name="P:Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ExperimentalAcrylicBorder.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.ExperimentalAcrylicBorder.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's child.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="F:Avalonia.Controls.Flyout.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Flyout.Content"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Flyout.FlyoutPresenterClasses">
            <summary>
            Gets the Classes collection to apply to the FlyoutPresenter this Flyout is hosting
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Flyout.FlyoutPresenterThemeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Flyout.FlyoutPresenterTheme"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Flyout.FlyoutPresenterTheme">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Styling.ControlTheme"/> that is applied to the container element generated for the flyout presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Flyout.Content">
            <summary>
            Gets or sets the content to display in this flyout
            </summary>
        </member>
        <member name="F:Avalonia.Controls.FlyoutShowMode.Standard">
            <summary>
            Behavior is typical of a flyout shown reactively, like a context menu. The open flyout takes focus. For a CommandBarFlyout, it opens in it's expanded state.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.FlyoutShowMode.Transient">
            <summary>
            Behavior is typical of a flyout shown proactively. The open flyout does not take focus.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.FlyoutShowMode.TransientWithDismissOnPointerMoveAway">
            <summary>
            The flyout exhibits Transient behavior while the cursor is close to it, but is dismissed when the cursor moves away.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuFlyout.ItemsSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuFlyout.ItemsSource"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuFlyout.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuFlyout.ItemTemplate"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuFlyout.ItemContainerThemeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuFlyout.ItemContainerTheme"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuFlyout.FlyoutPresenterThemeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuFlyout.FlyoutPresenterTheme"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuFlyout.ItemsSource">
            <summary>
            Gets or sets the items of the MenuFlyout
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuFlyout.ItemTemplate">
            <summary>
            Gets or sets the template used for the items
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuFlyout.ItemContainerTheme">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Styling.ControlTheme"/> that is applied to the container element generated for each item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuFlyout.FlyoutPresenterTheme">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Styling.ControlTheme"/> that is applied to the container element generated for the flyout presenter.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerGenerator">
             <summary>
             Generates containers for an <see cref="T:Avalonia.Controls.ItemsControl"/>.
             </summary>
             <remarks>
             When creating a container for an item from a <see cref="T:Avalonia.Controls.VirtualizingPanel"/>, the following
             process should be followed:
            
             - <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> should first be called to
               determine whether the item needs a container. This method will return true if the item
               should be wrapped in a container control, or false if the item itself can be used as a
               container.
             - If <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> returns true then the
               <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.CreateContainer(System.Object,System.Int32,System.Object)"/> method should be called to create a new container, passing
               the recycle key returned from <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/>.
             - If the panel supports recycling and the recycle key is non-null then the recycle key
               should be recorded for the container (e.g. in an attached property or the realized
               container list).
             - <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.PrepareItemContainer(Avalonia.Controls.Control,System.Object,System.Int32)"/> method should be called for the
               container.
             - The container should then be added to the panel using 
               <see cref="M:Avalonia.Controls.VirtualizingPanel.AddInternalChild(Avalonia.Controls.Control)"/>
             - Finally, <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.ItemContainerPrepared(Avalonia.Controls.Control,System.Object,System.Int32)"/> should be called.
             
             NOTE: If <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> in the first step above
             returns false then the above steps should be carried out a single time: the first time the
             item is displayed. Otherwise the steps should be carried out each time a new container is
             realized for an item.
            
             When unrealizing a container, the following process should be followed:
             
             - If <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> for the item returned false
               then the item cannot be unrealized or recycled.
             - Otherwise, <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.ClearItemContainer(Avalonia.Controls.Control)"/> should be called for the container
             - If recycling is supported by the panel and the container then the container should be
               added to a recycle pool keyed on the recycle key returned from 
               <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/>. It is assumed that recycled
               containers will not be removed from the panel but instead hidden from view using
               e.g. `container.IsVisible = false`.
             - If recycling is not supported then the container should be removed from the panel.
            
             When recycling an unrealized container, the following process should be followed:
             
             - <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> should be called to determine
               whether the item needs a container, and if so, the recycle key.
             - A container should be taken from the recycle pool keyed on the returned recycle key.
             - The container should be made visible.
             - <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.PrepareItemContainer(Avalonia.Controls.Control,System.Object,System.Int32)"/> method should be called for the
               container.
             - <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.ItemContainerPrepared(Avalonia.Controls.Control,System.Object,System.Int32)"/> should be called.
            
             NOTE: Although this class is similar to that found in WPF/UWP, in Avalonia this class only
             concerns itself with generating and clearing item containers; it does not maintain a
             record of the currently realized containers, that responsibility is delegated to the
             items panel.
             </remarks>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)">
            <summary>
            Determines whether the specified item needs to be wrapped in a container control.
            </summary>
            <param name="item">The item to display.</param>
            <param name="index">The index of the item.</param>
            <param name="recycleKey">
            When the method returns, contains a key that can be used to locate a previously
            recycled container of the correct type, or null if the item cannot be recycled.
            </param>
            <returns>
            true if the item needs a container; otherwise false if the item can itself be used
            as a container.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.CreateContainer(System.Object,System.Int32,System.Object)">
            <summary>
            Creates a new container control.
            </summary>
            <param name="item">The item to display.</param>
            <param name="index">The index of the item.</param>
            <param name="recycleKey">
            The recycle key returned from <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/>
            </param>
            <returns>The newly created container control.</returns>
            <remarks>
            Before calling this method, <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/>
            should be called to determine whether the item itself should be used as a container.
            After calling this method, <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.PrepareItemContainer(Avalonia.Controls.Control,System.Object,System.Int32)"/>
            must be called to prepare the container to display the specified item.
            
            If the panel supports recycling then the returned recycle key should be stored alongside
            the container and when container becomes eligible for recycling the container should
            be placed in a recycle pool using this key. If the returned recycle key is null then
            the container cannot be recycled.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.PrepareItemContainer(Avalonia.Controls.Control,System.Object,System.Int32)">
            <summary>
            Prepares the specified element as the container for the corresponding item.
            </summary>
            <param name="container">The element that's used to display the specified item.</param>
            <param name="item">The item to display.</param>
            <param name="index">The index of the item to display.</param>
            <remarks>
            If <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> is false for an
            item, then this method must only be called a single time; otherwise this method must
            be called after the container is created, and each subsequent time the container is
            recycled to display a new item.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.ItemContainerPrepared(Avalonia.Controls.Control,System.Object,System.Int32)">
            <summary>
            Notifies the <see cref="T:Avalonia.Controls.ItemsControl"/> that a container has been fully prepared to
            display an item.
            </summary>
            <param name="container">The container control.</param>
            <param name="item">The item being displayed.</param>
            <param name="index">The index of the item being displayed.</param>
            <remarks>
            This method must be called when a container has been fully prepared and added
            to the logical and visual trees, but may be called before a layout pass has completed.
            It must be called regardless of the result of
            <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> but if that method returned
            false then must be called only a single time.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.ItemContainerIndexChanged(Avalonia.Controls.Control,System.Int32,System.Int32)">
            <summary>
            Called when the index for a container changes due to an insertion or removal in the
            items collection.
            </summary>
            <param name="container">The container whose index changed.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.ClearItemContainer(Avalonia.Controls.Control)">
            <summary>
            Undoes the effects of the <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.PrepareItemContainer(Avalonia.Controls.Control,System.Object,System.Int32)"/> method.
            </summary>
            <param name="container">The container control.</param>
            <remarks>
            This method must be called when a container is unrealized. The container must have
            already have been removed from the virtualizing panel's list of realized containers before
            this method is called. This method must not be called if
            <see cref="M:Avalonia.Controls.Generators.ItemContainerGenerator.NeedsContainer(System.Object,System.Int32,System.Object@)"/> returned false for the item.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Grid">
            <summary>
            Defines a flexible grid area that consists of columns and rows.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetColumn(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Helper for setting Column property on a Control.
            </summary>
            <param name="element">Control to set Column property on.</param>
            <param name="value">Column property value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetColumn(Avalonia.Controls.Control)">
            <summary>
            Helper for reading Column property from a Control.
            </summary>
            <param name="element">Control to read Column property from.</param>
            <returns>Column property value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetRow(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Helper for setting Row property on a Control.
            </summary>
            <param name="element">Control to set Row property on.</param>
            <param name="value">Row property value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetRow(Avalonia.Controls.Control)">
            <summary>
            Helper for reading Row property from a Control.
            </summary>
            <param name="element">Control to read Row property from.</param>
            <returns>Row property value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetColumnSpan(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Helper for setting ColumnSpan property on a Control.
            </summary>
            <param name="element">Control to set ColumnSpan property on.</param>
            <param name="value">ColumnSpan property value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetColumnSpan(Avalonia.Controls.Control)">
            <summary>
            Helper for reading ColumnSpan property from a Control.
            </summary>
            <param name="element">Control to read ColumnSpan property from.</param>
            <returns>ColumnSpan property value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetRowSpan(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Helper for setting RowSpan property on a Control.
            </summary>
            <param name="element">Control to set RowSpan property on.</param>
            <param name="value">RowSpan property value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetRowSpan(Avalonia.Controls.Control)">
            <summary>
            Helper for reading RowSpan property from a Control.
            </summary>
            <param name="element">Control to read RowSpan property from.</param>
            <returns>RowSpan property value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetIsSharedSizeScope(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Helper for setting IsSharedSizeScope property on a Control.
            </summary>
            <param name="element">Control to set IsSharedSizeScope property on.</param>
            <param name="value">IsSharedSizeScope property value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetIsSharedSizeScope(Avalonia.Controls.Control)">
            <summary>
            Helper for reading IsSharedSizeScope property from a Control.
            </summary>
            <param name="element">Control to read IsSharedSizeScope property from.</param>
            <returns>IsSharedSizeScope property value.</returns>
        </member>
        <member name="P:Avalonia.Controls.Grid.ShowGridLines">
            <summary>
            ShowGridLines property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.ColumnDefinitions">
            <summary>
            Returns a ColumnDefinitions of column definitions.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.RowDefinitions">
            <summary>
            Returns a RowDefinitions of row definitions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.MeasureOverride(Avalonia.Size)">
            <summary>
            Content measurement.
            </summary>
            <param name="constraint">Constraint</param>
            <returns>Desired size</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.ArrangeOverride(Avalonia.Size)">
            <summary>
            Content arrangement.
            </summary>
            <param name="arrangeSize">Arrange size</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.ChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            <see cref="M:Avalonia.Controls.Panel.ChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.Invalidate">
            <summary>
            Invalidates grid caches and makes the grid dirty for measure.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetFinalColumnDefinitionWidth(System.Int32)">
            <summary>
            Returns final width for a column.
            </summary>
            <remarks>
            Used from public ColumnDefinition ActualWidth. Calculates final width using offset data.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetFinalRowDefinitionHeight(System.Int32)">
            <summary>
            Returns final height for a row.
            </summary>
            <remarks>
            Used from public RowDefinition ActualHeight. Calculates final height using offset data.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Grid.MeasureOverrideInProgress">
            <summary>
            Convenience accessor to MeasureOverrideInProgress bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.ArrangeOverrideInProgress">
            <summary>
            Convenience accessor to ArrangeOverrideInProgress bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.ColumnDefinitionsDirty">
            <summary>
            Convenience accessor to ValidDefinitionsUStructure bit flag.
            </summary> 
        </member>
        <member name="P:Avalonia.Controls.Grid.RowDefinitionsDirty">
            <summary>
            Convenience accessor to ValidDefinitionsVStructure bit flag.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.ValidateCells">
            <summary>
            Lays out cells according to rows and columns, and creates lookup grids.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.ValidateCellsCore">
            <summary>
            ValidateCellsCore
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.ValidateDefinitionsUStructure">
            <summary>
            Initializes DefinitionsU member either to user supplied ColumnDefinitions collection
            or to a default single element collection. DefinitionsU gets trimmed to size.
            </summary>
            <remarks>
            This is one of two methods, where ColumnDefinitions and DefinitionsU are directly accessed.
            All the rest measure / arrange / render code must use DefinitionsU.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Grid.ValidateDefinitionsVStructure">
            <summary>
            Initializes DefinitionsV member either to user supplied RowDefinitions collection
            or to a default single element collection. DefinitionsV gets trimmed to size.
            </summary>
            <remarks>
            This is one of two methods, where RowDefinitions and DefinitionsV are directly accessed.
            All the rest measure / arrange / render code must use DefinitionsV.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Grid.ValidateDefinitionsLayout(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Boolean)">
            <summary>
            Validates layout time size type information on given array of definitions.
            Sets MinSize and MeasureSizes.
            </summary>
            <param name="definitions">Array of definitions to update.</param>
            <param name="treatStarAsAuto">if "true" then star definitions are treated as Auto.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.MeasureCellsGroup(System.Int32,Avalonia.Size,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Measures one group of cells.
            </summary>
            <param name="cellsHead">Head index of the cells chain.</param>
            <param name="referenceSize">Reference size for spanned cells
            calculations.</param>
            <param name="ignoreDesiredSizeU">When "true" cells' desired
            width is not registered in columns.</param>
            <param name="forceInfinityV">Passed through to MeasureCell.
            When "true" cells' desired height is not registered in rows.</param>
            <param name="hasDesiredSizeUChanged">When the method exits, indicates whether the desired size has changed.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.RegisterSpan(System.Collections.Hashtable@,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Helper method to register a span information for delayed processing.
            </summary>
            <param name="store">Reference to a hashtable object used as storage.</param>
            <param name="start">Span starting index.</param>
            <param name="count">Span count.</param>
            <param name="u"><c>true</c> if this is a column span. <c>false</c> if this is a row span.</param>
            <param name="value">Value to store. If an entry already exists the biggest value is stored.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.MeasureCell(System.Int32,System.Boolean)">
            <summary>
            Takes care of measuring a single cell.
            </summary>
            <param name="cell">Index of the cell to measure.</param>
            <param name="forceInfinityV">If "true" then cell is always
            calculated to infinite height.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetMeasureSizeForRange(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Int32,System.Int32)">
            <summary>
            Calculates one dimensional measure size for given definitions' range.
            </summary>
            <param name="definitions">Source array of definitions to read values from.</param>
            <param name="start">Starting index of the range.</param>
            <param name="count">Number of definitions included in the range.</param>
            <returns>Calculated measure size.</returns>
            <remarks>
            For "Auto" definitions MinWidth is used in place of PreferredSize.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetLengthTypeForRange(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Int32,System.Int32)">
            <summary>
            Accumulates length type information for given definition's range.
            </summary>
            <param name="definitions">Source array of definitions to read values from.</param>
            <param name="start">Starting index of the range.</param>
            <param name="count">Number of definitions included in the range.</param>
            <returns>Length type for given range.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.EnsureMinSizeInDefinitionRange(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Distributes min size back to definition array's range.
            </summary>
            <param name="start">Start of the range.</param>
            <param name="count">Number of items in the range.</param>
            <param name="requestedSize">Minimum size that should "fit" into the definitions range.</param>
            <param name="definitions">Definition array receiving distribution.</param>
            <param name="percentReferenceSize">Size used to resolve percentages.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.ResolveStar(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Double)">
            <summary>
            Resolves Star's for given array of definitions.
            </summary>
            <param name="definitions">Array of definitions to resolve stars.</param>
            <param name="availableSize">All available size.</param>
            <remarks>
            Must initialize LayoutSize for all Star entries in given array of definitions.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Grid.CalculateDesiredSize(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase})">
            <summary>
            Calculates desired size for given array of definitions.
            </summary>
            <param name="definitions">Array of definitions to use for calculations.</param>
            <returns>Desired size.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetFinalSize(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Double,System.Boolean)">
            <summary>
            Calculates and sets final size for all definitions in the given array.
            </summary>
            <param name="definitions">Array of definitions to process.</param>
            <param name="finalSize">Final size to lay out to.</param>
            <param name="columns">True if sizing column definitions, false for rows</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.Choose(System.Double,System.Double,System.Double)">
            <summary>
            Choose the ratio with maximum discrepancy from the current proportion.
            Returns:
                true    if proportion fails a min constraint but not a max, or
                            if the min constraint has higher discrepancy
                false   if proportion fails a max constraint but not a min, or
                            if the max constraint has higher discrepancy
                null    if proportion doesn't fail a min or max constraint
            The discrepancy is the ratio of the proportion to the max- or min-ratio.
            When both ratios hit the constraint,  minRatio &lt; proportion &lt; maxRatio,
            and the minRatio has higher discrepancy if
                    (proportion / minRatio) &gt; (maxRatio / proportion)
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.CompareRoundingErrors(System.Collections.Generic.KeyValuePair{System.Int32,System.Double},System.Collections.Generic.KeyValuePair{System.Int32,System.Double})">
            <summary>
            Sorts row/column indices by rounding error if layout rounding is applied.
            </summary>
            <param name="x">Index, rounding error pair</param>
            <param name="y">Index, rounding error pair</param>
            <returns>1 if x.Value > y.Value, 0 if equal, -1 otherwise</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetFinalSizeForRange(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},System.Int32,System.Int32)">
            <summary>
            Calculates final (aka arrange) size for given range.
            </summary>
            <param name="definitions">Array of definitions to process.</param>
            <param name="start">Start of the range.</param>
            <param name="count">Number of items in the range.</param>
            <returns>Final size.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetValid">
            <summary>
            Clears dirty state for the grid and its columns / rows
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.EnsureGridLinesRenderer">
            <summary>
            Synchronized ShowGridLines property with the state of the grid's visual collection
            by adding / removing GridLinesRenderer visual.
            Returns a reference to GridLinesRenderer visual or null.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetFlags(System.Boolean,Avalonia.Controls.Grid.Flags)">
            <summary>
            SetFlags is used to set or unset one or multiple
            flags on the object.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.CheckFlags(Avalonia.Controls.Grid.Flags)">
            <summary>
            CheckFlags returns <c>true</c> if all the flags in the
            given bitmask are set on the object.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.CompareNullRefs(System.Object,System.Object,System.Int32@)">
            <summary>
            Helper for Comparer methods.
            </summary>
            <returns>
            true if one or both of x and y are null, in which case result holds
            the relative sort order.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.Grid.DefinitionsU">
            <summary>
            Private version returning array of column definitions.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.DefinitionsV">
            <summary>
            Private version returning array of row definitions.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.TempDefinitions">
            <summary>
            Helper accessor to layout time array of definitions.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.DefinitionIndices">
            <summary>
            Helper accessor to definition indices.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.RoundingErrors">
            <summary>
            Helper accessor to rounding errors.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.PrivateCells">
            <summary>
            Private version returning array of cells.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.CellsStructureDirty">
            <summary>
            Convenience accessor to ValidCellsStructure bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.ListenToNotifications">
            <summary>
            Convenience accessor to ListenToNotifications bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.SizeToContentU">
            <summary>
            Convenience accessor to SizeToContentU bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.SizeToContentV">
            <summary>
            Convenience accessor to SizeToContentV bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.HasStarCellsU">
            <summary>
            Convenience accessor to HasStarCellsU bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.HasStarCellsV">
            <summary>
            Convenience accessor to HasStarCellsV bit flag.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.HasGroup3CellsInAutoRows">
            <summary>
            Convenience accessor to HasGroup3CellsInAutoRows bit flag.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.StarWeight(Avalonia.Controls.DefinitionBase,System.Double)">
            <summary>
            Returns *-weight, adjusted for scale computed during Phase 1
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.ExtendedData">
            <summary>
            Extended data instantiated on demand, when grid handles non-trivial case.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.Flags">
            <summary>
            Grid validity / property caches dirtiness flags
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ShowGridLinesProperty">
            <summary>
            ShowGridLines property. This property is used mostly
            for simplification of visual debugging. When it is set
            to <c>true</c> grid lines are drawn to visualize location
            of grid lines.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ColumnProperty">
            <summary>
            Column property. This is an attached property.
            Grid defines Column property, so that it can be set
            on any element treated as a cell. Column property
            specifies child's position with respect to columns.
            </summary>
            <remarks>
            <para> Columns are 0 - based. In order to appear in first column, element
            should have Column property set to <c>0</c>. </para>
            <para> Default value for the property is <c>0</c>. </para>
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Grid.RowProperty">
            <summary>
            Row property. This is an attached property.
            Grid defines Row, so that it can be set
            on any element treated as a cell. Row property
            specifies child's position with respect to rows.
            <remarks>
            <para> Rows are 0 - based. In order to appear in first row, element
            should have Row property set to <c>0</c>. </para>
            <para> Default value for the property is <c>0</c>. </para>
            </remarks>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ColumnSpanProperty">
            <summary>
            ColumnSpan property. This is an attached property.
            Grid defines ColumnSpan, so that it can be set
            on any element treated as a cell. ColumnSpan property
            specifies child's width with respect to columns.
            Example, ColumnSpan == 2 means that child will span across two columns.
            </summary>
            <remarks>
            Default value for the property is <c>1</c>.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Grid.RowSpanProperty">
            <summary>
            RowSpan property. This is an attached property.
            Grid defines RowSpan, so that it can be set
            on any element treated as a cell. RowSpan property
            specifies child's height with respect to row grid lines.
            Example, RowSpan == 3 means that child will span across three rows.
            </summary>
            <remarks>
            Default value for the property is <c>1</c>.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Grid.IsSharedSizeScopeProperty">
            <summary>
            IsSharedSizeScope property marks scoping element for shared size.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.LayoutTimeSizeType">
            <summary>
            LayoutTimeSizeType is used internally and reflects layout-time size type.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.CellCache">
            <summary>
            CellCache stored calculated values of
            1. attached cell positioning properties;
            2. size type;
            3. index of a next cell in the group;
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.SpanKey">
            <summary>
            Helper class for representing a key for a span in hashtable.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.SpanKey.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="start">Starting index of the span.</param>
            <param name="count">Span count.</param>
            <param name="u"><c>true</c> for columns; <c>false</c> for rows.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SpanKey.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.SpanKey.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.SpanKey.Start">
            <summary>
            Returns start index of the span.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.SpanKey.Count">
            <summary>
            Returns span count.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.SpanKey.U">
            <summary>
            Returns <c>true</c> if this is a column span.
            <c>false</c> if this is a row span.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.SpanPreferredDistributionOrderComparer">
            <summary>
            SpanPreferredDistributionOrderComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.SpanMaxDistributionOrderComparer">
            <summary>
            SpanMaxDistributionOrderComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.StarDistributionOrderIndexComparer">
            <summary>
            StarDistributionOrderIndexComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.DistributionOrderIndexComparer">
            <summary>
            DistributionOrderComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.RoundingErrorIndexComparer">
            <summary>
            RoundingErrorIndexComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.MinRatioComparer">
            <summary>
            MinRatioComparer.
            Sort by w/min (stored in MeasureSize), descending.
            We query the list from the back, i.e. in ascending order of w/min.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.MaxRatioComparer">
            <summary>
            MaxRatioComparer.
            Sort by w/max (stored in SizeCache), ascending.
            We query the list from the back, i.e. in descending order of w/max.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.StarWeightComparer">
            <summary>
            StarWeightComparer.
            Sort by *-weight (stored in MeasureSize), ascending.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.MinRatioIndexComparer">
            <summary>
            MinRatioIndexComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.MaxRatioIndexComparer">
            <summary>
            MaxRatioIndexComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.StarWeightIndexComparer">
            <summary>
            MaxRatioIndexComparer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid.GridLinesRenderer">
            <summary>
            Helper for rendering grid lines.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GridLinesRenderer.#cctor">
            <summary>
            Static initialization
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GridLinesRenderer.Render(Avalonia.Media.DrawingContext)">
            <summary>
            UpdateRenderBounds.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GridLinesRenderer.DrawGridLine(Avalonia.Media.DrawingContext,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw single hi-contrast line.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridUnitType">
            <summary>
            Defines the valid units for a <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Auto">
            <summary>
            The row or column is auto-sized to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Pixel">
            <summary>
            The row or column is sized in device independent pixels.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Star">
            <summary>
            The row or column is sized as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridLength">
            <summary>
            Holds the width or height of a <see cref="T:Avalonia.Controls.Grid"/>'s column and row definitions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.GridLength"/> struct.
            </summary>
            <param name="value">The size of the GridLength in device independent pixels.</param>
        </member>
        <member name="M:Avalonia.Controls.GridLength.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.GridLength"/> struct.
            </summary>
            <param name="value">The size of the GridLength.</param>
            <param name="type">The unit of the GridLength.</param>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Auto">
            <summary>
            Gets an instance of <see cref="T:Avalonia.Controls.GridLength"/> that indicates that a row or column should
            auto-size to fit its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Star">
            <summary>
            Gets an instance of <see cref="T:Avalonia.Controls.GridLength"/> that indicates that a row or column should
            fill its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.GridUnitType">
            <summary>
            Gets the unit of the <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsAbsolute">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Pixel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsAuto">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Auto.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsStar">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Star.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Value">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridLength.op_Equality(Avalonia.Controls.GridLength,Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for equality.
            </summary>
            <param name="a">The first GridLength.</param>
            <param name="b">The second GridLength.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.op_Inequality(Avalonia.Controls.GridLength,Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for inequality.
            </summary>
            <param name="gl1">The first GridLength.</param>
            <param name="gl2">The first GridLength.</param>
            <returns>True if the structures are unequal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Equals(System.Object)">
            <summary>
            Determines whether the <see cref="T:Avalonia.Controls.GridLength"/> is equal to the specified object.
            </summary>
            <param name="o">The object with which to test equality.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Equals(Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for equality.
            </summary>
            <param name="gridLength">The structure with which to test equality.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.GetHashCode">
            <summary>
            Gets a hash code for the GridLength.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.ToString">
            <summary>
            Gets a string representation of the <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Parse(System.String)">
            <summary>
            Parses a string to return a <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Controls.GridLength"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.ParseLengths(System.String)">
            <summary>
            Parses a string to return a collection of <see cref="T:Avalonia.Controls.GridLength"/>s.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Controls.GridLength"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.GridSplitter">
            <summary>
            Represents the control that redistributes space between columns or rows of a <see cref="T:Avalonia.Controls.Grid"/> control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.ResizeDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.ResizeDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.ResizeBehaviorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.ResizeBehavior"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.ShowsPreviewProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.ShowsPreview"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.KeyboardIncrementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.KeyboardIncrement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.DragIncrementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.DragIncrement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.PreviewContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.PreviewContent"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.ResizeDirection">
            <summary>
            Indicates whether the Splitter resizes the Columns, Rows, or Both.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.ResizeBehavior">
            <summary>
            Indicates which Columns or Rows the Splitter resizes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.ShowsPreview">
            <summary>
            Indicates whether to Preview the column resizing without updating layout.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.KeyboardIncrement">
            <summary>
            The Distance to move the splitter when pressing the keyboard arrow keys.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.DragIncrement">
            <summary>
            Restricts splitter to move a multiple of the specified units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.PreviewContent">
            <summary>
            Gets or sets content that will be shown when <see cref="P:Avalonia.Controls.GridSplitter.ShowsPreview"/> is enabled and user starts resize operation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.GetEffectiveResizeDirection">
            <summary>
            Converts BasedOnAlignment direction to Rows, Columns, or Both depending on its width/height.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.GetEffectiveResizeBehavior(Avalonia.Controls.GridResizeDirection)">
            <summary>
            Convert BasedOnAlignment to Next/Prev/Both depending on alignment and Direction.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.RemovePreviewAdorner">
            <summary>
            Removes preview adorner from the grid.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.InitializeData(System.Boolean)">
            <summary>
            Initialize the data needed for resizing.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.SetupDefinitionsToResize">
            <summary>
            Returns true if GridSplitter can resize rows/columns.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.SetupPreviewAdorner">
            <summary>
            Create the preview adorner and add it to the adorner layer.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.CancelResize">
            <summary>
            Cancels the resize operation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.IsStar(Avalonia.Controls.DefinitionBase)">
            <summary>
            Returns true if the row/column has a star length.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.GetGridDefinition(Avalonia.Controls.Grid,System.Int32,Avalonia.Controls.GridResizeDirection)">
            <summary>
            Gets Column or Row definition at index from grid based on resize direction.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.GetActualLength(Avalonia.Controls.DefinitionBase)">
            <summary>
            Retrieves the ActualWidth or ActualHeight of the definition depending on its type Column or Row.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.SetDefinitionLength(Avalonia.Controls.DefinitionBase,Avalonia.Controls.GridLength)">
            <summary>
            Gets Column or Row definition at index from grid based on resize direction.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.GetDeltaConstraints(System.Double@,System.Double@)">
            <summary>
            Get the minimum and maximum Delta can be given definition constraints (MinWidth/MaxWidth).
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.SetLengths(System.Double,System.Double)">
            <summary>
            Sets the length of definition1 and definition2.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.MoveSplitter(System.Double,System.Double)">
            <summary>
            Move the splitter by the given Delta's in the horizontal and vertical directions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.KeyboardMoveSplitter(System.Double,System.Double)">
            <summary>
            Move the splitter using the Keyboard (Don't show preview).
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridSplitter.PreviewAdorner">
            <summary>
            This adorner draws the preview for the <see cref="T:Avalonia.Controls.GridSplitter"/>.
            It also positions the adorner.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.PreviewAdorner.OffsetX">
            <summary>
            The Preview's Offset in the X direction from the GridSplitter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.PreviewAdorner.OffsetY">
            <summary>
            The Preview's Offset in the Y direction from the GridSplitter.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridSplitter.SplitBehavior">
            <summary>
            <see cref="T:Avalonia.Controls.GridSplitter"/> has special Behavior when columns are fixed.
            If the left column is fixed, splitter will only resize that column.
            Else if the right column is fixed, splitter will only resize the right column.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.SplitBehavior.Split">
            <summary>
            Both columns/rows are star lengths.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.SplitBehavior.Resize1">
            <summary>
            Resize 1 only.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.SplitBehavior.Resize2">
            <summary>
            Resize 2 only.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridSplitter.ResizeData">
            <summary>
            Stores data during the resizing operation.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridResizeDirection">
            <summary>
            Enum to indicate whether <see cref="T:Avalonia.Controls.GridSplitter"/> resizes Columns or Rows.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeDirection.Auto">
            <summary>
            Determines whether to resize rows or columns based on its Alignment and 
            width compared to height.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeDirection.Columns">
            <summary>
            Resize columns when dragging Splitter.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeDirection.Rows">
            <summary>
            Resize rows when dragging Splitter.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridResizeBehavior">
            <summary>
            Enum to indicate what Columns or Rows the <see cref="T:Avalonia.Controls.GridSplitter"/> resizes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeBehavior.BasedOnAlignment">
            <summary>
            Determine which columns or rows to resize based on its Alignment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeBehavior.CurrentAndNext">
            <summary>
            Resize the current and next Columns or Rows.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeBehavior.PreviousAndCurrent">
            <summary>
            Resize the previous and current Columns or Rows.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridResizeBehavior.PreviousAndNext">
            <summary>
            Resize the previous and next Columns or Rows.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IContentControl">
            <summary>
            Defines a control that displays <see cref="P:Avalonia.Controls.IContentControl.Content"/> according to a
            <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.Content">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IGlobalDataTemplates">
            <summary>
            Defines the application-global data templates.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IHeadered">
            <summary>
            Defines a headered object.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IHeadered.Header">
            <summary>
            Gets or set the header.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Image">
            <summary>
            Displays a <see cref="T:Avalonia.Media.Imaging.Bitmap"/> image.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.SourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.Source"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.Stretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.StretchDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.StretchDirection"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.Source">
            <summary>
            Gets or sets the image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.Stretch">
            <summary>
            Gets or sets a value controlling how the image will be stretched.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.StretchDirection">
            <summary>
            Gets or sets a value controlling in what direction the image will be stretched.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.BypassFlowDirectionPolicies">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Image.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Image.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Image.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.IMenu">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.Menu"/> or <see cref="T:Avalonia.Controls.ContextMenu"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenu.InteractionHandler">
            <summary>
            Gets the menu interaction handler.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenu.IsOpen">
            <summary>
            Gets a value indicating whether the menu is open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenu.VisualRoot">
            <summary>
            Gets the root of the visual tree, if the control is attached to a visual tree.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IMenuElement">
            <summary>
            Represents an <see cref="T:Avalonia.Controls.IMenu"/> or <see cref="T:Avalonia.Controls.IMenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuElement.SelectedItem">
            <summary>
            Gets or sets the currently selected submenu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuElement.SubItems">
            <summary>
            Gets the submenu items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuElement.Open">
            <summary>
            Opens the menu or menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuElement.Close">
            <summary>
            Closes the menu or menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuElement.MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <summary>
            Moves the submenu selection in the specified direction.
            </summary>
            <param name="direction">The direction.</param>
            <param name="wrap">Whether to wrap after the first or last item.</param>
            <returns>True if the selection was moved; otherwise false.</returns>
        </member>
        <member name="T:Avalonia.Controls.IMenuItem">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.HasSubMenu">
            <summary>
            Gets or sets a value that indicates whether the item has a submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.IsPointerOverSubMenu">
            <summary>
            Gets a value indicating whether the mouse is currently over the menu item's submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.IsSubMenuOpen">
            <summary>
            Gets or sets a value that indicates whether the submenu of the <see cref="T:Avalonia.Controls.MenuItem"/> is
            open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.StaysOpenOnClick">
            <summary>
            Gets or sets a value that indicates the submenu that this <see cref="T:Avalonia.Controls.MenuItem"/> is
            within should not close when this item is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.IsTopLevel">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> is a top-level main menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.Parent">
            <summary>
            Gets the parent <see cref="T:Avalonia.Controls.IMenuElement"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuItem.RaiseClick">
            <summary>
            Raises a click event on the menu item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IScrollAnchorProvider">
            <summary>
            Specifies a contract for a scrolling control that supports scroll anchoring.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IScrollAnchorProvider.CurrentAnchor">
            <summary>
            The currently chosen anchor element to use for scroll anchoring.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IScrollAnchorProvider.RegisterAnchorCandidate(Avalonia.Controls.Control)">
            <summary>
            Registers a control as a potential scroll anchor candidate.
            </summary>
            <param name="element">
            A control within the subtree of the <see cref="T:Avalonia.Controls.IScrollAnchorProvider"/>.
            </param>
        </member>
        <member name="M:Avalonia.Controls.IScrollAnchorProvider.UnregisterAnchorCandidate(Avalonia.Controls.Control)">
            <summary>
            Unregisters a control as a potential scroll anchor candidate.
            </summary>
            <param name="element">
            A control within the subtree of the <see cref="T:Avalonia.Controls.IScrollAnchorProvider"/>.
            </param>
        </member>
        <member name="T:Avalonia.Controls.ISelectable">
            <summary>
            An interface that is implemented by objects that expose their selection state via a
            boolean <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ISelectable.IsSelected">
            <summary>
            Gets or sets the selected state of the object.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ItemCollection">
            <summary>
            Holds the list of items that constitute the content of an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
            <param name="value">The item to add to the collection.</param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that
            the item was not inserted into the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection is in ItemsSource mode.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.ItemCollection.Clear">
            <summary>
            Clears the collection and releases the references on all items currently in the
            collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection is in ItemsSource mode.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.ItemCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which to insert the item.</param>
            <param name="value">The item to insert.</param>
            <exception cref="T:System.InvalidOperationException">
            The collection is in ItemsSource mode.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.ItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection or view.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.InvalidOperationException">
            The collection is in ItemsSource mode.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.ItemCollection.Remove(System.Object)">
            <summary>
            Removes the specified item reference from the collection or view.
            </summary>
            <param name="value">The object to remove.</param>
            <returns>True if the item was removed; otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection is in ItemsSource mode.
            </exception>
        </member>
        <member name="T:Avalonia.Controls.ItemsControl">
            <summary>
            Displays a collection of items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemContainerThemeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerTheme"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemCountProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemCount"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemsPanelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemsSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.DisplayMemberBindingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.DisplayMemberBinding" /> property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.DisplayMemberBinding">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Data.IBinding"/> to use for binding to the display member of each item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/> for the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.Items">
             <summary>
             Gets the items to display.
             </summary>
             <remarks>
             You use either the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> or the <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> property to
             specify the collection that should be used to generate the content of your
             <see cref="T:Avalonia.Controls.ItemsControl"/>. When the <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> property is set, the
             <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection is made read-only and fixed-size.
            
             When <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> is in use, setting the <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/>
             property to null removes the collection and restores usage to <see cref="P:Avalonia.Controls.ItemsControl.Items"/>,
             which will be an empty <see cref="T:Avalonia.Controls.ItemCollection"/>.
             </remarks>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemContainerTheme">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Styling.ControlTheme"/> that is applied to the container element generated for each item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemCount">
            <summary>
            Gets the number of items being displayed by the <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemsPanel">
            <summary>
            Gets or sets the panel used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemsSource">
             <summary>
             Gets or sets a collection used to generate the content of the <see cref="T:Avalonia.Controls.ItemsControl"/>.
             </summary>
             <remarks>
             A common scenario is to use an <see cref="T:Avalonia.Controls.ItemsControl"/> such as a 
             <see cref="T:Avalonia.Controls.ListBox"/> to display a data collection, or to bind an
             <see cref="T:Avalonia.Controls.ItemsControl"/> to a collection object. To bind an <see cref="T:Avalonia.Controls.ItemsControl"/>
             to a collection object, use the <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> property.
             
             When the <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> property is set, the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection
             is made read-only and fixed-size.
            
             When <see cref="P:Avalonia.Controls.ItemsControl.ItemsSource"/> is in use, setting the property to null removes the
             collection and restores usage to <see cref="P:Avalonia.Controls.ItemsControl.Items"/>, which will be an empty 
             <see cref="T:Avalonia.Controls.ItemCollection"/>.
             </remarks>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.Presenter">
            <summary>
            Gets the items presenter control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemsPanelRoot">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Panel"/> specified by <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemsView">
            <summary>
            Gets a read-only view of the items in the <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ItemsControl.ContainerPrepared">
            <summary>
            Occurs each time a container is prepared for use.
            </summary>
            <remarks>
            The prepared element might be newly created or an existing container that is being re-
            used.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.ItemsControl.ContainerIndexChanged">
            <summary>
            Occurs for each realized container when the index for the item it represents has changed.
            </summary>
            <remarks>
            This event is raised for each realized container where the index for the item it
            represents has changed. For example, when another item is added or removed in the data
            source, the index for items that come after in the ordering will be impacted.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.ItemsControl.ContainerClearing">
            <summary>
            Occurs each time a container is cleared.
            </summary>
            <remarks>
            This event is raised immediately each time an container is cleared, such as when it
            falls outside the range of realized items or the corresponding item is removed.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.DefaultRecycleKey">
            <summary>
            Gets a default recycle key that can be used when an <see cref="T:Avalonia.Controls.ItemsControl"/> supports
            a single container type.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the container for the item at the specified index.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>
            The container for the item at the specified index within the item collection, if the
            item has a container; otherwise, null.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ContainerFromItem(System.Object)">
            <summary>
            Returns the container corresponding to the specified item.
            </summary>
            <param name="item">The item to retrieve the container for.</param>
            <returns>
            A container that corresponds to the specified item, if the item has a container and
            exists in the collection; otherwise, null.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.IndexFromContainer(Avalonia.Controls.Control)">
            <summary>
            Returns the index to the item that has the specified, generated container.
            </summary>
            <param name="container">The generated container to retrieve the item index for.</param>
            <returns>
            The index to the item that corresponds to the specified generated container, or -1 if 
            <paramref name="container"/> is not found.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemFromContainer(Avalonia.Controls.Control)">
            <summary>
            Returns the item that corresponds to the specified, generated container.
            </summary>
            <param name="container">The control that corresponds to the item to be returned.</param>
            <returns>
            The contained item, or the container if it does not contain an item.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.GetRealizedContainers">
            <summary>
            Gets the currently realized containers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemsControlFromItemContaner(Avalonia.Controls.Control)">
            <summary>
            Returns the <see cref="T:Avalonia.Controls.ItemsControl"/> that owns the specified container control.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The owning <see cref="T:Avalonia.Controls.ItemsControl"/> or null if the control is not an items container.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.CreateContainerForItemOverride(System.Object,System.Int32,System.Object)">
            <summary>
            Creates or a container that can be used to display an item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.PrepareContainerForItemOverride(Avalonia.Controls.Control,System.Object,System.Int32)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="container">The element that's used to display the specified item.</param>
            <param name="item">The item to display.</param>
            <param name="index">The index of the item to display.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ContainerForItemPreparedOverride(Avalonia.Controls.Control,System.Object,System.Int32)">
            <summary>
            Called when a container has been fully prepared to display an item.
            </summary>
            <param name="container">The container control.</param>
            <param name="item">The item being displayed.</param>
            <param name="index">The index of the item being displayed.</param>
            <remarks>
            This method will be called when a container has been fully prepared and added to the
            logical and visual trees, but may be called before a layout pass has completed. It is
            called immediately before the <see cref="E:Avalonia.Controls.ItemsControl.ContainerPrepared"/> event is raised.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ContainerIndexChangedOverride(Avalonia.Controls.Control,System.Int32,System.Int32)">
            <summary>
            Called when the index for a container changes due to an insertion or removal in the
            items collection.
            </summary>
            <param name="container">The container whose index changed.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ClearContainerForItemOverride(Avalonia.Controls.Control)">
            <summary>
            Undoes the effects of the <see cref="M:Avalonia.Controls.ItemsControl.PrepareContainerForItemOverride(Avalonia.Controls.Control,System.Object,System.Int32)"/> method.
            </summary>
            <param name="container">The container element.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.NeedsContainerOverride(System.Object,System.Int32,System.Object@)">
            <summary>
            Determines whether the specified item can be its own container.
            </summary>
            <param name="item">The item to check.</param>
            <param name="index">The index of the item.</param>
            <param name="recycleKey">
            When the method returns, contains a key that can be used to locate a previously
            recycled container of the correct type, or null if the item cannot be recycled.
            If the item is its own container then by definition it cannot be recycled, so
            <paramref name="recycleKey"/> shoud be set to null.
            </param>
            <returns>
            true if the item needs a container; otherwise false if the item can itself be used
            as a container.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.NeedsContainer``1(System.Object,System.Object@)">
            <summary>
            A default implementation of <see cref="M:Avalonia.Controls.ItemsControl.NeedsContainerOverride(System.Object,System.Int32,System.Object@)"/>
            that returns true and sets the recycle key to <see cref="P:Avalonia.Controls.ItemsControl.DefaultRecycleKey"/> if the item
            is not a <typeparamref name="T"/> .
            </summary>
            <typeparam name="T">The container type.</typeparam>
            <param name="item">The item.</param>
            <param name="recycleKey">
            When the method returns, contains <see cref="P:Avalonia.Controls.ItemsControl.DefaultRecycleKey"/> if
            <paramref name="item"/> is not of type <typeparamref name="T"/>; otherwise null.
            </param>
            <returns>
            true if <paramref name="item"/> is of type <typeparamref name="T"/>; otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles directional navigation within the <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
            <param name="e">The key events.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.RefreshContainers">
            <summary>
            Refreshes the containers displayed by the control.
            </summary>
            <remarks>
            Causes all containers to be unrealized and re-realized.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnItemsViewCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event is
            raised on <see cref="P:Avalonia.Controls.ItemsControl.ItemsView"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.CreateItemContainerGenerator">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>
            </summary>
            <remarks>
            This method is only present for backwards compatibility with 0.10.x in order for
            TreeView to be able to create a <see cref="T:Avalonia.Controls.Generators.TreeItemContainerGenerator"/>. Can be
            removed in 12.0.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.RegisterItemsPresenter(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Called by <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> to register with the <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
            <param name="presenter">The items presenter.</param>
            <remarks>
            ItemsPresenters can be within nested templates or in popups and so are not necessarily
            created immediately when the ItemsControl control's template is instantiated. Instead
            they register themselves using this method.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.ItemsSourceView">
            <summary>
            Represents a standardized view of the supported interactions between an items collection
            and an items control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView.Empty">
            <summary>
            Gets an empty <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ItemsSourceView class for the specified data source.
            </summary>
            <param name="source">The data source.</param>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView.Source">
            <summary>
            Gets the source collection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView.Item(System.Int32)">
            <summary>
            Retrieves the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView.HasKeyIndexMapping">
            <summary>
            Not implemented in Avalonia, preserved here for ItemsRepeater's usage.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ItemsSourceView.CollectionChanged">
            <summary>
            Occurs when the collection has changed to indicate the reason for the change and which items changed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ItemsSourceView.PreCollectionChanged">
            <summary>
            Occurs when a collection has finished changing and all <see cref="E:Avalonia.Controls.ItemsSourceView.CollectionChanged"/>
            event handlers have been notified.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ItemsSourceView.PostCollectionChanged">
            <summary>
            Occurs when a collection has finished changing and all <see cref="E:Avalonia.Controls.ItemsSourceView.CollectionChanged"/>
            event handlers have been notified.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView.GetAt(System.Int32)">
            <summary>
            Retrieves the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView.GetOrCreate(System.Collections.IEnumerable)">
            <summary>
            Gets or creates an <see cref="T:Avalonia.Controls.ItemsSourceView"/> for the specified enumerable.
            </summary>
            <param name="items">The enumerable.</param>
            <remarks>
            This method handles the following three cases:
            - If <paramref name="items"/> is null, returns <see cref="P:Avalonia.Controls.ItemsSourceView.Empty"/>
            - If <paramref name="items"/> is an <see cref="T:Avalonia.Controls.ItemsSourceView"/> returns the existing
              <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            - Otherwise creates a new <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView.GetOrCreate``1(System.Collections.IEnumerable)">
            <summary>
            Gets or creates an <see cref="T:Avalonia.Controls.ItemsSourceView`1"/> for the specified enumerable.
            </summary>
            <param name="items">The enumerable.</param>
            <remarks>
            This method handles the following three cases:
            - If <paramref name="items"/> is null, returns <see cref="P:Avalonia.Controls.ItemsSourceView.Empty"/>
            - If <paramref name="items"/> is an <see cref="T:Avalonia.Controls.ItemsSourceView"/> returns the existing
              <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            - Otherwise creates a new <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView.GetOrCreate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets or creates an <see cref="T:Avalonia.Controls.ItemsSourceView`1"/> for the specified enumerable.
            </summary>
            <param name="items">The enumerable.</param>
            <remarks>
            This method handles the following three cases:
            - If <paramref name="items"/> is null, returns <see cref="P:Avalonia.Controls.ItemsSourceView.Empty"/>
            - If <paramref name="items"/> is an <see cref="T:Avalonia.Controls.ItemsSourceView"/> returns the existing
              <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            - Otherwise creates a new <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView.KeyFromIndex(System.Int32)">
            <summary>
            Not implemented in Avalonia, preserved here for ItemsRepeater's usage.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView`1.Empty">
            <summary>
             Gets an empty <see cref="T:Avalonia.Controls.ItemsSourceView"/>
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the ItemsSourceView class for the specified data source.
            </summary>
            <param name="source">The data source.</param>
        </member>
        <member name="P:Avalonia.Controls.ItemsSourceView`1.Item(System.Int32)">
            <summary>
            Retrieves the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsSourceView`1.GetAt(System.Int32)">
            <summary>
            Retrieves the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="T:Avalonia.Controls.Label">
            <summary>
            Label control. Focuses <see cref="P:Avalonia.Controls.Label.Target"/> on pointer click or access key press (Alt + accessKey)
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Label.TargetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Label.Target"/> Direct property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Label.Target">
            <summary>
            Label focus Target
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Label.#ctor">
            <summary>
            Initializes instance of <see cref="T:Avalonia.Controls.Label"/> control
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Label.LabelActivated(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Method which focuses <see cref="P:Avalonia.Controls.Label.Target"/> input element
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Label.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Handler of <see cref="E:Avalonia.Input.IInputElement.PointerPressed"/> event
            </summary>
            <param name="e">Event Arguments</param>
        </member>
        <member name="T:Avalonia.Controls.LayoutTransformControl">
            <summary>
            Control that implements support for transformations as if applied by LayoutTransform.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.LayoutTransformControl.LayoutTransform">
            <summary>
            Gets or sets a graphics transformation that should apply to this element when layout is performed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.LayoutTransformControl.UseRenderTransform">
            <summary>
            Utilize the <see cref="F:Avalonia.Visual.RenderTransformProperty"/> for layout transforms.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ArrangeOverride(Avalonia.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.MeasureOverride(Avalonia.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to TransformRoot.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.IsSizeSmaller(Avalonia.Size,Avalonia.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.RoundMatrix(Avalonia.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformerControl content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform).
            Should be used to notify the LayoutTransformer control that some aspect
            of its Transform property has changed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ComputeLargestTransformedSize(Avalonia.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="T:Avalonia.Controls.ListBox">
            <summary>
            An <see cref="T:Avalonia.Controls.ItemsControl"/> in which individual items can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.ScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.Scroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.Selection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.SelectionMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBox.Scroll">
            <summary>
            Gets the scroll information for the <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBox.SelectedItems">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ListBox.Selection">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ListBox.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
            <remarks>
            Note that the selection mode only applies to selections made via user interaction.
            Multiple selections can be made programmatically regardless of the value of this property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ListBox.SelectAll">
            <summary>
            Selects all items in the <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBox.UnselectAll">
            <summary>
            Deselects all items in the <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ListBoxItem">
            <summary>
            A selectable item in a <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBoxItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBoxItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBoxItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ListBoxItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBoxItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)">
            <summary>
             Constructs the MaskedTextBox with the specified MaskedTextProvider object.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.AsciiOnly">
            <summary>
            Gets or sets a value indicating if the masked text box is restricted to accept only ASCII characters.
            Default value is false.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.Culture">
            <summary>
            Gets or sets the culture information associated with the masked text box.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.HidePromptOnLeave">
            <summary>
            Gets or sets a value indicating if the prompt character is hidden when the masked text box loses focus.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.Mask">
            <summary>
            Gets or sets the mask to apply to the TextBox.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.MaskCompleted">
            <summary>
             Specifies whether the test string required input positions, as specified by the mask, have
             all been assigned.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.MaskFull">
            <summary>
             Specifies whether all inputs (required and optional) have been provided into the mask successfully.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.MaskProvider">
            <summary>
            Gets the MaskTextProvider for the specified Mask.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.PromptChar">
            <summary>
            Gets or sets the character used to represent the absence of user input in MaskedTextBox.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.ResetOnPrompt">
            <summary>
            Gets or sets a value indicating if selected characters should be reset when the prompt character is pressed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MaskedTextBox.ResetOnSpace">
            <summary>
            Gets or sets a value indicating if selected characters should be reset when the space character is pressed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MaskedTextBox.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.MaskedTextBox.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.MaskedTextBox.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.MaskedTextBox.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.MaskedTextBox.OnTextInput(Avalonia.Input.TextInputEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Menu">
            <summary>
            A top-level menu control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Menu"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.#ctor(Avalonia.Controls.Platform.IMenuInteractionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Menu"/> class.
            </summary>
            <param name="interactionHandler">The menu interaction handler.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.Close">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.Open">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.MenuBase">
            <summary>
            Base class for menu controls.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuBase.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuBase.IsOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuBase.OpenedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuBase.Opened"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuBase.ClosedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuBase.Closed"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.MenuBase"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.#ctor(Avalonia.Controls.Platform.IMenuInteractionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.MenuBase"/> class.
            </summary>
            <param name="interactionHandler">The menu interaction handler.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.MenuBase"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.IsOpen">
            <summary>
            Gets a value indicating whether the menu is open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenu#InteractionHandler">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenuElement#SelectedItem">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenuElement#SubItems">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.InteractionHandler">
            <summary>
            Gets the interaction handler for the menu.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuBase.Opened">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.Menu"/> is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuBase.Closed">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.Menu"/> is closed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.Close">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.Open">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenuElement#MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu opens somewhere in the menu.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.MenuItem">
            <summary>
            A menu item control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.HotKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.HotKey"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.Icon"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.InputGestureProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.InputGesture"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IsSubMenuOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.StaysOpenOnClickProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.StaysOpenOnClick"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.Click"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.PointerEnteredItemEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.PointerEnteredItem"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.PointerExitedItemEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.PointerExitedItem"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.SubmenuOpenedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.SubmenuOpened"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.MenuItem"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.Click">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.MenuItem"/> without a submenu is clicked.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.PointerEnteredItem">
            <summary>
            Occurs when the pointer enters a menu item.
            </summary>
            <remarks>
            A bubbling version of the <see cref="E:Avalonia.Input.InputElement.PointerEntered"/> event for menu items.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.PointerExitedItem">
            <summary>
            Raised when the pointer leaves a menu item.
            </summary>
            <remarks>
            A bubbling version of the <see cref="E:Avalonia.Input.InputElement.PointerExited"/> event for menu items.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.SubmenuOpened">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.MenuItem"/>'s submenu is opened.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Command">
            <summary>
            Gets or sets the command associated with the menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.HotKey">
            <summary>
            Gets or sets an <see cref="T:Avalonia.Input.KeyGesture"/> associated with this control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property of a
            <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.InputGesture">
            <summary>
            Gets or sets the input gesture that will be displayed in the menu item.
            </summary>
            <remarks>
            Setting this property does not cause the input gesture to be handled by the menu item,
            it simply displays the gesture text in the menu.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.MenuItem"/> is currently selected.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsSubMenuOpen">
            <summary>
            Gets or sets a value that indicates whether the submenu of the <see cref="T:Avalonia.Controls.MenuItem"/> is
            open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.StaysOpenOnClick">
            <summary>
            Gets or sets a value that indicates the submenu that this <see cref="T:Avalonia.Controls.MenuItem"/> is
            within should not close when this item is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.HasSubMenu">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> has a submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsTopLevel">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> is a top-level main menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuItem#IsPointerOverSubMenu">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuItem#Parent">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuElement#MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuElement#SelectedItem">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuElement#SubItems">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Open">
            <summary>
            Opens the submenu.
            </summary>
            <remarks>
            This has the same effect as setting <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> to true.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Close">
            <summary>
            Closes the submenu.
            </summary>
            <remarks>
            This has the same effect as setting <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> to false.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuItem#RaiseClick">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnClick(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:Avalonia.Controls.MenuItem"/> is clicked.
            </summary>
            <param name="e">The click event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerEntered(Avalonia.Input.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerExited(Avalonia.Input.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu is opened on this MenuItem or a child MenuItem.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CloseSubmenus">
            <summary>
            Closes all submenus of the menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CommandChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CommandParameterChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.CommandParameter"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event fires.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.TryUpdateCanExecute">
            <summary>
            Tries to evaluate CanExecute value of a Command if menu is opened
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.HeaderChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.IconChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.Icon"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.IsSelectedChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.IsSelected"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.SubMenuOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.PopupOpened(System.Object,System.EventArgs)">
            <summary>
            Called when the submenu's <see cref="T:Avalonia.Controls.Primitives.Popup"/> is opened.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.PopupClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the submenu's <see cref="T:Avalonia.Controls.Primitives.Popup"/> is closed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.MenuItem.DependencyResolver">
            <summary>
            A dependency resolver which returns a <see cref="T:Avalonia.Controls.MenuItemAccessKeyHandler"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.DependencyResolver.Instance">
            <summary>
            Gets the default instance of <see cref="T:Avalonia.Controls.MenuItem.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.DependencyResolver.GetService(System.Type)">
            <summary>
            Gets a service of the specified type.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>A service of the requested type.</returns>
        </member>
        <member name="T:Avalonia.Controls.MenuItemAccessKeyHandler">
            <summary>
            Handles access keys within a <see cref="T:Avalonia.Controls.MenuItem"/>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItemAccessKeyHandler._registered">
            <summary>
            The registered access keys.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItemAccessKeyHandler._owner">
            <summary>
            The window to which the handler belongs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItemAccessKeyHandler.MainMenu">
            <summary>
            Gets or sets the window's main menu.
            </summary>
            <remarks>
            This property is ignored as a menu item cannot have a main menu.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the access key handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.Register(System.Char,Avalonia.Input.IInputElement)">
            <summary>
            Registers an input element to be associated with an access key.
            </summary>
            <param name="accessKey">The access key.</param>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.Unregister(Avalonia.Input.IInputElement)">
            <summary>
            Unregisters the access keys associated with the input element.
            </summary>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.OnTextInput(System.Object,Avalonia.Input.TextInputEventArgs)">
            <summary>
            Handles a key being pressed in the menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Mixins.PressedMixin">
            <summary>
            Adds pressed functionality to control classes.
            
            Adds the ':pressed' class when the item is pressed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Mixins.PressedMixin.Attach``1">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Mixins.PressedMixin"/> class.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
        </member>
        <member name="T:Avalonia.Controls.Mixins.SelectableMixin">
            <summary>
            Adds selectable functionality to control classes.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> adds behavior to a control which can be
            selected. It adds the following behavior:
            </para>
            <list type="bullet">
            <item>
            Raises an <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/> when the value if
            the IsSelected property changes.
            </item>
            <item>
            Adds a 'selected' class to selected controls.
            </item>
            <item>
            Requests that the control is scrolled into view when focused.
            </item>
            </list>
            <para>
            Mixins apply themselves to classes and not instances, and as such should be created in
            a static constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Mixins.SelectableMixin.Attach``1(Avalonia.AvaloniaProperty{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> class.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="isSelected">The IsSelected property.</param>
        </member>
        <member name="M:Avalonia.Controls.NativeControlHost.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NativeControlHost.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="E:Avalonia.Controls.NativeMenu.NeedsUpdate">
            <summary>
            Raised when the menu requests an update.
            </summary>
            <remarks>
            Use this event to add, remove or modify menu items before a menu is
            shown or a hotkey is pressed.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.NativeMenu.Opening">
            <summary>
            Raised before the menu is opened.
            </summary>
            <remarks>
            Do not update the menu in this event; use <see cref="E:Avalonia.Controls.NativeMenu.NeedsUpdate"/>.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.NativeMenu.Closed">
            <summary>
            Raised after the menu is closed.
            </summary>
            <remarks>
            Do not update the menu in this event; use <see cref="E:Avalonia.Controls.NativeMenu.NeedsUpdate"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.NativeMenuItem.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NativeMenuItem.CommandParameter"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NativeMenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Avalonia.Controls.NativeMenuItem.Command"/> property of a
            <see cref="T:Avalonia.Controls.NativeMenuItem"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.NativeMenuItem.Click">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.NativeMenuItem"/> is clicked.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Notifications.IManagedNotificationManager">
            <summary>
            Represents a notification manager that can show arbitrary content.
            Managed notification managers can show any content.
            </summary>
            <remarks>
            Because notification managers of this type are implemented purely in managed code, they
            can display arbitrary content, as opposed to notification managers which display notifications
            using the host operating system's notification mechanism.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Notifications.IManagedNotificationManager.Show(System.Object)">
            <summary>
            Shows a notification.
            </summary>
            <param name="content">The content to be displayed.</param>
        </member>
        <member name="T:Avalonia.Controls.Notifications.INotification">
            <summary>
            Represents a notification that can be shown in a window or by the host operating system.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.INotification.Title">
            <summary>
            Gets the Title of the notification.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.INotification.Message">
            <summary>
            Gets the notification message.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.INotification.Type">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Notifications.NotificationType"/> of the notification.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.INotification.Expiration">
            <summary>
            Gets the expiration time of the notification after which it will automatically close.
            If the value is <see cref="F:System.TimeSpan.Zero"/> then the notification will remain open until the user closes it.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.INotification.OnClick">
            <summary>
            Gets an Action to be run when the notification is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.INotification.OnClose">
            <summary>
            Gets an Action to be run when the notification is closed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Notifications.INotificationManager">
            <summary>
            Represents a notification manager that can be used to show notifications in a window or using
            the host operating system.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Notifications.INotificationManager.Show(Avalonia.Controls.Notifications.INotification)">
            <summary>
            Show a notification.
            </summary>
            <param name="notification">The notification to be displayed.</param>
        </member>
        <member name="T:Avalonia.Controls.Notifications.Notification">
            <summary>
            A notification that can be shown in a window or by the host operating system.
            </summary>
            <remarks>
            This class represents a notification that can be displayed either in a window using
            <see cref="T:Avalonia.Controls.Notifications.WindowNotificationManager"/> or by the host operating system (to be implemented).
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Notifications.Notification.#ctor(System.String,System.String,Avalonia.Controls.Notifications.NotificationType,System.Nullable{System.TimeSpan},System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Notifications.Notification"/> class.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message to be displayed in the notification.</param>
            <param name="type">The <see cref="T:Avalonia.Controls.Notifications.NotificationType"/> of the notification.</param>
            <param name="expiration">The expiry time at which the notification will close. 
            Use <see cref="F:System.TimeSpan.Zero"/> for notifications that will remain open.</param>
            <param name="onClick">An Action to call when the notification is clicked.</param>
            <param name="onClose">An Action to call when the notification is closed.</param>
        </member>
        <member name="P:Avalonia.Controls.Notifications.Notification.Title">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Notifications.Notification.Message">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Notifications.Notification.Type">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Notifications.Notification.Expiration">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Notifications.Notification.OnClick">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Notifications.Notification.OnClose">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Notifications.NotificationCard">
            <summary>
            Control that represents and displays a notification.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Notifications.NotificationCard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Notifications.NotificationCard"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.NotificationCard.IsClosing">
            <summary>
            Determines if the notification is already closing.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Notifications.NotificationCard.IsClosingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Notifications.NotificationCard.IsClosing"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.NotificationCard.IsClosed">
            <summary>
            Determines if the notification is closed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Notifications.NotificationCard.IsClosedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Notifications.NotificationCard.IsClosed"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Notifications.NotificationCard.NotificationClosedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Notifications.NotificationCard.NotificationClosed"/> event.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Notifications.NotificationCard.NotificationClosed">
            <summary>
            Raised when the <see cref="T:Avalonia.Controls.Notifications.NotificationCard"/> has closed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Notifications.NotificationCard.CloseOnClickProperty">
            <summary>
            Defines the CloseOnClick property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Notifications.NotificationCard.Button_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a button inside the Notification is clicked.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Notifications.NotificationCard.Close">
            <summary>
            Closes the <see cref="T:Avalonia.Controls.Notifications.NotificationCard"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Notifications.NotificationPosition">
            <summary>
            Describes the possible positions for <see cref="T:Avalonia.Controls.Notifications.Notification"/>s that are displayed by a
            <see cref="T:Avalonia.Controls.Notifications.WindowNotificationManager"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Notifications.NotificationType">
            <summary>
            Enumeration of types for <see cref="T:Avalonia.Controls.Notifications.INotification"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Notifications.WindowNotificationManager">
            <summary>
            An <see cref="T:Avalonia.Controls.Notifications.INotificationManager"/> that displays notifications in a <see cref="T:Avalonia.Controls.Window"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Notifications.WindowNotificationManager.Position"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.WindowNotificationManager.Position">
            <summary>
            Defines which corner of the screen notifications can be displayed in.
            </summary>
            <seealso cref="T:Avalonia.Controls.Notifications.NotificationPosition"/>
        </member>
        <member name="F:Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Notifications.WindowNotificationManager.MaxItems"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Notifications.WindowNotificationManager.MaxItems">
            <summary>
            Defines the maximum number of notifications visible at once.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Notifications.WindowNotificationManager.#ctor(Avalonia.Controls.TopLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Notifications.WindowNotificationManager"/> class.
            </summary>
            <param name="host">The window that will host the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Notifications.WindowNotificationManager.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Notifications.WindowNotificationManager.Show(Avalonia.Controls.Notifications.INotification)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Notifications.WindowNotificationManager.Show(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Notifications.WindowNotificationManager.Install(Avalonia.Controls.Primitives.TemplatedControl)">
            <summary>
            Installs the <see cref="T:Avalonia.Controls.Notifications.WindowNotificationManager"/> within the <see cref="T:Avalonia.Controls.Primitives.AdornerLayer"/>
            of the host <see cref="T:Avalonia.Controls.Window"/>.
            </summary>
            <param name="host">The <see cref="T:Avalonia.Controls.Window"/> that will be the host.</param>
        </member>
        <member name="T:Avalonia.Controls.ReversibleStackPanel">
            <summary>
            Implements a <see cref="T:Avalonia.Controls.StackPanel"/> where the flow direction of its items can be reversed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ReversibleStackPanel.ReverseOrderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ReversibleStackPanel.ReverseOrder"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ReversibleStackPanel.ReverseOrder">
            <summary>
            Gets or sets if the child controls will be layed out in reverse order.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ReversibleStackPanel.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.NumericUpDown">
            <summary>
            Control that represents a TextBox with button spinners that allow incrementing and decrementing numeric values.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.AllowSpinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.AllowSpin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ButtonSpinnerLocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ButtonSpinnerLocation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ShowButtonSpinnerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ShowButtonSpinner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ClipValueToMinMaxProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ClipValueToMinMax"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.NumberFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.NumberFormat"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.FormatStringProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.FormatString"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.IsReadOnlyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.IsReadOnly"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ParsingNumberStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.TextConverterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.TextConverter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ValueProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.WatermarkProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Watermark"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.TextBox">
            <summary>
            Gets the TextBox template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.AllowSpin">
            <summary>
            Gets or sets the ability to perform increment/decrement operations via the keyboard, button spinners, or mouse wheel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ButtonSpinnerLocation">
            <summary>
            Gets or sets current location of the <see cref="T:Avalonia.Controls.ButtonSpinner"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ShowButtonSpinner">
            <summary>
            Gets or sets a value indicating whether the spin buttons should be shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ClipValueToMinMax">
            <summary>
            Gets or sets if the value should be clipped when minimum/maximum is reached.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.NumberFormat">
            <summary>
            Gets or sets the current NumberFormatInfo
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.FormatString">
            <summary>
            Gets or sets the display format of the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets the amount in which to increment the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.IsReadOnly">
            <summary>
            Gets or sets if the control is read only.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the maximum allowed value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the minimum allowed value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ParsingNumberStyle">
            <summary>
            Gets or sets the parsing style (AllowLeadingWhite, Float, AllowHexSpecifier, ...). By default, Any.
            Note that Hex style does not work with decimal. 
            For hexadecimal display, use <see cref="P:Avalonia.Controls.NumericUpDown.TextConverter"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Text">
            <summary>
            Gets or sets the formatted string representation of the value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.TextConverter">
            <summary>
            Gets or sets the custom bidirectional Text-Value converter.
            Non-null converter overrides <see cref="P:Avalonia.Controls.NumericUpDown.ParsingNumberStyle"/>, providing finer control over 
            string representation of the underlying value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Watermark">
            <summary>
            Gets or sets the object to use as a watermark if the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> is null.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Avalonia.Controls.NumericUpDown"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.NumericUpDown"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <summary>
            Called to update the validation state for properties for which data validation is
            enabled.
            </summary>
            <param name="property">The property.</param>
            <param name="state">The current data binding state.</param>
            <param name="error">The current data binding error, if any.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnNumberFormatChanged(System.Globalization.NumberFormatInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.NumberFormat"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnFormatStringChanged(System.String,System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.FormatString"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIncrementChanged(System.Decimal,System.Decimal)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.IsReadOnly"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMaximumChanged(System.Decimal,System.Decimal)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMinimumChanged(System.Decimal,System.Decimal)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTextChanged(System.String,System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTextConverterChanged(Avalonia.Data.Converters.IValueConverter,Avalonia.Data.Converters.IValueConverter)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnValueChanged(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceIncrement(System.Decimal)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceMaximum(System.Decimal)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceMinimum(System.Decimal)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceValue(System.Nullable{System.Decimal})">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnSpin(Avalonia.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.RaiseValueChangedEvent(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.NumericUpDown.ValueChanged"/> event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.ConvertTextToValue(System.String)">
            <summary>
            Converts the formatted text to a value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.ConvertValueToText">
            <summary>
            Converts the value to formatted text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin directions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnNumberFormatChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.NumberFormat"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.IncrementChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.FormatStringChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.FormatString"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIsReadOnlyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.IsReadOnly"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMaximumChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMinimumChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTextChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTextConverterChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.TextConverter"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnValueChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ValueChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.NumericUpDown.ValueChanged"/> event.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.NumericUpDown.ValueChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.SyncTextAndValueProperties(System.Boolean,System.String)">
            <summary>
            Synchronize <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> and <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> properties.
            </summary>
            <param name="updateValueFromText">If value should be updated from text.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.SyncTextAndValueProperties(System.Boolean,System.String,System.Boolean)">
            <summary>
            Synchronize <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> and <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> properties.
            </summary>
            <param name="updateValueFromText">If value should be updated from text.</param>
            <param name="text">The text.</param>
            <param name="forceTextUpdate">Force text update.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.ParsePercent(System.String,System.IFormatProvider)">
            <summary>
            Parse percent format text
            </summary>
            <param name="text">Text to parse.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="T:Avalonia.Controls.Panel">
            <summary>
            Base class for controls that can contain multiple children.
            </summary>
            <remarks>
            Controls can be added to a <see cref="T:Avalonia.Controls.Panel"/> by adding them to its <see cref="P:Avalonia.Controls.Panel.Children"/>
            collection. All children are layed out to fill the panel.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Panel.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Panel.Background"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Panel.Children">
            <summary>
            Gets the children of the <see cref="T:Avalonia.Controls.Panel"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Panel.Background">
            <summary>
            Gets or Sets Panel background brush.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Panel.IsItemsHost">
            <summary>
            Gets whether the <see cref="T:Avalonia.Controls.Panel"/> hosts the items created by an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the visual to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.AffectsParentArrange``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property on a child as affecting the parent panel's arrangement.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.AffectsParentMeasure``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property on a child as affecting the parent panel's measurement.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.ChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Panel.Children"/> collection changes.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.Avalonia#LogicalTree#IChildIndexProvider#TryGetTotalCount(System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.PixelPointEventArgs">
            <summary>
            Provides <see cref="T:Avalonia.PixelPoint"/> data for events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.PixelPointEventArgs.#ctor(Avalonia.PixelPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.PixelPointEventArgs"/> class.
            </summary>
            <param name="point">The <see cref="T:Avalonia.PixelPoint"/> data.</param>
        </member>
        <member name="P:Avalonia.Controls.PixelPointEventArgs.Point">
            <summary>
            Gets the <see cref="T:Avalonia.PixelPoint"/> data.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.PlacementMode">
            <summary>
            Defines the placement for a <see cref="T:Avalonia.Controls.Primitives.Popup"/> control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Pointer">
            <summary>
            The popup is placed at the pointer position.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Bottom">
            <summary>
            Preferred location is below the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Right">
            <summary>
            Preferred location is to the right of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Left">
            <summary>
            Preferred location is to the left of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Top">
            <summary>
            Preferred location is above the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Center">
            <summary>
            Preferred location is centered over the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.AnchorAndGravity">
            <summary>
            The popup is placed according to <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementAnchor"/> and <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementGravity"/> rules.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.TopEdgeAlignedLeft">
            <summary>
            Preferred location is above the target element, with the left edge of the popup
            aligned with the left edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.TopEdgeAlignedRight">
            <summary>
            Preferred location is above the target element, with the right edge of popup aligned with right edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.BottomEdgeAlignedLeft">
            <summary>
            Preferred location is below the target element, with the left edge of popup aligned with left edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.BottomEdgeAlignedRight">
            <summary>
            Preferred location is below the target element, with the right edge of popup aligned with right edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.LeftEdgeAlignedTop">
            <summary>
            Preferred location is to the left of the target element, with the top edge of popup aligned with top edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.LeftEdgeAlignedBottom">
            <summary>
            Preferred location is to the left of the target element, with the bottom edge of popup aligned with bottom edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.RightEdgeAlignedTop">
            <summary>
            Preferred location is to the right of the target element, with the top edge of popup aligned with top edge of the target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.RightEdgeAlignedBottom">
            <summary>
            Preferred location is to the right of the target element, with the bottom edge of popup aligned with bottom edge of the target element.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.PlatformInhibitionType">
            <summary>
            A platform specific behavior that can be inhibited.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlatformInhibitionType.AppSleep">
            <summary>
            When inhibited, prevents the app from being put to sleep or being given a lower priority when not in focus.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.DefaultMenuInteractionHandler">
            <summary>
            Provides the default keyboard and pointer interaction for menus.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.IStorageProviderFactory">
            <summary>
            Factory allows to register custom storage provider instead of native implementation.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.ISystemDialogImpl">
            <summary>
            Defines a platform-specific system dialog implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.ISystemDialogImpl.ShowFileDialogAsync(Avalonia.Controls.FileDialog,Avalonia.Controls.Window)">
            <summary>
            Shows a file dialog.
            </summary>
            <param name="dialog">The details of the file dialog to show.</param>
            <param name="parent">The parent window.</param>
            <returns>A task returning the selected filenames.</returns>
        </member>
        <member name="T:Avalonia.Controls.Platform.SystemDialogImpl">
            <summary>
            Defines a platform-specific system dialog implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Platform.IInsetsManager.IsSystemBarVisible">
            <summary>
            Gets or sets whether the system bars are visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Platform.IInsetsManager.DisplayEdgeToEdge">
            <summary>
            Gets or sets whether the window draws edge to edge. behind any visibile system bars.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Platform.IInsetsManager.SafeAreaPadding">
            <summary>
            Gets the current safe area padding.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Platform.IInsetsManager.SystemBarColor">
            <summary>
            Gets or sets the color of the platform's system bars
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Platform.IInsetsManager.SafeAreaChanged">
            <summary>
            Occurs when safe area for the current window changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Platform.SafeAreaChangedArgs.SafeAreaPadding">
            <inheritdoc cref="P:Avalonia.Controls.Platform.IInsetsManager.SafeAreaPadding"/>
        </member>
        <member name="F:Avalonia.Controls.Platform.SystemBarTheme.Light">
            <summary>
            Light system bar theme, with light background and a dark foreground
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Platform.SystemBarTheme.Dark">
            <summary>
            Bark system bar theme, with dark background and a light foreground
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.IMenuInteractionHandler">
            <summary>
            Handles user interaction for menus.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.IMenuInteractionHandler.Attach(Avalonia.Controls.MenuBase)">
            <summary>
            Attaches the interaction handler to a menu.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:Avalonia.Controls.Platform.IMenuInteractionHandler.Detach(Avalonia.Controls.MenuBase)">
            <summary>
            Detaches the interaction handler from the attached menu.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.IMountedVolumeInfoProvider">
            <summary>
            Defines a platform-specific mount volumes info provider implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.IMountedVolumeInfoProvider.Listen(System.Collections.ObjectModel.ObservableCollection{Avalonia.Controls.Platform.MountedVolumeInfo})">
            <summary>
            Listens to any changes in volume mounts and
            forwards updates to the referenced
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary> 
        </member>
        <member name="T:Avalonia.Controls.Platform.INativeApplicationCommands">
            <summary>
            Native Menu Default Application Commands
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.MountedVolumeInfo">
            <summary>
            Describes a Drive's properties.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.Surfaces.IFramebufferRenderTarget.Lock">
            <summary>
            Provides a framebuffer descriptor for drawing.
            </summary>
            <remarks>
            Contents should be drawn on actual window after disposing
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Platform.Surfaces.FuncFramebufferRenderTarget">
            <summary>
            For simple cases when framebuffer is always available
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ContentPresenter">
            <summary>
            Presents a single item of data inside a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> template.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.CornerRadius"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BoxShadowProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BoxShadow"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.FontStretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.FontStretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.TextAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.TextAlignment"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.TextWrappingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.TextWrapping"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.TextTrimmingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.TextTrimming"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.LineHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.LineHeight"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.MaxLinesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.MaxLines"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Padding"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKey"/> property
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Background">
            <summary>
            Gets or sets a brush with which to paint the background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BorderBrush">
            <summary>
            Gets or sets a brush with which to paint the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BoxShadow">
            <summary>
            Gets or sets the box shadow effect parameters
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Foreground">
            <summary>
            Gets or sets a brush used to paint the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.TextAlignment">
            <summary>
            Gets or sets the text alignment
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.TextWrapping">
            <summary>
            Gets or sets the text wrapping
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.TextTrimming">
            <summary>
            Gets or sets the text trimming
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.LineHeight">
            <summary>
            Gets or sets the line height
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.MaxLines">
            <summary>
            Gets or sets the max lines
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Child">
            <summary>
            Gets the control displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Content">
            <summary>
            Gets or sets the content to be displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the border the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the border of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Padding">
            <summary>
            Gets or sets the space between the border and the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.RecognizesAccessKey">
            <summary>
            Determine if <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> should use <see cref="T:Avalonia.Controls.Primitives.AccessText"/> in its style
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Host">
            <summary>
            Gets the host content control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.UpdateChild">
            <summary>
            Updates the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control based on the control's <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/>.
            </summary>
            <remarks>
            Usually the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control is created automatically when 
            <see cref="M:Avalonia.Controls.Presenters.ContentPresenter.ApplyTemplate"/> is called; however for this to happen, the control needs to
            be attached to a logical tree (if the control is not attached to the logical tree, it
            is reasonable to expect that the DataTemplates needed for the child are not yet 
            available). This method forces the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control's creation at any point, 
            and is particularly useful in unit tests.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.Render(Avalonia.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ContentChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IContentPresenterHost">
            <summary>
            Represents a control which hosts a content presenter.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.Controls.ContentControl"/> which usually contains a
            <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> and exposes it through its 
            <see cref="P:Avalonia.Controls.ContentControl.Presenter"/> property. ContentPresenters can be within
            nested templates or in popups and so are not necessarily created immediately when the
            parent control's template is instantiated so they register themselves using this 
            interface.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren">
            <summary>
            Gets a collection describing the logical children of the host control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <summary>
            Registers an <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> with a host control.
            </summary>
            <param name="presenter">The content presenter.</param>
            <returns>
            True if the content presenter should add its child to the logical children of the
            host; otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemsPresenter">
            <summary>
            Presents items inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenter.ItemsPanelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenter.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.ItemsPanel">
            <summary>
            Gets or sets a template which creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenter.Panel"/> used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Panel">
            <summary>
            Gets the panel used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.ItemsControl">
            <summary>
            Gets the owner <see cref="P:Avalonia.Controls.Presenters.ItemsPresenter.ItemsControl"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Presenters.PanelContainerGenerator">
            <summary>
            Generates containers for <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>s that have non-virtualizing panels.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ScrollContentPresenter">
            <summary>
            Presents a scrolling view of content inside a <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Extent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Viewport"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.HorizontalSnapPointsTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.HorizontalSnapPointsType"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.VerticalSnapPointsTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.VerticalSnapPointsType"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.HorizontalSnapPointsAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.HorizontalSnapPointsAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.VerticalSnapPointsAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.VerticalSnapPointsAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.IsScrollChainingEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.IsScrollChainingEnabled"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Extent">
            <summary>
            Gets the extent of the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Offset">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Viewport">
            <summary>
            Gets the size of the viewport on the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.HorizontalSnapPointsType">
            <summary>
            Gets or sets how scroll gesture reacts to the snap points along the horizontal axis.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.VerticalSnapPointsType">
            <summary>
            Gets or sets how scroll gesture reacts to the snap points along the vertical axis.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.HorizontalSnapPointsAlignment">
            <summary>
            Gets or sets how the existing snap points are horizontally aligned versus the initial viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.VerticalSnapPointsAlignment">
            <summary>
            Gets or sets how the existing snap points are vertically aligned versus the initial viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.IsScrollChainingEnabled">
            <summary>
             Gets or sets if scroll chaining is enabled. The default value is true.
            </summary>
            <remarks>
             After a user hits a scroll limit on an element that has been nested within another scrollable element,
            you can specify whether that parent element should continue the scrolling operation begun in its child element.
            This is called scroll chaining.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Avalonia#Controls#IScrollAnchorProvider#CurrentAnchor">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.BringDescendantIntoView(Avalonia.Visual,Avalonia.Rect)">
            <summary>
            Attempts to bring a portion of the target visual into view by scrolling the content.
            </summary>
            <param name="target">The target visual.</param>
            <param name="targetRect">The portion of the target visual to bring into view.</param>
            <returns>True if the scroll offset was changed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.AttachToScrollViewer">
            <summary>
            Locates the first <see cref="T:Avalonia.Controls.ScrollViewer"/> ancestor and binds to it. Properties which have been set through other means are not bound.
            </summary>
            <remarks>
            This method is automatically called when the control is attached to a visual tree.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.Avalonia#Controls#IScrollAnchorProvider#RegisterAnchorCandidate(Avalonia.Controls.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.Avalonia#Controls#IScrollAnchorProvider#UnregisterAnchorCandidate(Avalonia.Controls.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.PreeditTextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.PreeditText"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.TextAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.TextWrappingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextWrapping"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.LineHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.LineHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.LetterSpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.LetterSpacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.TextPresenter.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.Background"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.Background">
            <summary>
            Gets or sets a brush used to paint the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.Foreground">
            <summary>
            Gets or sets a brush used to paint the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.TextWrapping">
            <summary>
            Gets or sets the control's text wrapping mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.LineHeight">
            <summary>
            Gets or sets the line height. By default, this is set to <see cref="F:System.Double.NaN"/>, which determines the appropriate height automatically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.LetterSpacing">
            <summary>
            Gets or sets the letter spacing.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.TextPresenter.TextLayout">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextLayout"/> used to render the text.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.TextPresenter.CreateTextLayoutInternal(Avalonia.Size,System.String,Avalonia.Media.Typeface,System.Collections.Generic.IReadOnlyList{Avalonia.Utilities.ValueSpan{Avalonia.Media.TextFormatting.TextRunProperties}})">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextLayout"/> used to render the text.
            </summary>
            <param name="constraint">The constraint of the text.</param>
            <param name="text">The text to format.</param>
            <param name="typeface"></param>
            <param name="textStyleOverrides"></param>
            <returns>A <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextLayout"/> object.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.TextPresenter.RenderInternal(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.Presenters.TextPresenter"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.TextPresenter.CreateTextLayout">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextLayout"/> used to render the text.
            </summary>
            <returns>A <see cref="P:Avalonia.Controls.Presenters.TextPresenter.TextLayout"/> object.</returns>
        </member>
        <member name="T:Avalonia.Controls.ProgressBar">
            <summary>
            A control used to indicate the progress of an operation.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings">
            <summary>
            Provides calculated values for use with the <see cref="T:Avalonia.Controls.ProgressBar"/>'s control theme or template.
            </summary>
            <remarks>
            This class is NOT intended for general use outside of control templates.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerAnimationStartPositionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerAnimationStartPosition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerAnimationEndPositionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerAnimationEndPosition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2AnimationStartPositionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2AnimationStartPosition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2AnimationEndPositionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2AnimationEndPosition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2WidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2Width"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.IndeterminateStartingOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.IndeterminateStartingOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.IndeterminateEndingOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.IndeterminateEndingOffset"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerWidth">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Fluent"/> to define the first indeterminate indicator's width.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2Width">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Fluent"/> to define the second indeterminate indicator's width.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerAnimationStartPosition">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Fluent"/> to define the first indeterminate indicator's start position when animated.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.ContainerAnimationEndPosition">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Fluent"/> to define the first indeterminate indicator's end position when animated.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2AnimationStartPosition">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Fluent"/> to define the second indeterminate indicator's start position when animated.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.Container2AnimationEndPosition">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Fluent"/> to define the second indeterminate indicator's end position when animated.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.IndeterminateStartingOffset">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Simple"/>  to define the starting point of its indeterminate animation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings.IndeterminateEndingOffset">
            <summary>
            Used by <see cref="!:Avalonia.Themes.Simple"/> to define the ending point of its indeterminate animation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.IsIndeterminateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.IsIndeterminate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ShowProgressTextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ShowProgressText"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.ProgressTextFormatProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.ProgressTextFormat"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ProgressBar.PercentageProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ProgressBar.Percentage"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.Percentage">
            <summary>
            Gets the overall percentage complete of the progress 
            </summary>
            <remarks>
            This read-only property is automatically calculated using the current <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> and
            the effective range (<see cref="P:Avalonia.Controls.Primitives.RangeBase.Maximum"/> - <see cref="P:Avalonia.Controls.Primitives.RangeBase.Minimum"/>).
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ProgressBar"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.TemplateSettings">
            <summary>
            Gets or sets the TemplateSettings for the <see cref="T:Avalonia.Controls.ProgressBar"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether the progress bar shows the actual value or a generic,
            continues progress indicator (indeterminate state).
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ShowProgressText">
            <summary>
            Gets or sets a value indicating whether progress text will be shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.ProgressTextFormat">
            <summary>
            Gets or sets the format string applied to the internally calculated progress text before it is shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ProgressBar.Orientation">
            <summary>
            Gets or sets the orientation of the <see cref="T:Avalonia.Controls.ProgressBar"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.RefreshCompletionDeferral">
            <summary>
            Deferral class for notify that a work done in RefreshRequested event is done.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RefreshContainer">
            <summary>
            Represents a container control that provides a <see cref="T:Avalonia.Controls.RefreshVisualizer"/> and pull-to-refresh functionality for scrollable content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshContainer.RefreshRequestedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.RefreshContainer.RefreshRequested"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshContainer.VisualizerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RefreshContainer.Visualizer"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshContainer.PullDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RefreshContainer.PullDirection"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RefreshContainer.Visualizer">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.RefreshVisualizer"/> for this container.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RefreshContainer.PullDirection">
            <summary>
            Gets or sets a value that specifies the direction to pull to initiate a refresh.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.RefreshContainer.RefreshRequested">
            <summary>
            Occurs when an update of the content has been initiated.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RefreshContainer.RequestRefresh">
            <summary>
            Initiates an update of the content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PullToRefresh.RefreshInfoProvider.RefreshStartedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.PullToRefresh.RefreshInfoProvider.RefreshStarted"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PullToRefresh.RefreshInfoProvider.RefreshCompletedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.PullToRefresh.RefreshInfoProvider.RefreshCompleted"/> event.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RefreshRequestedEventArgs">
            <summary>
            Provides event data for RefreshRequested events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RefreshRequestedEventArgs.GetDeferral">
            <summary>
            Gets a deferral object for managing the work done in the RefreshRequested event handler.
            </summary>
            <returns>A <see cref="T:Avalonia.Controls.RefreshCompletionDeferral"/> object</returns>
        </member>
        <member name="F:Avalonia.Controls.RefreshVisualizer.PullDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RefreshVisualizer.PullDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.RefreshVisualizer.RefreshRequested"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RefreshVisualizer.RefreshVisualizerState"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshVisualizer.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RefreshVisualizer.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RefreshVisualizer.RefreshInfoProviderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RefreshVisualizer.RefreshInfoProvider"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RefreshVisualizer.RefreshVisualizerState">
            <summary>
            Gets or sets a value that indicates the refresh state of the visualizer.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RefreshVisualizer.Orientation">
            <summary>
            Gets or sets a value that indicates the orientation of the visualizer.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.RefreshVisualizer.RefreshRequested">
            <summary>
            Occurs when an update of the content has been initiated.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RefreshVisualizer.RequestRefresh">
            <summary>
            Initiates an update of the content.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RefreshVisualizerOrientation">
            <summary>
            Defines constants that specify the orientation of a RefreshVisualizer.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RefreshVisualizerState">
            <summary>
            Defines constants that specify the state of a RefreshVisualizer
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RadioButton">
            <summary>
            Represents a button that allows a user to select a single option from a group of options.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RelativePanel">
            <summary>
            Defines an area within which you can position and align child objects in relation to each other or the parent panel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAbove(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.Above XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.Above XAML attached property value of the specified object.
            (The element to position this element above.)
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAbove(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element above.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AboveProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AboveProperty"/> XAML attached property.
            </summary>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignBottomWithPanel(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignBottomWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignBottomWithPanel XAML attached property value of the specified
               object. (true to align this element's bottom edge with the panel's bottom edge;
            otherwise, false.)
            </returns>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignBottomWithPanel(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to align this element's bottom edge with the panel's
            bottom edge; otherwise, false.)
            </param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignBottomWith(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignBottomWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignBottomWith XAML attached property value of the specified object.
            (The element to align this element's bottom edge with.)
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignBottomWith(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's bottom edge with.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignBottomWithProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignHorizontalCenterWithPanel(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignHorizontalCenterWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignHorizontalCenterWithPanel XAML attached property value
            of the specified object. (true to horizontally center this element in the panel;
            otherwise, false.)
            </returns>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignHorizontalCenterWithPanel(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to horizontally center this element in the panel; otherwise,
            false.)
            </param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignHorizontalCenterWith(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignHorizontalCenterWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignHorizontalCenterWith XAML attached property value of the
            specified object. (The element to align this element's horizontal center with.)
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignHorizontalCenterWith(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's horizontal center with.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignLeftWithPanel(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignLeftWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignLeftWithPanel XAML attached property value of the specified
            object. (true to align this element's left edge with the panel's left edge; otherwise,
            false.)
            </returns>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignLeftWithPanel(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
             The value to set. (true to align this element's left edge with the panel's left
             edge; otherwise, false.)
            </param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignLeftWith(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignLeftWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignLeftWith XAML attached property value of the specified
            object. (The element to align this element's left edge with.)
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignLeftWith(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's left edge with.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignLeftWithProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignRightWithPanel(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignRightWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignRightWithPanel XAML attached property value of the specified
            object. (true to align this element's right edge with the panel's right edge;
            otherwise, false.)
            </returns>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignRightWithPanel(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to align this element's right edge with the panel's right
            edge; otherwise, false.)
            </param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignRightWith(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignRightWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignRightWith XAML attached property value of the specified
            object. (The element to align this element's right edge with.)
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignRightWith(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.AlignRightWith XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's right edge with.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignRightWithProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignRightWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignTopWithPanel(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignTopWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignTopWithPanel XAML attached property value of the specified
            object. (true to align this element's top edge with the panel's top edge; otherwise,
            false.)
            </returns>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignTopWithPanel(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.AlignTopWithPanel XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to align this element's top edge with the panel's top
            edge; otherwise, false.)
            </param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignTopWith(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignTopWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>The value to set. (The element to align this element's top edge with.)</returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignTopWith(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.AlignTopWith XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's top edge with.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignTopWithProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignTopWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignVerticalCenterWithPanel(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignVerticalCenterWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignVerticalCenterWithPanel XAML attached property value of
            the specified object. (true to vertically center this element in the panel; otherwise,
            false.)
            </returns>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignVerticalCenterWithPanel(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.AlignVerticalCenterWithPanel XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to vertically center this element in the panel; otherwise,
            false.)
            </param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetAlignVerticalCenterWith(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.AlignVerticalCenterWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>The value to set. (The element to align this element's vertical center with.)</returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetAlignVerticalCenterWith(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.AlignVerticalCenterWith XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's horizontal center with.)</param>        
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetBelow(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.Below XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.Below XAML attached property value of the specified object.
            (The element to position this element below.)                                
            </returns>       
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetBelow(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element below.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.BelowProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.BelowProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetLeftOf(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.LeftOf XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.LeftOf XAML attached property value of the specified object.
            (The element to position this element to the left of.)                                 
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetLeftOf(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.LeftOf XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element to the left of.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.LeftOfProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.LeftOfProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.GetRightOf(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RelativePanel.RightOf XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.RightOf XAML attached property value of the specified object.
            (The element to position this element to the right of.)                                   
            </returns>        
        </member>
        <member name="M:Avalonia.Controls.RelativePanel.SetRightOf(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.RightOf XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element to the right of.)</param>
        </member>
        <member name="F:Avalonia.Controls.RelativePanel.RightOfProperty">
            <summary>
             Identifies the <see cref="F:Avalonia.Controls.RelativePanel.RightOfProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Extensions.IsNaN(System.Double)">
            <summary>
                Returns a value that indicates whether the specified value is not a number ().
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>true if  evaluates to ; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Remote.Server.RemoteServerTopLevelImpl.Framebuffer.ToMessage(System.Int64)">
            <remarks>The returned message must NOT be kept around, as it contains a shared buffer.</remarks>
        </member>
        <member name="T:Avalonia.Controls.RepeatButton">
            <summary>
            Represents a control that raises its <see cref="E:Avalonia.Controls.Button.Click"/> event repeatedly when it is pressed and held.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RepeatButton.IntervalProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RepeatButton.Interval"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RepeatButton.DelayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RepeatButton.Delay"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RepeatButton.Interval">
            <summary>
            Gets or sets the amount of time, in milliseconds, of repeating clicks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RepeatButton.Delay">
            <summary>
            Gets or sets the amount of time, in milliseconds, to wait before repeating begins.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ResolveByNameAttribute">
            <summary>
            Indicates that the property resolves an element by Name or x:Name.
            When applying this to attached properties, ensure to put on both
            the Getter and Setter methods.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RowDefinition">
            <summary>
            Holds a row definitions for a <see cref="T:Avalonia.Controls.Grid"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.MaxHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.MaxHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.MinHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.MinHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.HeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.Height"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
            <param name="value">The height of the row.</param>
            <param name="type">The height unit of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor(Avalonia.Controls.GridLength)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
            <param name="height">The height of the column.</param>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.ActualHeight">
            <summary>
            Gets the actual calculated height of the row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.MaxHeight">
            <summary>
            Gets or sets the maximum height of the row in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.MinHeight">
            <summary>
            Gets or sets the minimum height of the row in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.Height">
            <summary>
            Gets or sets the height of the row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RowDefinitions">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.RowDefinition"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinitions"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinitions"/> class.
            </summary>
            <param name="s">A string representation of the row definitions.</param>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.Parse(System.String)">
            <summary>
            Parses a string representation of row definitions collection.
            </summary>
            <param name="s">The row definitions string.</param>
            <returns>The <see cref="T:Avalonia.Controls.RowDefinitions"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.Screens">
            <summary>
            Represents all screens available on a device.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Screens.ScreenCount">
            <summary>
            Gets the total number of screens available on the device.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Screens.All">
            <summary>
            Gets the list of all screens available on the device.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Screens.Primary">
            <summary>
            Gets the primary screen on the device.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Screens.#ctor(Avalonia.Platform.IScreenImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Screens"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Screens.ScreenFromBounds(Avalonia.PixelRect)">
            <summary>
            Retrieves a Screen for the display that contains the rectangle.
            </summary>
            <param name="bounds">Bounds that specifies the area for which to retrieve the display.</param>
            <returns>The <see cref="T:Avalonia.Platform.Screen"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Screens.ScreenFromWindow(Avalonia.Controls.WindowBase)">
            <summary>
            Retrieves a Screen for the display that contains the specified <see cref="T:Avalonia.Controls.WindowBase"/>.
            </summary>
            <param name="window">The window for which to retrieve the Screen.</param>
            <exception cref="T:System.ObjectDisposedException">Window platform implementation was already disposed.</exception>
            <returns>The <see cref="T:Avalonia.Platform.Screen"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Screens.ScreenFromWindow(Avalonia.Platform.IWindowBaseImpl)">
            <summary>
            Retrieves a Screen for the display that contains the specified <see cref="T:Avalonia.Platform.IWindowBaseImpl"/>.
            </summary>
            <param name="window">The window impl for which to retrieve the Screen.</param>
            <returns>The <see cref="T:Avalonia.Platform.Screen"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Screens.ScreenFromPoint(Avalonia.PixelPoint)">
            <summary>
            Retrieves a Screen for the display that contains the specified point.
            </summary>
            <param name="point">A Point that specifies the location for which to retrieve a Screen.</param>
            <returns>The <see cref="T:Avalonia.Platform.Screen"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Screens.ScreenFromVisual(Avalonia.Visual)">
            <summary>
            Retrieves a Screen for the display that contains the specified <see cref="T:Avalonia.Visual"/>.
            </summary>
            <param name="visual">A Visual for which to retrieve a Screen.</param>
            <returns>The <see cref="T:Avalonia.Platform.Screen"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.ScrollChangedEventArgs">
            <summary>
            Describes a change in scrolling state.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollChangedEventArgs.ExtentDelta">
            <summary>
            Gets the change to the value of <see cref="P:Avalonia.Controls.ScrollViewer.Extent"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollChangedEventArgs.OffsetDelta">
            <summary>
            Gets the change to the value of <see cref="P:Avalonia.Controls.ScrollViewer.Offset"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollChangedEventArgs.ViewportDelta">
            <summary>
            Gets the change to the value of <see cref="P:Avalonia.Controls.ScrollViewer.Viewport"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ScrollViewer">
            <summary>
            A control which scrolls its content if the content is bigger than the space available.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.BringIntoViewOnFocusChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.BringIntoViewOnFocusChange"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ExtentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Extent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ViewportProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Viewport"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.LargeChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.LargeChange"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.SmallChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.SmallChange"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ScrollBarMaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.ScrollBarMaximum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalSnapPointsTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.HorizontalSnapPointsType"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalSnapPointsTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.VerticalSnapPointsType"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalSnapPointsAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.HorizontalSnapPointsAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalSnapPointsAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.VerticalSnapPointsAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.IsExpandedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.AllowAutoHideProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.AllowAutoHide"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.IsScrollChainingEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.IsScrollChainingEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.IsScrollInertiaEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.IsScrollInertiaEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ScrollChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.ScrollViewer.ScrollChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ScrollViewer.ScrollChanged">
            <summary>
            Occurs when changes are detected to the scroll position, extent, or viewport size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.BringIntoViewOnFocusChange">
            <summary>
            Gets or sets a value that determines whether the <see cref="T:Avalonia.Controls.ScrollViewer"/> uses a
            bring-into-view scroll behavior when an item in the view gets focus.
            </summary>
            <value>
            true to use a behavior that brings focused items into view. false to use a behavior
            that focused items do not automatically scroll into view. The default is true.
            </value>
            <remarks>
            <see cref="P:Avalonia.Controls.ScrollViewer.BringIntoViewOnFocusChange"/> can either be set explicitly on a
            <see cref="T:Avalonia.Controls.ScrollViewer"/>, or a the attached 
            <code>ScrollViewer.BringIntoViewOnFocusChange</code> property can be set on an element
            that hosts a <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Extent">
            <summary>
            Gets the extent of the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Offset">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Viewport">
            <summary>
            Gets the size of the viewport on the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.LargeChange">
            <summary>
            Gets the large (page) change value for the scroll viewer.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.SmallChange">
            <summary>
            Gets the small (line) change value for the scroll viewer.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scrollbar visibility.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scrollbar visibility.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.CanHorizontallyScroll">
            <summary>
            Gets a value indicating whether the viewer can scroll horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.CanVerticallyScroll">
            <summary>
            Gets a value indicating whether the viewer can scroll vertically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.CurrentAnchor">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.ScrollBarMaximum">
            <summary>
            Gets the maximum scrolling distance (which is <see cref="P:Avalonia.Controls.ScrollViewer.Extent"/> - <see cref="P:Avalonia.Controls.ScrollViewer.Viewport"/>).
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.IsExpanded">
            <summary>
            Gets a value that indicates whether any scrollbar is expanded.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalSnapPointsType">
            <summary>
            Gets or sets how scroll gesture reacts to the snap points along the horizontal axis.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalSnapPointsType">
            <summary>
            Gets or sets how scroll gesture reacts to the snap points along the vertical axis.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalSnapPointsAlignment">
            <summary>
            Gets or sets how the existing snap points are horizontally aligned versus the initial viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalSnapPointsAlignment">
            <summary>
            Gets or sets how the existing snap points are vertically aligned versus the initial viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.AllowAutoHide">
            <summary>
            Gets a value that indicates whether scrollbars can hide itself when user is not interacting with it.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.IsScrollChainingEnabled">
            <summary>
             Gets or sets if scroll chaining is enabled. The default value is true.
            </summary>
            <remarks>
             After a user hits a scroll limit on an element that has been nested within another scrollable element,
            you can specify whether that parent element should continue the scrolling operation begun in its child element.
            This is called scroll chaining.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.IsScrollInertiaEnabled">
            <summary>
            Gets or sets whether scroll gestures should include inertia in their behavior and value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.LineUp">
            <summary>
            Scrolls the content up one line.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.LineDown">
            <summary>
            Scrolls the content down one line.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.LineLeft">
            <summary>
            Scrolls the content left one line.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.LineRight">
            <summary>
            Scrolls the content right one line.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.PageUp">
            <summary>
            Scrolls the content upward by one page.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.PageDown">
            <summary>
            Scrolls the content downward by one page.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.PageLeft">
            <summary>
            Scrolls the content left by one page.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.PageRight">
            <summary>
            Scrolls the content tight by one page.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.ScrollToHome">
            <summary>
            Scrolls to the top-left corner of the content.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.ScrollToEnd">
            <summary>
            Scrolls to the bottom-left corner of the content.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetBringIntoViewOnFocusChange(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the <see cref="P:Avalonia.Controls.ScrollViewer.BringIntoViewOnFocusChange"/> attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetBringIntoViewOnFocusChange(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Gets the value of the <see cref="P:Avalonia.Controls.ScrollViewer.BringIntoViewOnFocusChange"/> attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the HorizontalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(Avalonia.Controls.Control,Avalonia.Controls.Primitives.ScrollBarVisibility)">
            <summary>
            Gets the value of the HorizontalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetHorizontalSnapPointsType(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the HorizontalSnapPointsType attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetHorizontalSnapPointsType(Avalonia.Controls.Control,Avalonia.Controls.Primitives.SnapPointsType)">
            <summary>
            Gets the value of the HorizontalSnapPointsType attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetVerticalSnapPointsType(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the VerticalSnapPointsType attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetVerticalSnapPointsType(Avalonia.Controls.Control,Avalonia.Controls.Primitives.SnapPointsType)">
            <summary>
            Gets the value of the VerticalSnapPointsType attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetHorizontalSnapPointsAlignment(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the HorizontalSnapPointsAlignment attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetHorizontalSnapPointsAlignment(Avalonia.Controls.Control,Avalonia.Controls.Primitives.SnapPointsAlignment)">
            <summary>
            Gets the value of the HorizontalSnapPointsAlignment attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetVerticalSnapPointsAlignment(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the VerticalSnapPointsAlignment attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetVerticalSnapPointsAlignment(Avalonia.Controls.Control,Avalonia.Controls.Primitives.SnapPointsAlignment)">
            <summary>
            Gets the value of the VerticalSnapPointsAlignment attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetVerticalScrollBarVisibility(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the VerticalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetAllowAutoHide(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Gets the value of the AllowAutoHideProperty attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetAllowAutoHide(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the AllowAutoHideProperty attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetIsScrollChainingEnabled(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the IsScrollChainingEnabled attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
            <remarks>
             After a user hits a scroll limit on an element that has been nested within another scrollable element,
            you can specify whether that parent element should continue the scrolling operation begun in its child element.
            This is called scroll chaining.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetIsScrollChainingEnabled(Avalonia.Controls.Control)">
            <summary>
             Gets the value of the IsScrollChainingEnabled attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
            <remarks>
             After a user hits a scroll limit on an element that has been nested within another scrollable element,
            you can specify whether that parent element should continue the scrolling operation begun in its child element.
            This is called scroll chaining.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetVerticalScrollBarVisibility(Avalonia.Controls.Control,Avalonia.Controls.Primitives.ScrollBarVisibility)">
            <summary>
            Gets the value of the VerticalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetIsScrollInertiaEnabled(Avalonia.Controls.Control)">
            <summary>
            Gets whether scroll gestures should include inertia in their behavior and value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetIsScrollInertiaEnabled(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets whether scroll gestures should include inertia in their behavior and value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.RegisterAnchorCandidate(Avalonia.Controls.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.UnregisterAnchorCandidate(Avalonia.Controls.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.OnScrollChanged(Avalonia.Controls.ScrollChangedEventArgs)">
            <summary>
            Called when a change in scrolling state is detected, such as a change in scroll
            position, extent, or viewport size.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            If you override this method, call `base.OnScrollChanged(ScrollChangedEventArgs)` to
            ensure that this event is raised.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.SelectableTextBlock">
            <summary>
            A control that displays a block of formatted text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectableTextBlock.SelectionBrush">
            <summary>
            Gets or sets the brush that highlights selected text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectableTextBlock.SelectionStart">
            <summary>
            Gets or sets a character index for the beginning of the current selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectableTextBlock.SelectionEnd">
            <summary>
            Gets or sets a character index for the end of the current selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectableTextBlock.SelectedText">
            <summary>
            Gets the content of the current selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectableTextBlock.CanCopy">
            <summary>
            Property for determining if the Copy command can be executed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SelectableTextBlock.Copy">
            <summary>
            Copies the current selection to the Clipboard.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SelectableTextBlock.SelectAll">
            <summary>
            Select all text in the TextBox
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SelectableTextBlock.ClearSelection">
            <summary>
            Clears the current selection/>
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SelectionChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SelectionChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The event being raised.</param>
            <param name="removedItems">The items removed from the selection.</param>
            <param name="addedItems">The items added to the selection.</param>
        </member>
        <member name="P:Avalonia.Controls.SelectionChangedEventArgs.AddedItems">
            <summary>
            Gets the items that were added to the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets the items that were removed from the selection.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SelectionMode">
            <summary>
            Defines the selection mode for a control which can select multiple items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Single">
            <summary>
            One item can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Multiple">
            <summary>
            Multiple items can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Toggle">
            <summary>
            Item selection can be toggled by tapping/spacebar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.AlwaysSelected">
            <summary>
            An item will always be selected as long as there are items to select.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs.DeselectedIndexes">
            <summary>
            Gets the indexes of the items that were removed from the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs.SelectedIndexes">
            <summary>
            Gets the indexes of the items that were added to the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs.DeselectedItems">
            <summary>
            Gets the items that were removed from the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs.SelectedItems">
            <summary>
            Gets the items that were added to the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs`1.DeselectedIndexes">
            <summary>
            Gets the indexes of the items that were removed from the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs`1.SelectedIndexes">
            <summary>
            Gets the indexes of the items that were added to the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs`1.DeselectedItems">
            <summary>
            Gets the items that were removed from the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs`1.SelectedItems">
            <summary>
            Gets the items that were added to the selection.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Selection.SelectionNodeBase`1">
            <summary>
            Base class for selection models.
            </summary>
            <typeparam name="T">The type of the element being selected.</typeparam>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionNodeBase`1.Source">
            <summary>
            Gets or sets the source collection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionNodeBase`1.ItemsView">
            <summary>
            Gets an <see cref="T:Avalonia.Controls.ItemsSourceView`1"/> of the <see cref="P:Avalonia.Controls.Selection.SelectionNodeBase`1.Source"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionNodeBase`1.RangesEnabled">
            <summary>
            Gets or sets a value indicating whether range selection is currently enabled for
            the selection node.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChangeStarted">
            <summary>
            Called when the source collection starts changing.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Selection.SelectionNodeBase`1.Source"/> collection changes.
            </summary>
            <param name="e">The details of the collection change.</param>
            <remarks>
            The implementation in <see cref="T:Avalonia.Controls.Selection.SelectionNodeBase`1"/> calls
            <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnItemsAdded(System.Int32,System.Collections.IList)"/> and <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnItemsRemoved(System.Int32,System.Collections.IList)"/>
            in order to calculate how the collection change affects the currently selected items.
            It then calls <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnIndexesChanged(System.Int32,System.Int32)"/> and
            <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSelectionRemoved(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{`0})"/> if necessary, according
            to the <see cref="T:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState"/> returned by those methods.
            
            Override this method and <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChangeFinished"/> to provide
            custom handling of source collection changes.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChangeFinished">
            <summary>
            Called when the source collection has finished changing, and all CollectionChanged
            handlers have run.
            </summary>
            <remarks>
            Override this method to respond to the end of a collection change instead of acting at
            the end of <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
            in order to ensure that all UI subscribers to the source collection change event have
            had chance to run.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnIndexesChanged(System.Int32,System.Int32)">
            <summary>
            Called by <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>,
            detailing the indexes changed by the collection changing.
            </summary>
            <param name="shiftIndex">The first index that was shifted.</param>
            <param name="shiftDelta">
            If positive, the number of items inserted, or if negative the number of items removed.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceReset">
            <summary>
            Called by <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>,
            on collection reset.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSelectionRemoved(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Called by <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>,
            detailing the items removed by a collection change.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.CommitSelect(System.Int32,System.Int32)">
            <summary>
            If <see cref="P:Avalonia.Controls.Selection.SelectionNodeBase`1.RangesEnabled"/>, adds the specified range to the selection.
            </summary>
            <param name="begin">The inclusive index of the start of the range to select.</param>
            <param name="end">The inclusive index of the end of the range to select.</param>
            <returns>The number of items selected.</returns>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.CommitDeselect(System.Int32,System.Int32)">
            <summary>
            If <see cref="P:Avalonia.Controls.Selection.SelectionNodeBase`1.RangesEnabled"/>, removes the specified range from the selection.
            </summary>
            <param name="begin">The inclusive index of the start of the range to deselect.</param>
            <param name="end">The inclusive index of the end of the range to deselect.</param>
            <returns>The number of items selected.</returns>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnItemsAdded(System.Int32,System.Collections.IList)">
            <summary>
            Called by <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
            when items are added to the source collection.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState"/> struct containing the details of the adjusted
            selection.
            </returns>
            <remarks>
            The implementation in <see cref="T:Avalonia.Controls.Selection.SelectionNodeBase`1"/> adjusts the selected ranges, 
            assigning new indexes. Override this method to carry out additional computation when
            items are added.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnItemsRemoved(System.Int32,System.Collections.IList)">
            <summary>
            Called by <see cref="M:Avalonia.Controls.Selection.SelectionNodeBase`1.OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
            when items are removed from the source collection.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState"/> struct containing the details of the adjusted
            selection.
            </returns>
            <remarks>
            The implementation in <see cref="T:Avalonia.Controls.Selection.SelectionNodeBase`1"/> adjusts the selected ranges, 
            assigning new indexes. Override this method to carry out additional computation when
            items are removed.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState">
            <summary>
            Details the results of a collection change on the current selection;
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState.ShiftIndex">
            <summary>
            Gets or sets the first index that was shifted as a result of the collection
            changing.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState.ShiftDelta">
            <summary>
            Gets or sets a value indicating how the indexes after <see cref="P:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState.ShiftIndex"/>
            were shifted.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Selection.SelectionNodeBase`1.CollectionChangeState.RemovedItems">
            <summary>
            Gets or sets the items removed by the collection change, if any.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Separator">
            <summary>
            A separator control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Shapes.Arc">
            <summary>
            Represents a circular or elliptical arc (a segment of a curve).
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Arc.StartAngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Arc.StartAngle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Arc.SweepAngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Arc.SweepAngle"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the angle at which the arc starts, in degrees.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Arc.SweepAngle">
            <summary>
            Gets or sets the angle, in degrees, added to the <see cref="P:Avalonia.Controls.Shapes.Arc.StartAngle"/> defining where the arc ends.
            A positive value is clockwise, negative is counter-clockwise.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Arc.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Shapes.Rectangle">
            <summary>
            Represents a rectangle with optional rounded corners.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Rectangle.RadiusXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Rectangle.RadiusX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Rectangle.RadiusYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Rectangle.RadiusY"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Rectangle.RadiusX">
            <summary>
            Gets or sets the radius on the X-axis used to round the corners of the rectangle.
            Corner radii are represented by an ellipse so this is the X-axis width of the ellipse.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Rectangle.RadiusY">
            <summary>
            Gets or sets the radius on the Y-axis used to round the corners of the rectangle.
            Corner radii are represented by an ellipse so this is the Y-axis height of the ellipse.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Rectangle.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Rectangle.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Shapes.Sector">
            <summary>
            Represents a circular or elliptical sector (a pie-shaped closed region of a circle or ellipse).
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Sector.StartAngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Sector.StartAngle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Sector.SweepAngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Sector.SweepAngle"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Sector.StartAngle">
            <summary>
            Gets or sets the angle at which the sector's arc starts, in degrees.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Sector.SweepAngle">
            <summary>
            Gets or sets the angle, in degrees, added to the <see cref="P:Avalonia.Controls.Shapes.Sector.StartAngle"/> defining where the sector's arc ends.
            A positive value is clockwise, negative is counter-clockwise.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Sector.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Shapes.Shape">
            <summary>
            Provides a base class for shape elements, such as <see cref="T:Avalonia.Controls.Shapes.Ellipse"/>, <see cref="T:Avalonia.Controls.Shapes.Polygon"/> and <see cref="T:Avalonia.Controls.Shapes.Rectangle"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.FillProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.Fill"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.Stretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StrokeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.Stroke"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.StrokeDashArray"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.StrokeDashOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.StrokeThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.StrokeLineCap"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Shapes.Shape.StrokeJoinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Shapes.Shape.StrokeJoin"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.DefiningGeometry">
            <summary>
            Gets a value that represents the <see cref="T:Avalonia.Media.Geometry"/> of the shape.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:Avalonia.Media.Geometry"/> of the shape.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.Fill">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> that specifies how the shape's interior is painted.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.Stretch">
            <summary>
            Gets or sets a <see cref="P:Avalonia.Controls.Shapes.Shape.Stretch"/> enumeration value that describes how the shape fills its allocated space.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.Stroke">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> that specifies how the shape's outline is painted.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.StrokeDashArray">
            <summary>
            Gets or sets a collection of <see cref="T:System.Double"/> values that indicate the pattern of dashes and gaps that is used to outline shapes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.StrokeDashOffset">
            <summary>
            Gets or sets a value that specifies the distance within the dash pattern where a dash begins.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.StrokeThickness">
            <summary>
            Gets or sets the width of the shape outline.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.StrokeLineCap">
            <summary>
            Gets or sets a <see cref="T:Avalonia.Media.PenLineCap"/> enumeration value that describes the shape at the ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Shapes.Shape.StrokeJoin">
            <summary>
            Gets or sets a <see cref="T:Avalonia.Media.PenLineJoin"/> enumeration value that specifies the type of join that is used at the vertices of a Shape.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Shape.AffectsGeometry``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the shape's geometry.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Controls.Shapes.Shape.InvalidateGeometry"/> to be called on the element.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Shape.CreateDefiningGeometry">
            <summary>
            Creates the shape's defining geometry.
            </summary>
            <returns>Defining <see cref="T:Avalonia.Media.Geometry"/> of the shape.</returns>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Shape.InvalidateGeometry">
            <summary>
            Invalidates the geometry of this shape.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ShutdownMode">
            <summary>
            Describes the possible values for <see cref="P:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime.ShutdownMode"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ShutdownMode.OnLastWindowClose">
            <summary>
            Indicates an implicit call to Application.Shutdown when the last window closes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ShutdownMode.OnMainWindowClose">
            <summary>
            Indicates an implicit call to Application.Shutdown when the main window closes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ShutdownMode.OnExplicitShutdown">
            <summary>
            Indicates that the application only exits on an explicit call to Application.Shutdown.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SizeChangedEventArgs">
            <summary>
            Provides data specific to a SizeChanged event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SizeChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SizeChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:Avalonia.Controls.SizeChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SizeChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="M:Avalonia.Controls.SizeChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Object,Avalonia.Size,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SizeChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
            <param name="previousSize">The previous size (or bounds) of the object.</param>
            <param name="newSize">The new size (or bounds) of the object.</param>
        </member>
        <member name="P:Avalonia.Controls.SizeChangedEventArgs.HeightChanged">
            <summary>
            Gets a value indicating whether the height of the new size is considered
            different than the previous size height.
            </summary>
            <remarks>
            This will take into account layout epsilon and will not be true if both
            heights are considered equivalent for layout purposes. Remember there can
            be small variations in the calculations between layout cycles due to
            rounding and precision even when the size has not otherwise changed.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.SizeChangedEventArgs.NewSize">
            <summary>
            Gets the new size (or bounds) of the object.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SizeChangedEventArgs.PreviousSize">
            <summary>
            Gets the previous size (or bounds) of the object.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SizeChangedEventArgs.WidthChanged">
            <summary>
            Gets a value indicating whether the width of the new size is considered
            different than the previous size width.
            </summary>
            <remarks>
            This will take into account layout epsilon and will not be true if both
            widths are considered equivalent for layout purposes. Remember there can
            be small variations in the calculations between layout cycles due to
            rounding and precision even when the size has not otherwise changed.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.TickPlacement">
            <summary>
            Enum which describes how to position the ticks in a <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickPlacement.None">
            <summary>
            No tick marks will appear.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickPlacement.TopLeft">
            <summary>
            Tick marks  will appear above the track for a horizontal <see cref="T:Avalonia.Controls.Slider"/>, or to the left of the track for a vertical <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickPlacement.BottomRight">
            <summary>
            Tick marks will appear below the track for a horizontal <see cref="T:Avalonia.Controls.Slider"/>, or to the right of the track for a vertical <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickPlacement.Outside">
            <summary>
            Tick marks appear on both sides of either a horizontal or vertical <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Slider">
            <summary>
            A control that lets the user select from a range of values by moving a Thumb control along a Track.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.IsDirectionReversedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.IsDirectionReversed"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.IsSnapToTickEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.IsSnapToTickEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.TickFrequencyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.TickFrequency"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.TickPlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.TickPlacement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.TicksProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.Ticks"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Slider"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Avalonia.Controls.Slider"/> class. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.Ticks">
            <summary>
            Defines the ticks to be drawn on the tick bar.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.Orientation">
            <summary>
            Gets or sets the orientation of a <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.IsDirectionReversed">
            <summary>
            Gets or sets the direction of increasing value.
            </summary>
            <value>
            true if the direction of increasing value is to the left for a horizontal slider or
            down for a vertical slider; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.Slider.IsSnapToTickEnabled">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Avalonia.Controls.Slider"/> automatically moves the <see cref="T:Avalonia.Controls.Primitives.Thumb"/> to the closest tick mark.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.TickFrequency">
            <summary>
            Gets or sets the interval between tick marks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.TickPlacement">
            <summary>
            Gets or sets a value that indicates where to draw 
            tick marks in relation to the track.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.IsDragging">
            <summary>
            Gets a value indicating whether the <see cref="T:Avalonia.Controls.Slider"/> is currently being dragged.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.Track">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Slider.Track"/> part of the <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Slider.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Slider.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragStarted(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user start dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragCompleted(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user stop dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.SnapToTick(System.Double)">
            <summary>
            Snap the input 'value' to the closest tick.
            </summary>
            <param name="value">Value that want to snap to closest Tick.</param>
        </member>
        <member name="T:Avalonia.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the end-user.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SpinEventArgs.UsingMouseWheel">
            <summary>
            Get or set whether the spin event originated from a mouse wheel event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SpinEventArgs.#ctor(Avalonia.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="T:Avalonia.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Spinner.ValidSpinDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Spinner.SpinEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Spinner.Spin"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Spinner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Spinner"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets <see cref="T:Avalonia.Controls.ValidSpinDirections"/> allowed for this control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Spinner.OnValidSpinDirectionChanged(Avalonia.Controls.ValidSpinDirections,Avalonia.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.Spinner.OnSpin(Avalonia.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Spinner.OnValidSpinDirectionPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Spinner.ValidSpinDirection"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.SplitButton">
            <summary>
            A button with primary and secondary parts that can each be pressed separately.
            The primary part behaves like a <see cref="T:Avalonia.Controls.Button"/> and the secondary part opens a flyout.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.SplitButton.Click">
            <summary>
            Raised when the user presses the primary part of the <see cref="T:Avalonia.Controls.SplitButton"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitButton.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.SplitButton.Click"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitButton.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitButton.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitButton.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitButton.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitButton.FlyoutProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitButton.Flyout"/> property
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SplitButton"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitButton.Command">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Input.ICommand"/> invoked when the primary part is pressed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitButton.CommandParameter">
            <summary>
            Gets or sets a parameter to be passed to the <see cref="P:Avalonia.Controls.SplitButton.Command"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitButton.Flyout">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.Primitives.FlyoutBase"/> that is shown when the secondary part is pressed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitButton.InternalIsChecked">
            <summary>
            Gets a value indicating whether the button is currently checked.
            </summary>
            <remarks>
            This property exists only for the derived <see cref="T:Avalonia.Controls.ToggleSplitButton"/> and is
            unused (set to false) within <see cref="T:Avalonia.Controls.SplitButton"/>. Doing this allows the
            two controls to share a default style.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.SplitButton.IsEnabledCore">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.Avalonia#Input#ICommandSource#CanExecuteChanged(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.CanExecuteChanged(System.Object,System.EventArgs)">
            <inheritdoc cref="M:Avalonia.Input.ICommandSource.CanExecuteChanged(System.Object,System.EventArgs)"/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.UpdatePseudoClasses">
            <summary>
            Updates the visual state of the control by applying latest PseudoClasses.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OpenFlyout">
            <summary>
            Opens the secondary button's flyout.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.CloseFlyout">
            <summary>
            Closes the secondary button's flyout.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.RegisterFlyoutEvents(Avalonia.Controls.Primitives.FlyoutBase)">
            <summary>
            Registers all flyout events.
            </summary>
            <param name="flyout">The flyout to connect events to.</param>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.UnregisterFlyoutEvents(Avalonia.Controls.Primitives.FlyoutBase)">
            <summary>
            Explicitly unregisters all flyout events.
            </summary>
            <param name="flyout">The flyout to disconnect events from.</param>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.UnregisterEvents">
            <summary>
            Explicitly unregisters all events related to the two buttons in OnApplyTemplate().
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnClickPrimary(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invokes the <see cref="E:Avalonia.Controls.SplitButton.Click"/> event when the primary button part is clicked.
            </summary>
            <param name="e">The event args from the internal Click event.</param>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnClickSecondary(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invoked when the secondary button part is clicked.
            </summary>
            <param name="e">The event args from the internal Click event.</param>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnFlyoutOpened">
            <summary>
            Invoked when the split button's flyout is opened.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.OnFlyoutClosed">
            <summary>
            Invoked when the split button's flyout is closed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.PrimaryButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Event handler for when the internal primary button part is pressed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.SecondaryButton_Click(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Event handler for when the internal secondary button part is pressed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.Flyout_PlacementPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.PopupFlyoutBase.Placement"/> property changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.Flyout_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for when the split button's flyout is opened.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitButton.Flyout_Closed(System.Object,System.EventArgs)">
            <summary>
            Event handler for when the split button's flyout is closed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ToggleSplitButton">
            <summary>
            A button with primary and secondary parts that can each be pressed separately.
            The primary part behaves like a <see cref="T:Avalonia.Controls.Primitives.ToggleButton"/> with two states and
            the secondary part opens a flyout.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ToggleSplitButton.IsCheckedChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.ToggleSplitButton.IsChecked"/> property value changes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSplitButton.IsCheckedChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.ToggleSplitButton.IsCheckedChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSplitButton.IsCheckedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ToggleSplitButton.IsChecked"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToggleSplitButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ToggleSplitButton"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSplitButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.ToggleSplitButton"/> is checked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSplitButton.InternalIsChecked">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ToggleSplitButton.StyleKeyOverride">
            <inheritdoc/>
            <remarks>
            Both <see cref="T:Avalonia.Controls.ToggleSplitButton"/> and <see cref="T:Avalonia.Controls.SplitButton"/> share
            the same exact default style.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ToggleSplitButton.Toggle">
            <summary>
            Toggles the <see cref="P:Avalonia.Controls.ToggleSplitButton.IsChecked"/> property between true and false.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToggleSplitButton.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ToggleSplitButton.OnIsCheckedChanged">
            <summary>
            Invokes the <see cref="E:Avalonia.Controls.ToggleSplitButton.IsCheckedChanged"/> event when the <see cref="P:Avalonia.Controls.ToggleSplitButton.IsChecked"/>
            property changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToggleSplitButton.OnClickPrimary(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.SplitView">
            <summary>
            A control with two views: A collapsible pane and an area for content
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.CompactPaneLengthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.CompactPaneLength"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.DisplayModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.DisplayMode"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.IsPaneOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.IsPaneOpen"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.OpenPaneLengthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.OpenPaneLength"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneBackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.PaneBackground"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PanePlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.PanePlacement"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.Pane"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.PaneTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.UseLightDismissOverlayMode"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.TemplateSettingsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.SplitView.TemplateSettings"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneClosedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.SplitView.PaneClosed"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneClosingEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.SplitView.PaneClosing"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneOpenedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.SplitView.PaneOpened"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitView.PaneOpeningEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.SplitView.PaneOpening"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.CompactPaneLength">
            <summary>
            Gets or sets the length of the pane when in <see cref="F:Avalonia.Controls.SplitViewDisplayMode.CompactOverlay"/> 
            or <see cref="F:Avalonia.Controls.SplitViewDisplayMode.CompactInline"/> mode
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.DisplayMode">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.SplitViewDisplayMode"/> for the SplitView
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.IsPaneOpen">
            <summary>
            Gets or sets whether the pane is open or closed
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.OpenPaneLength">
            <summary>
            Gets or sets the length of the pane when open
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.PaneBackground">
            <summary>
            Gets or sets the background of the pane
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.PanePlacement">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.SplitViewPanePlacement"/> for the SplitView
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.Pane">
            <summary>
            Gets or sets the Pane for the SplitView
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.PaneTemplate">
            <summary>
            Gets or sets the data template used to display the header content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.UseLightDismissOverlayMode">
            <summary>
            Gets or sets whether WinUI equivalent LightDismissOverlayMode is enabled
            <para>When enabled, and the pane is open in Overlay or CompactOverlay mode,
            the contents of the <see cref="T:Avalonia.Controls.SplitView"/> are darkened to visually separate the open pane
            and the rest of the <see cref="T:Avalonia.Controls.SplitView"/>.</para>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SplitView.TemplateSettings">
            <summary>
            Gets or sets the TemplateSettings for the <see cref="T:Avalonia.Controls.SplitView"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.SplitView.PaneClosed">
            <summary>
            Fired when the pane is closed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.SplitView.PaneClosing">
            <summary>
            Fired when the pane is closing.
            </summary>
            <remarks>
            The event args <see cref="P:Avalonia.Interactivity.CancelRoutedEventArgs.Cancel"/> property may be set to true to cancel the event
            and keep the pane open.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.SplitView.PaneOpened">
            <summary>
            Fired when the pane is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.SplitView.PaneOpening">
            <summary>
            Fired when the pane is opening.
            </summary>
            <remarks>
            The event args <see cref="P:Avalonia.Interactivity.CancelRoutedEventArgs.Cancel"/> property may be set to true to cancel the event
            and keep the pane closed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.SplitView.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.SplitView.GetPseudoClass(Avalonia.Controls.SplitViewDisplayMode)">
            <summary>
            Gets the appropriate PseudoClass for the given <see cref="T:Avalonia.Controls.SplitViewDisplayMode"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitView.GetPseudoClass(Avalonia.Controls.SplitViewPanePlacement)">
            <summary>
            Gets the appropriate PseudoClass for the given <see cref="T:Avalonia.Controls.SplitViewPanePlacement"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SplitView.OnCoerceIsPaneOpen(System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.SplitView.IsPaneOpen"/> property has to be coerced.
            </summary>
            <param name="value">The value to coerce.</param>
        </member>
        <member name="M:Avalonia.Controls.SplitView.CoerceIsPaneOpen(Avalonia.AvaloniaObject,System.Boolean)">
            <summary>
            Coerces/validates the <see cref="P:Avalonia.Controls.SplitView.IsPaneOpen"/> property value.
            </summary>
            <param name="instance">The <see cref="T:Avalonia.Controls.SplitView"/> instance.</param>
            <param name="value">The value to coerce.</param>
            <returns>The coerced/validated value.</returns>
        </member>
        <member name="T:Avalonia.Controls.SplitViewDisplayMode">
            <summary>
            Defines constants for how the SplitView Pane should display
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitViewDisplayMode.Inline">
            <summary>
            Pane is displayed next to content, and does not auto collapse
            when tapped outside
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitViewDisplayMode.CompactInline">
            <summary>
            Pane is displayed next to content. When collapsed, pane is still
            visible according to CompactPaneLength. Pane does not auto collapse
            when tapped outside
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitViewDisplayMode.Overlay">
            <summary>
            Pane is displayed above content. Pane collapses when tapped outside
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitViewDisplayMode.CompactOverlay">
            <summary>
            Pane is displayed above content. When collapsed, pane is still
            visible according to CompactPaneLength. Pane collapses when tapped outside
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SplitViewPanePlacement">
            <summary>
            Defines constants for where the Pane should appear
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitViewPanePlacement.Left">
            <summary>
            The pane is shown to the left of content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SplitViewPanePlacement.Right">
            <summary>
            The pane is shown to the right of content.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.StackPanel">
            <summary>
            A panel which lays out its children horizontally or vertically.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.SpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.Spacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.AreHorizontalSnapPointsRegularProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.AreHorizontalSnapPointsRegular"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.AreVerticalSnapPointsRegularProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.AreVerticalSnapPointsRegular"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.HorizontalSnapPointsChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.StackPanel.HorizontalSnapPointsChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.VerticalSnapPointsChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.StackPanel.VerticalSnapPointsChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.StackPanel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.Spacing">
            <summary>
            Gets or sets the size of the spacing to place between child controls.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child controls will be layed out.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.StackPanel.HorizontalSnapPointsChanged">
            <summary>
            Occurs when the measurements for horizontal snap points change.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.StackPanel.VerticalSnapPointsChanged">
            <summary>
            Occurs when the measurements for vertical snap points change.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.AreHorizontalSnapPointsRegular">
            <summary>
            Gets or sets whether the horizontal snap points for the <see cref="T:Avalonia.Controls.StackPanel"/> are equidistant from each other.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.AreVerticalSnapPointsRegular">
            <summary>
            Gets or sets whether the vertical snap points for the <see cref="T:Avalonia.Controls.StackPanel"/> are equidistant from each other.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.Control)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.MeasureOverride(Avalonia.Size)">
            <summary>
            General StackPanel layout behavior is to grow unbounded in the "stacking" direction (Size To Content).
            Children in this dimension are encouraged to be as large as they like.  In the other dimension,
            StackPanel will assume the maximum size of its children.
            </summary>
            <param name="availableSize">Constraint</param>
            <returns>Desired size</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.ArrangeOverride(Avalonia.Size)">
            <summary>
            Content arrangement.
            </summary>
            <param name="finalSize">Arrange size</param>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.GetIrregularSnapPoints(Avalonia.Layout.Orientation,Avalonia.Controls.Primitives.SnapPointsAlignment)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.GetRegularSnapPoints(Avalonia.Layout.Orientation,Avalonia.Controls.Primitives.SnapPointsAlignment,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.FileDialog">
            <summary>
            Base class for system file dialogs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.FileDialog.Filters">
            <summary>
            Gets or sets a collection of filters which determine the types of files displayed in an
            <see cref="T:Avalonia.Controls.OpenFileDialog"/> or an <see cref="T:Avalonia.Controls.SaveFileDialog"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.FileDialog.InitialFileName">
            <summary>
            Gets or sets initial file name that is displayed when the dialog is opened.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.FileSystemDialog">
            <summary>
            Base class for system file and directory dialogs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.FileSystemDialog.Directory">
            <summary>
            Gets or sets the initial directory that will be displayed when the file system dialog
            is opened.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SaveFileDialog">
            <summary>
            Represents a system dialog that prompts the user to select a location for saving a file.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SaveFileDialog.DefaultExtension">
            <summary>
            Gets or sets the default extension to be used to save the file (including the period ".").
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SaveFileDialog.ShowOverwritePrompt">
            <summary>
            Gets or sets a value indicating whether to display a warning if the user specifies the name of a file that already exists.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SaveFileDialog.ShowAsync(Avalonia.Controls.Window)">
            <summary>
            Shows the save file dialog.
            </summary>
            <param name="parent">The parent window.</param>
            <returns>
            A task that on completion contains the full path of the save location, or null if the
            dialog was canceled.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.OpenFileDialog">
            <summary>
            Represents a system dialog that allows the user to select one or more files to open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.OpenFileDialog.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether the user can select multiple files.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.OpenFileDialog.ShowAsync(Avalonia.Controls.Window)">
            <summary>
            Shows the open file dialog.
            </summary>
            <param name="parent">The parent window.</param>
            <returns>
            A task that on completion returns an array containing the full path to the selected
            files, or null if the dialog was canceled.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.OpenFolderDialog">
            <summary>
            Represents a system dialog that allows the user to select a directory.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.OpenFolderDialog.ShowAsync(Avalonia.Controls.Window)">
            <summary>
            Shows the open folder dialog.
            </summary>
            <param name="parent">The parent window.</param>
            <returns>
            A task that on completion returns the full path of the selected directory, or null if the
            dialog was canceled.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.SystemDialog">
            <summary>
            Base class for system dialogs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SystemDialog.Title">
            <summary>
            Gets or sets the dialog title.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.FileDialogFilter">
            <summary>
            Represents a filter in an <see cref="T:Avalonia.Controls.OpenFileDialog"/> or an <see cref="T:Avalonia.Controls.SaveFileDialog"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.FileDialogFilter.Name">
            <summary>
            Gets or sets the name of the filter, e.g. ("Text files (.txt)").
            </summary>
        </member>
        <member name="P:Avalonia.Controls.FileDialogFilter.Extensions">
            <summary>
            Gets or sets a list of file extensions matched by the filter (e.g. "txt" or "*" for all
            files).
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TabControl">
            <summary>
            A tab control that displays a tab strip along with the content of the selected tab.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.TabStripPlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.TabStripPlacement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.SelectedContentProperty">
            <summary>
            The selected content property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.SelectedContentTemplateProperty">
            <summary>
            The selected content template property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TabControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.TabStripPlacement">
            <summary>
            Gets or sets the tabstrip placement of the TabControl.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.ContentTemplate">
            <summary>
            Gets or sets the default data template used to display the content of the selected tab.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.SelectedContent">
            <summary>
            Gets or sets the content of the selected tab.
            </summary>
            <value>
            The content of the selected tab.
            </value>
        </member>
        <member name="P:Avalonia.Controls.TabControl.SelectedContentTemplate">
            <summary>
            Gets or sets the content template for the selected tab.
            </summary>
            <value>
            The content template of the selected tab.
            </value>
        </member>
        <member name="P:Avalonia.Controls.TabControl.Avalonia#Controls#Presenters#IContentPresenterHost#LogicalChildren">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TabControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TabControl.RegisterContentPresenter(Avalonia.Controls.Presenters.ContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="M:Avalonia.Controls.TabControl.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TabControl.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.TabItem">
            <summary>
            An item in a <see cref="T:Avalonia.Controls.TabControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabItem.TabStripPlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabItem.TabStripPlacement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TabItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabItem.TabStripPlacement">
            <summary>
            Gets the placement of this tab relative to the outer <see cref="T:Avalonia.Controls.TabControl"/>, if there is one.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.DataTemplateExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.DataTemplateExtensions.FindDataTemplate(Avalonia.Controls.Control,System.Object,Avalonia.Controls.Templates.IDataTemplate)">
            <summary>
            Find a data template that matches a piece of data.
            </summary>
            <param name="control">The control searching for the data template.</param>
            <param name="data">The data.</param>
            <param name="primary">
            An optional primary template that can will be tried before the DataTemplates in the
            tree are searched.
            </param>
            <returns>The data template or null if no matching data template was found.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.DataTemplates">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.DataTemplates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.DataTemplates"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncControlTemplate">
            <summary>
            A template for a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncControlTemplate.#ctor(System.Func{Avalonia.Controls.Primitives.TemplatedControl,Avalonia.Controls.INameScope,Avalonia.Controls.Control})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncControlTemplate"/> class.
            </summary>
            <param name="build">The build function.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncControlTemplate`1">
            <summary>
            A template for a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
            <typeparam name="T">The type of the lookless control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncControlTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.INameScope,Avalonia.Controls.Control})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncControlTemplate`1"/> class.
            </summary>
            <param name="build">The build function.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncDataTemplate">
            <summary>
            Builds a control for a piece of data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate.Default">
            <summary>
            The default data template used in the case where no matching data template is found.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate.Access">
            <summary>
            The default data template used in the case where no matching data template is found
            but <see cref="T:Avalonia.Controls.Primitives.AccessText"/> should be used.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate._match">
            <summary>
            The implementation of the <see cref="M:Avalonia.Controls.Templates.FuncDataTemplate.Match(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.#ctor(System.Type,System.Func{System.Object,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/> class.
            </summary>
            <param name="type">The type of data which the data template matches.</param>
            <param name="build">
            A function which when passed an object of <paramref name="type"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which returns a control for matching data.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.Match(System.Object)">
            <summary>
            Checks to see if this data template matches the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            True if the data template can build a control for the data, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.Build(System.Object,Avalonia.Controls.Control)">
            <summary>
            Creates or recycles a control to display the specified data.
            </summary>
            <param name="data">The data to display.</param>
            <param name="existing">An optional control to recycle.</param>
            <returns>
            The <paramref name="existing"/> control if supplied and applicable to
            <paramref name="data"/>, otherwise a new control or null.
            </returns>
            <remarks>
            The caller should ensure that any control passed to <paramref name="existing"/>
            originated from the same data template.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.IsInstance(System.Object,System.Type)">
            <summary>
            Determines of an object is of the specified type.
            </summary>
            <param name="o">The object.</param>
            <param name="t">The type.</param>
            <returns>
            True if <paramref name="o"/> is of type <paramref name="t"/>, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncDataTemplate`1">
            <summary>
            Builds a control for a piece of data of specified type.
            </summary>
            <typeparam name="T">The type of the template's data.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.Control},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.CastMatch(System.Func{`0,System.Boolean})">
            <summary>
            Casts a strongly typed match function to a weakly typed one.
            </summary>
            <param name="f">The strongly typed function.</param>
            <returns>The weakly typed function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.CastBuild``1(System.Func{`0,Avalonia.Controls.INameScope,``0})">
            <summary>
            Casts a strongly typed build function to a weakly typed one.
            </summary>
            <typeparam name="TResult">The strong data type.</typeparam>
            <param name="f">The strongly typed function.</param>
            <returns>The weakly typed function.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTemplate`1">
            <summary>
            Creates a control from a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTemplate`1"/> class.
            </summary>
            <param name="func">The function used to create the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`1.Build">
            <summary>
            Creates the control.
            </summary>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTemplate`2">
            <summary>
            Creates a control from a <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`2.#ctor(System.Func{`0,Avalonia.Controls.INameScope,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTemplate`2"/> class.
            </summary>
            <param name="func">The function used to create the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`2.Build(`0)">
            <summary>
            Creates the control.
            </summary>
            <param name="param">The parameter.</param>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTreeDataTemplate">
            <summary>
            A template used to build hierarchical data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.#ctor(System.Type,System.Func{System.Object,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate"/> class.
            </summary>
            <param name="type">The type of data which the data template matches.</param>
            <param name="build">
            A function which when passed an object of <paramref name="type"/> returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed an object of <paramref name="type"/> returns the child
            items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed a matching object returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed a matching object returns the child items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.ItemsSelector(System.Object)">
            <summary>
            Selects the child items of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The child items, or null if no child items.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.IsInstance(System.Object,System.Type)">
            <summary>
            Determines of an object is of the specified type.
            </summary>
            <param name="o">The object.</param>
            <param name="t">The type.</param>
            <returns>
            True if <paramref name="o"/> is of type <paramref name="t"/>, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1">
            <summary>
            A template used to build hierarchical data.
            </summary>
            <typeparam name="T">The type of the template's data.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1"/> class.
            </summary>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed an object of <typeparamref name="T"/> returns the child
            items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.INameScope,Avalonia.Controls.Control},System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed a matching object returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed a matching object returns the child items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.CastMatch(System.Func{`0,System.Boolean})">
            <summary>
            Casts a typed match function to an untyped match function.
            </summary>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.Cast``1(System.Func{`0,Avalonia.Controls.INameScope,``0})">
            <summary>
            Casts a function with a typed parameter to an untyped function.
            </summary>
            <typeparam name="TResult">The result.</typeparam>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.Cast``1(System.Func{`0,``0})">
            <summary>
            Casts a function with a typed parameter to an untyped function.
            </summary>
            <typeparam name="TResult">The result.</typeparam>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.IControlTemplate">
            <summary>
            Interface representing a template used to build a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.IDataTemplate">
            <summary>
            Interface representing a template used to build a control for a piece of data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.IDataTemplate.Match(System.Object)">
            <summary>
            Checks to see if this data template matches the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            True if the data template can build a control for the data, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.IDataTemplateHost">
            <summary>
            Defines an element that has a <see cref="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates"/> collection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates">
            <summary>
            Gets the data templates for the element.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Templates.IDataTemplateHost.IsDataTemplatesInitialized">
            <summary>
            Gets a value indicating whether <see cref="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates"/> is initialized.
            </summary>
            <remarks>
            The <see cref="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates"/> property may be lazily initialized, if so this property
            indicates whether it has been initialized.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Templates.IRecyclingDataTemplate">
            <summary>
            An <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/> that supports recycling existing elements.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.IRecyclingDataTemplate.Build(System.Object,Avalonia.Controls.Control)">
            <summary>
            Creates or recycles a control to display the specified data.
            </summary>
            <param name="data">The data to display.</param>
            <param name="existing">An optional control to recycle.</param>
            <returns>
            The <paramref name="existing"/> control if supplied and applicable to
            <paramref name="data"/>, otherwise a new control or null.
            </returns>
            <remarks>
            The caller should ensure that any control passed to <paramref name="existing"/>
            originated from the same data template.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Templates.ITemplate`2">
            <summary>
            Creates a control based on a parameter.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.ITemplate`2.Build(`0)">
            <summary>
            Creates the control.
            </summary>
            <param name="param">The parameter.</param>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.ITreeDataTemplate">
            <summary>
            Interface representing a template used to build hierarchical data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.ITreeDataTemplate.ItemsSelector(System.Object)">
            <summary>
            Selects the child items of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            An <see cref="T:Avalonia.Data.InstancedBinding"/> holding the items, or an observable that tracks the
            items. May return null if no child items.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.ITemplate`1">
            <summary>
            Creates a control.
            </summary>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.ITemplate`1.Build">
            <summary>
            Creates the control.
            </summary>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.TextBlock">
            <summary>
            A control that displays a block of text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Padding"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontStretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.BaselineOffsetProperty">
            <summary>
            DependencyProperty for <see cref="P:Avalonia.Controls.TextBlock.BaselineOffset" /> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.LineHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.LineHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.LetterSpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.LetterSpacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.MaxLinesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.MaxLines"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextWrappingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextWrapping"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextTrimmingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextTrimming"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextDecorationsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextDecorations"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.InlinesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Inlines"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TextBlock"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextLayout">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.TextBlock.TextLayout"/> used to render the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Padding">
            <summary>
            Gets or sets the padding to place around the <see cref="P:Avalonia.Controls.TextBlock.Text"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Background">
            <summary>
            Gets or sets a brush used to paint the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontFamily">
            <summary>
            Gets or sets the font family used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontSize">
            <summary>
            Gets or sets the size of the control's text in points.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontStyle">
            <summary>
            Gets or sets the font style used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontWeight">
            <summary>
            Gets or sets the font weight used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontStretch">
            <summary>
            Gets or sets the font stretch used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Foreground">
            <summary>
            Gets or sets the brush used to draw the control's text and other foreground elements.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.LineHeight">
            <summary>
            Gets or sets the height of each line of content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.LetterSpacing">
            <summary>
            Gets or sets the letter spacing.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.MaxLines">
            <summary>
            Gets or sets the maximum number of text lines.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextWrapping">
            <summary>
            Gets or sets the control's text wrapping mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextTrimming">
            <summary>
            Gets or sets the control's text trimming mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextDecorations">
            <summary>
            Gets or sets the text decorations.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Inlines">
            <summary>
            Gets or sets the inlines.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.BaselineOffset">
            <summary>
            The BaselineOffset property provides an adjustment to baseline offset
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetBaselineOffset(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetBaselineOffset(Avalonia.Controls.Control,System.Double)">
            <summary>
            Writes the attached property BaselineOffset to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="value">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetTextAlignment(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetTextAlignment(Avalonia.Controls.Control,Avalonia.Media.TextAlignment)">
            <summary>
            Writes the attached property BaselineOffset to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="alignment">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetTextWrapping(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetTextWrapping(Avalonia.Controls.Control,Avalonia.Media.TextWrapping)">
            <summary>
            Writes the attached property BaselineOffset to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="wrapping">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetTextTrimming(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetTextTrimming(Avalonia.Controls.Control,Avalonia.Media.TextTrimming)">
            <summary>
            Writes the attached property BaselineOffset to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="trimming">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetLineHeight(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetLineHeight(Avalonia.Controls.Control,System.Double)">
            <summary>
            Writes the attached property BaselineOffset to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="height">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetLetterSpacing(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetLetterSpacing(Avalonia.Controls.Control,System.Double)">
            <summary>
            Writes the attached property LetterSpacing to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="letterSpacing">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetMaxLines(Avalonia.Controls.Control)">
            <summary>
            Reads the attached property from the given element
            </summary>
            <param name="control">The element to which to read the attached property.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetMaxLines(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Writes the attached property BaselineOffset to the given element.
            </summary>
            <param name="control">The element to which to write the attached property.</param>
            <param name="maxLines">The property value to set</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.TextBlock"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.CreateTextLayout(System.String)">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.TextBlock.TextLayout"/> used to render the text.
            </summary>
            <returns>A <see cref="P:Avalonia.Controls.TextBlock.TextLayout"/> object.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.InvalidateTextLayout">
            <summary>
            Invalidates <see cref="P:Avalonia.Controls.TextBlock.TextLayout"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TextBox">
            <summary>
            Represents a control that can be used to display or edit unformatted text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CutGesture">
            <summary>
            Gets a platform-specific <see cref="T:Avalonia.Input.KeyGesture"/> for the Cut action
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CopyGesture">
            <summary>
            Gets a platform-specific <see cref="T:Avalonia.Input.KeyGesture"/> for the Copy action
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.PasteGesture">
            <summary>
            Gets a platform-specific <see cref="T:Avalonia.Input.KeyGesture"/> for the Paste action
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.AcceptsReturnProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.AcceptsReturn"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.AcceptsTabProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.AcceptsTab"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CaretIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CaretIndex"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.IsReadOnlyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.IsReadOnly"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.PasswordCharProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.PasswordChar"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.SelectionBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.SelectionBrush"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.SelectionForegroundBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.SelectionForegroundBrush"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CaretBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CaretBrush"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.SelectionStartProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.SelectionStart"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.SelectionEndProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.SelectionEnd"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.MaxLengthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.MaxLength"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.MaxLinesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.MaxLines"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.Text"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.TextAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.TextAlignment"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="T:Avalonia.Layout.HorizontalAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="T:Avalonia.Layout.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.LineHeightProperty">
            <summary>
            Defines see <see cref="P:Avalonia.Controls.Presenters.TextPresenter.LineHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.LetterSpacingProperty">
            <summary>
            Defines see <see cref="P:Avalonia.Controls.TextBlock.LetterSpacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.WatermarkProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.Watermark"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.UseFloatingWatermarkProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.UseFloatingWatermark"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.NewLineProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.NewLine"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.InnerLeftContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.InnerLeftContent"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.InnerRightContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.InnerRightContent"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.RevealPasswordProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.RevealPassword"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CanCutProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CanCut"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CanCopyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CanCopy"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CanPasteProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CanPaste"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.IsUndoEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.IsUndoEnabled"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.UndoLimitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.UndoLimit"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CanUndoProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CanUndo"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CanRedoProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBox.CanRedo"/> property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CopyingToClipboardEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.TextBox.CopyingToClipboard"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.CuttingToClipboardEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.TextBox.CuttingToClipboard"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.PastingFromClipboardEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.TextBox.PastingFromClipboard"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.TextChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.TextBox.TextChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBox.TextChangingEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.TextBox.TextChanging"/> event.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TextBox.UndoRedoState">
            <summary>
            Stores the state information for available actions in the UndoRedoHelper
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.AcceptsReturn">
            <summary>
            Gets or sets a value that determines whether the TextBox allows and displays newline or return characters
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.AcceptsTab">
            <summary>
            Gets or sets a value that determins whether the TextBox allows and displays tabs
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CaretIndex">
            <summary>
            Gets or sets the index of the text caret
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.IsReadOnly">
            <summary>
            Gets or sets a value whether this TextBox is read-only
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.PasswordChar">
            <summary>
            Gets or sets the <see cref="T:System.Char"/> that should be used for password masking
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.SelectionBrush">
            <summary>
            Gets or sets a brush that is used to highlight selected text
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.SelectionForegroundBrush">
            <summary>
            Gets or sets a brush that is used for the foreground of selected text
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CaretBrush">
            <summary>
            Gets or sets a brush that is used for the text caret
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.SelectionStart">
            <summary>
            Gets or sets the starting position of the text selected in the TextBox
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.SelectionEnd">
            <summary>
            Gets or sets the end position of the text selected in the TextBox
            </summary>
            <remarks>
            When the SelectionEnd is equal to <see cref="P:Avalonia.Controls.TextBox.SelectionStart"/>, there is no 
            selected text and it marks the caret position
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.TextBox.MaxLength">
            <summary>
            Gets or sets the maximum number of visible lines.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.MaxLines">
            <summary>
            Gets or sets the maximum number of lines the TextBox can contain
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.LetterSpacing">
            <summary>
            Gets or sets the spacing between characters
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.LineHeight">
            <summary>
            Gets or sets the line height.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.Text">
            <summary>
            Gets or sets the Text content of the TextBox
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.SelectedText">
            <summary>
            Gets or sets the text selected in the TextBox
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.TextAlignment">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.TextAlignment"/> of the TextBox
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.Watermark">
            <summary>
            Gets or sets the placeholder or descriptive text that is displayed even if the <see cref="P:Avalonia.Controls.TextBox.Text"/>
            property is not yet set.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.UseFloatingWatermark">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Avalonia.Controls.TextBox.Watermark"/> will still be shown above the
            <see cref="P:Avalonia.Controls.TextBox.Text"/> even after a text value is set.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.InnerLeftContent">
            <summary>
            Gets or sets custom content that is positioned on the left side of the text layout box
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.InnerRightContent">
            <summary>
            Gets or sets custom content that is positioned on the right side of the text layout box
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.RevealPassword">
            <summary>
            Gets or sets whether text masked by <see cref="P:Avalonia.Controls.TextBox.PasswordChar"/> should be revealed
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.TextWrapping">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.TextWrapping"/> of the TextBox
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.NewLine">
            <summary>
            Gets or sets which characters are inserted when Enter is pressed. Default: <see cref="P:System.Environment.NewLine"/>
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.ClearSelection">
            <summary>
            Clears the current selection, maintaining the <see cref="P:Avalonia.Controls.TextBox.CaretIndex"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CanCut">
            <summary>
            Property for determining if the Cut command can be executed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CanCopy">
            <summary>
            Property for determining if the Copy command can be executed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CanPaste">
            <summary>
            Property for determining if the Paste command can be executed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.IsUndoEnabled">
            <summary>
            Property for determining whether undo/redo is enabled
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.UndoLimit">
            <summary>
            Gets or sets the maximum number of items that can reside in the Undo stack
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CanUndo">
            <summary>
            Gets a value that indicates whether the undo stack has an action that can be undone
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBox.CanRedo">
            <summary>
            Gets a value that indicates whether the redo stack has an action that can be redone
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TextBox.CopyingToClipboard">
            <summary>
            Raised when content is being copied to the clipboard
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TextBox.CuttingToClipboard">
            <summary>
            Raised when content is being cut to the clipboard
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TextBox.PastingFromClipboard">
            <summary>
            Raised when content is being pasted from the clipboard
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TextBox.TextChanged">
            <summary>
            Occurs asynchronously after text changes and the new text is rendered.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TextBox.TextChanging">
            <summary>
            Occurs synchronously when text starts to change but before it is rendered.
            </summary>
            <remarks>
            This event occurs just after the <see cref="P:Avalonia.Controls.TextBox.Text"/> property value has been updated.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Cut">
            <summary>
            Cuts the current text onto the clipboard
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Copy">
            <summary>
            Copies the current text onto the clipboard
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Paste">
            <summary>
            Pastes the current clipboard text content into the TextBox
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Clear">
            <summary>
            Clears the text in the TextBox
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.SelectAll">
            <summary>
            Select all text in the TextBox
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.RaiseTextChangeEvents">
            <summary>
            Raises both the <see cref="E:Avalonia.Controls.TextBox.TextChanging"/> and <see cref="E:Avalonia.Controls.TextBox.TextChanged"/> events.
            </summary>
            <remarks>
            This must be called after the <see cref="P:Avalonia.Controls.TextBox.Text"/> property is set.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Undo">
            <summary>
            Undoes the first action in the undo stack
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Redo">
            <summary>
            Reapplies the first item on the redo stack
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Avalonia#Controls#Utils#UndoRedoHelper{Avalonia#Controls#TextBox#UndoRedoState}#IUndoRedoHost#OnUndoStackChanged">
            <summary>
            Called from the UndoRedoHelper when the undo stack is modified
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBox.Avalonia#Controls#Utils#UndoRedoHelper{Avalonia#Controls#TextBox#UndoRedoState}#IUndoRedoHost#OnRedoStackChanged">
            <summary>
            Called from the UndoRedoHelper when the redo stack is modified
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TextChangedEventArgs">
            <summary>
            Provides data specific to a <see cref="E:Avalonia.Controls.TextBox.TextChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TextChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,Avalonia.Interactivity.Interactive)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="T:Avalonia.Controls.TextChangingEventArgs">
            <summary>
            Provides data specific to a <see cref="E:Avalonia.Controls.TextBox.TextChanging"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextChangingEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextChangingEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TextChangingEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,Avalonia.Interactivity.Interactive)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextChangingEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="T:Avalonia.Controls.ThemeVariantScope">
            <summary>
            Decorator control that isolates controls subtree with locally defined <see cref="T:Avalonia.Styling.ThemeVariant"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ThemeVariantScope.ActualThemeVariantProperty">
            <inheritdoc cref="F:Avalonia.Styling.ThemeVariant.ActualThemeVariantProperty" />
        </member>
        <member name="F:Avalonia.Controls.ThemeVariantScope.RequestedThemeVariantProperty">
            <inheritdoc cref="F:Avalonia.Styling.ThemeVariant.RequestedThemeVariantProperty" />
        </member>
        <member name="P:Avalonia.Controls.ThemeVariantScope.RequestedThemeVariant">
            <summary>
            Gets or sets the UI theme variant that is used by the control (and its child elements) for resource determination.
            The UI theme you specify with ThemeVariant can override the app-level ThemeVariant.
            </summary>
            <remarks>
            Setting RequestedThemeVariant to <see cref="P:Avalonia.Styling.ThemeVariant.Default"/> will apply parent's actual theme variant on the current scope.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.TickBarPlacement">
            <summary>
            Enum which describes how to position the TickBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBarPlacement.Left">
            <summary>
            Position this tick at the left of target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBarPlacement.Top">
            <summary>
            Position this tick at the top of target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBarPlacement.Right">
            <summary>
            Position this tick at the right of target element.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBarPlacement.Bottom">
            <summary>
            Position this tick at the bottom of target element.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TickBar">
            <summary>
            An element that is used for drawing <see cref="T:Avalonia.Controls.Slider"/>'s Ticks.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.FillProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.Fill"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.Fill">
            <summary>
            Brush used to fill the TickBar's Ticks.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.MinimumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.Minimum"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.Minimum">
            <summary>
            Logical position where the Minimum Tick will be drawn
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.MaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.Maximum"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.Maximum">
            <summary>
            Logical position where the Maximum Tick will be drawn
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.TickFrequencyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.TickFrequency"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.TickFrequency">
            <summary>
            TickFrequency property defines how the tick will be drawn.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.Orientation"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.Orientation">
            <summary>
            TickBar parent's orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.TicksProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.Ticks"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.Ticks">
            <summary>
            The Ticks property contains collection of value of type Double which
            are the logical positions use to draw the ticks.
            The property value is a <see cref="T:Avalonia.Collections.AvaloniaList`1" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.IsDirectionReversedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.IsDirectionReversed"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.IsDirectionReversed">
            <summary>
            The IsDirectionReversed property defines the direction of value incrementation.
            By default, if Tick's orientation is Horizontal, ticks will be drawn from left to right.
            (And, bottom to top for Vertical orientation).
            If IsDirectionReversed is 'true' the direction of the drawing will be in opposite direction.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.PlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.Placement"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.Placement">
            <summary>
            Placement property specified how the Tick will be placed.
            This property affects the way ticks are drawn.
            This property has type of <see cref="T:Avalonia.Controls.TickBarPlacement" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TickBar.ReservedSpaceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TickBar.ReservedSpace"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TickBar.ReservedSpace">
            <summary>
            TickBar will use ReservedSpaceProperty for left and right spacing (for horizontal orientation) or
            top and bottom spacing (for vertical orientation).
            The space on both sides of TickBar is half of specified ReservedSpace.
            This property has type of <see cref="T:Avalonia.Rect" />.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TickBar.Render(Avalonia.Media.DrawingContext)">
             <summary>
             Draw ticks.
             Ticks can be draw in 8 different ways depends on Placement property and IsDirectionReversed property.
            
             This function also draw selection-tick(s) if IsSelectionRangeEnabled is 'true' and
             SelectionStart and SelectionEnd are valid.
            
             The primary ticks (for Minimum and Maximum value) height will be 100% of TickBar's render size (use Width or Height
             depends on Placement property).
            
             The secondary ticks (all other ticks, including selection-tics) height will be 75% of TickBar's render size.
            
             Brush that use to fill ticks is specified by Fill property.
             </summary>
        </member>
        <member name="T:Avalonia.Controls.ToggleSwitch">
            <summary>
            A Toggle Switch control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSwitch.OffContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ToggleSwitch.OffContent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSwitch.OffContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ToggleSwitch.OffContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSwitch.OnContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ToggleSwitch.OnContent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSwitch.OnContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ToggleSwitch.OnContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToggleSwitch.KnobTransitionsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ToggleSwitch.KnobTransitions"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSwitch.OnContent">
            <summary>
            Gets or Sets the Content that is displayed when in the On State.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSwitch.OffContent">
            <summary>
            Gets or Sets the Content that is displayed when in the Off State.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSwitch.OffContentTemplate">
            <summary>
            Gets or Sets the <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/> used to display the <see cref="P:Avalonia.Controls.ToggleSwitch.OffContent"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSwitch.OnContentTemplate">
            <summary>
            Gets or Sets the <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/> used to display the <see cref="P:Avalonia.Controls.ToggleSwitch.OnContent"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ToggleSwitch.KnobTransitions">
            <summary>
            Gets or Sets the <see cref="T:Avalonia.Animation.Transitions"/> of switching knob. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToggleSwitch.OnLoaded(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.ToolTip">
            <summary>
            A control which pops up a hint when a control is hovered.
            </summary>
            <remarks>
            You will probably not want to create a <see cref="T:Avalonia.Controls.ToolTip"/> control directly: if added to
            the tree it will act as a simple <see cref="T:Avalonia.Controls.ContentControl"/> styled to look like a tooltip.
            To add a tooltip to a control, use the <see cref="F:Avalonia.Controls.ToolTip.TipProperty"/> attached property,
            assigning the content that you want displayed.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.TipProperty">
            <summary>
            Defines the ToolTip.Tip attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.IsOpenProperty">
            <summary>
            Defines the ToolTip.IsOpen attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.PlacementProperty">
            <summary>
            Defines the ToolTip.Placement property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.HorizontalOffsetProperty">
            <summary>
            Defines the ToolTip.HorizontalOffset property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.VerticalOffsetProperty">
            <summary>
            Defines the ToolTip.VerticalOffset property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.ShowDelayProperty">
            <summary>
            Defines the ToolTip.ShowDelay property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.ToolTipProperty">
            <summary>
            Stores the current <see cref="T:Avalonia.Controls.ToolTip"/> instance in the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ToolTip"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetTip(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.Tip attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            The content to be displayed in the control's tooltip.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetTip(Avalonia.Controls.Control,System.Object)">
            <summary>
            Sets the value of the ToolTip.Tip attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">The content to be displayed in the control's tooltip.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetIsOpen(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.IsOpen attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating whether the tool tip is visible.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetIsOpen(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the ToolTip.IsOpen attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating whether the tool tip is visible.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetPlacement(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.Placement attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating how the tool tip is positioned.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetPlacement(Avalonia.Controls.Control,Avalonia.Controls.PlacementMode)">
            <summary>
            Sets the value of the ToolTip.Placement attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating how the tool tip is positioned.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetHorizontalOffset(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.HorizontalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating how the tool tip is positioned.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetHorizontalOffset(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the ToolTip.HorizontalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating how the tool tip is positioned.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetVerticalOffset(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.VerticalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating how the tool tip is positioned.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetVerticalOffset(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the ToolTip.VerticalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating how the tool tip is positioned.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetShowDelay(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.ShowDelay attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating the time, in milliseconds, before a tool tip opens.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetShowDelay(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Sets the value of the ToolTip.ShowDelay attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating the time, in milliseconds, before a tool tip opens.</param>
        </member>
        <member name="T:Avalonia.Controls.ToolTipService">
            <summary>
            Handles <see cref="T:Avalonia.Controls.ToolTip"/> interaction with controls.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTipService.TipChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            called when the <see cref="F:Avalonia.Controls.ToolTip.TipProperty"/> property changes on a control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTipService.ControlPointerEntered(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer enters a control with an attached tooltip.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTipService.ControlPointerExited(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer leaves a control with an attached tooltip.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.TopLevel">
            <summary>
            Base class for top-level widgets.
            </summary>
            <remarks>
            This class acts as a base for top level widget.
            It handles scheduling layout, styling and rendering as well as
            tracking the widget's <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.ClientSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.FrameSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.FrameSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.PointerOverElementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.IInputRoot.PointerOverElement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.TransparencyLevelHintProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.TransparencyLevelHint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.ActualTransparencyLevelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.ActualTransparencyLevel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.TransparencyBackgroundFallbackProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.TransparencyBackgroundFallback"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.ActualThemeVariantProperty">
            <inheritdoc cref="F:Avalonia.Controls.ThemeVariantScope.ActualThemeVariantProperty" />
        </member>
        <member name="F:Avalonia.Controls.TopLevel.RequestedThemeVariantProperty">
            <inheritdoc cref="F:Avalonia.Controls.ThemeVariantScope.RequestedThemeVariantProperty" />
        </member>
        <member name="F:Avalonia.Controls.TopLevel.SystemBarColorProperty">
            <summary>
            Defines the SystemBarColor attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.BackRequestedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.TopLevel.BackRequested"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#ctor(Avalonia.Platform.ITopLevelImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
            <param name="impl">The platform-specific window implementation.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#ctor(Avalonia.Platform.ITopLevelImpl,Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
            <param name="impl">The platform-specific window implementation.</param>
            <param name="dependencyResolver">
            The dependency resolver to use. If null the default dependency resolver will be used.
            </param>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Opened">
            <summary>
            Fired when the window is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Closed">
            <summary>
            Fired when the window is closed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.ScalingChanged">
            <summary>
            Gets or sets a method called when the TopLevel's scaling changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.ClientSize">
            <summary>
            Gets or sets the client size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.FrameSize">
            <summary>
            Gets or sets the total size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.TransparencyLevelHint">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.WindowTransparencyLevel"/> that the TopLevel should use when possible.
            Accepts multiple values which are applied in a fallback order.
            For instance, with "Mica, Blur" Mica will be applied only on platforms where it is possible,
            and Blur will be used on the rest of them. Default value is an empty array or "None".    
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.ActualTransparencyLevel">
            <summary>
            Gets the achieved <see cref="T:Avalonia.Controls.WindowTransparencyLevel"/> that the platform was able to provide.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.TransparencyBackgroundFallback">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> that transparency will blend with when transparency is not supported.
            By default this is a solid white brush.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.RequestedThemeVariant">
            <inheritdoc cref="P:Avalonia.Controls.ThemeVariantScope.RequestedThemeVariant"/>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.BackRequested">
            <summary>
            Occurs when physical Back Button is pressed or a back navigation has been requested.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.TryGetPlatformHandle">
            <summary>
            Trys to get the platform handle for the TopLevel-derived control.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Platform.IPlatformHandle"/> describing the window handle, or null if the handle
            could not be retrieved.
            </returns>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Renderer">
            <summary>
            Gets the renderer for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.RendererDiagnostics">
            <summary>
            Gets a value indicating whether the renderer should draw specific diagnostics.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.AccessKeyHandler">
            <summary>
            Gets the access key handler for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#KeyboardNavigationHandler">
            <summary>
            Gets or sets the keyboard navigation handler for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#PointerOverElement">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#ShowAccessKeys">
            <summary>
            Gets or sets a value indicating whether access keys are shown in the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.SetSystemBarColor(Avalonia.Controls.Control,Avalonia.Media.SolidColorBrush)">
            <summary>
            Helper for setting the color of the platform's system bars
            </summary>
            <param name="control">The main view attached to the toplevel, or the toplevel</param>
            <param name="color">The color to set</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.GetSystemBarColor(Avalonia.Controls.Control)">
            <summary>
            Helper for getting the color of the platform's system bars
            </summary>
            <param name="control">The main view attached to the toplevel, or the toplevel</param>
            <returns>The current color of the platform's system bars</returns>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Layout#ILayoutRoot#LayoutScaling">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.RenderScaling">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.StorageProvider">
            <summary>
            File System storage service used for file pickers and bookmarks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Clipboard">
            <summary>
            Gets the platform's clipboard implementation
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.FocusManager">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Controls.TopLevel.PlatformSettings">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#PointToClient(Avalonia.PixelPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#PointToScreen(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.GetTopLevel(Avalonia.Visual)">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.TopLevel" /> for which the given <see cref="T:Avalonia.Visual"/> is hosted in.
            </summary>
            <param name="visual">The visual to query its TopLevel</param>
            <returns>The TopLevel</returns>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.RequestPlatformInhibition(Avalonia.Controls.PlatformInhibitionType,System.String)">
            <summary>
            Requests a <see cref="T:Avalonia.Controls.PlatformInhibitionType"/> to be inhibited.
            The behavior remains inhibited until the return value is disposed.
            The available set of <see cref="T:Avalonia.Controls.PlatformInhibitionType"/>s depends on the platform.
            If a behavior is inhibited on a platform where this type is not supported the request will have no effect.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.RequestAnimationFrame(System.Action{System.TimeSpan})">
            <summary>
            Enqueues a callback to be called on the next animation tick
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.CreateLayoutManager">
            <summary>
            Creates the layout manager for this <see cref="T:Avalonia.Controls.TopLevel" />.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandlePaint(Avalonia.Rect)">
            <summary>
            Handles a paint notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="rect">The dirty area.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleClosed">
            <summary>
            Handles a closed notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Closed"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleResized(Avalonia.Size,Avalonia.Controls.WindowResizeReason)">
            <summary>
            Handles a resize notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="clientSize">The new client size.</param>
            <param name="reason">The reason for the resize.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleScalingChanged(System.Double)">
            <summary>
            Handles a window scaling change notification from 
            <see cref="P:Avalonia.Platform.ITopLevelImpl.ScalingChanged"/>.
            </summary>
            <param name="scaling">The window scaling.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.OnOpened(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.TopLevel.Opened"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.TopLevel.Closed"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.TryGetService``1(Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Tries to get a service from an <see cref="T:Avalonia.IAvaloniaDependencyResolver"/>, logging a
            warning if not found.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="resolver">The resolver.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleInput(Avalonia.Input.Raw.RawInputEventArgs)">
            <summary>
            Handles input from <see cref="P:Avalonia.Platform.ITopLevelImpl.Input"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.TopLevel.LayoutDiagnosticBridge">
            <summary>
            Provides layout pass timing from the layout manager to the renderer, for diagnostics purposes.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TransitioningContentControl">
            <summary>
            Displays <see cref="P:Avalonia.Controls.ContentControl.Content"/> according to an <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>,
            using a <see cref="P:Avalonia.Controls.TransitioningContentControl.PageTransition"/> to move between the old and new content. 
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TransitioningContentControl.PageTransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TransitioningContentControl.PageTransition"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TransitioningContentControl.PageTransition">
            <summary>
            Gets or sets the animation played when content appears and disappears.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TrayIcon.Clicked">
            <summary>
            Raised when the TrayIcon is clicked.
            Note, this is only supported on Win32 and some Linux DEs, 
            on OSX this event is not raised.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TrayIcon.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TrayIcon.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.IconsProperty">
            <summary>
            Defines the <see cref="T:Avalonia.Controls.TrayIcons"/> attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.MenuProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TrayIcon.Menu"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TrayIcon.Icon"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.ToolTipTextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TrayIcon.ToolTipText"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TrayIcon.IsVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TrayIcon.IsVisible"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TrayIcon.Command">
            <summary>
            Gets or sets the <see cref="P:Avalonia.Controls.TrayIcon.Command"/> property of a TrayIcon.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TrayIcon.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Avalonia.Controls.TrayIcon.Command"/> property of a
            <see cref="T:Avalonia.Controls.TrayIcon"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TrayIcon.Menu">
            <summary>
            Gets or sets the Menu of the TrayIcon.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TrayIcon.Icon">
            <summary>
            Gets or sets the icon of the TrayIcon.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TrayIcon.ToolTipText">
            <summary>
            Gets or sets the tooltip text of the TrayIcon.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TrayIcon.IsVisible">
            <summary>
            Gets or sets the visibility of the TrayIcon.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TrayIcon.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.TrayIcon.Dispose">
            <summary>
            Disposes the tray icon (removing it from the tray area).
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TreeView">
            <summary>
            Displays a hierarchical tree of data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.AutoScrollToSelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectionMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TreeView"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TreeView.SelectionChanged">
            <summary>
            Occurs when the control's selection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.TreeItemContainerGenerator"/> for the tree view.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.AutoScrollToSelectedItem">
            <summary>
            Gets or sets a value indicating whether to automatically scroll to newly selected items.
            </summary>
            <remarks>
            This property is of limited use with <see cref="T:Avalonia.Controls.TreeView"/> as it will only scroll
            to realized items. To scroll to a non-expanded item, you need to ensure that its
            ancestors are expanded.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <remarks>
            Note that setting this property only currently works if the item is expanded to be visible.
            To select non-expanded nodes use `Selection.SelectedIndex`.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.ExpandSubTree(Avalonia.Controls.TreeViewItem)">
            <summary>
            Expands the specified <see cref="T:Avalonia.Controls.TreeViewItem"/> all descendent <see cref="T:Avalonia.Controls.TreeViewItem"/>s.
            </summary>
            <param name="item">The item to expand.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.CollapseSubTree(Avalonia.Controls.TreeViewItem)">
            <summary>
            Collapse the specified <see cref="T:Avalonia.Controls.TreeViewItem"/> all descendent <see cref="T:Avalonia.Controls.TreeViewItem"/> s.
            </summary>
            <param name="item">The item to collapse.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.SelectAll">
            <summary>
            Selects all items in the <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
            <remarks>
            Note that this method only selects nodes currently visible due to their parent nodes
            being expanded: it does not expand nodes.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UnselectAll">
            <summary>
            Deselects all items in the <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.SubscribeToSelectedItems">
            <summary>
            Subscribes to the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> CollectionChanged event is raised.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UnsubscribeFromSelectedItems">
            <summary>
            Unsubscribes from the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UpdateSelectionFromContainer(Avalonia.Controls.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for an item based on user interaction.
            </summary>
            <param name="container">The container.</param>
            <param name="select">Whether the item should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <param name="rightButton">Whether the event is a right-click.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.FindFirstNode(Avalonia.Controls.TreeView,Avalonia.Controls.TreeViewItem,Avalonia.Controls.TreeViewItem)">
            <summary>
            Find which node is first in hierarchy.
            </summary>
            <param name="treeView">Search root.</param>
            <param name="nodeA">Nodes to find.</param>
            <param name="nodeB">Node to find.</param>
            <returns>Found first node.</returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.GetItemsInRange(Avalonia.Controls.TreeViewItem,Avalonia.Controls.TreeViewItem)">
            <summary>
            Returns all items that belong to containers between <paramref name="from"/> and <paramref name="to"/>.
            The range is inclusive.
            </summary>
            <param name="from">From container.</param>
            <param name="to">To container.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UpdateSelectionFromEventSource(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection based on an event that may have originated in a container that 
            belongs to the control.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <param name="rightButton">Whether the event is a right-click.</param>
            <returns>
            True if the event originated from a container that belongs to the control; otherwise
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.GetContainerFromEventSource(System.Object)">
            <summary>
            Tries to get the container that was the source of an event.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <returns>The container or null if the event did not originate in a container.</returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.ContainerSelectionChanged(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a container raises the 
            <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/>.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.MarkContainerSelected(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets a container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="selected">Whether the control is selected</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.SynchronizeItems(System.Collections.IList,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Makes a list of objects equal another (though doesn't preserve order).
            </summary>
            <param name="items">The items collection.</param>
            <param name="desired">The desired items.</param>
        </member>
        <member name="T:Avalonia.Controls.TreeViewItem">
            <summary>
            An item in a <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.IsExpandedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.LevelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.Level"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TreeViewItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the item is expanded to show its children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.Level">
            <summary>
            Gets the level/indentation of the item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnHeaderDoubleTapped(Avalonia.Input.TappedEventArgs)">
            <summary>
            Invoked when the <see cref="E:Avalonia.Input.InputElement.DoubleTapped"/> event occurs in the header.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.UserControl">
            <summary>
            Provides the base class for defining a new control that encapsulates related existing controls and provides its own logic.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Utils.ISelectionAdapter">
            <summary>
            Defines an item collection, selection members, and key handling for the
            selection adapter contained in the drop-down portion of an
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.ISelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The currently selected item.</value>
        </member>
        <member name="E:Avalonia.Controls.Utils.ISelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.Utils.ISelectionAdapter.SelectedItem" />
            property value changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.ISelectionAdapter.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate content for the
            selection adapter.
            </summary>
            <value>The collection that is used to generate content for the
            selection adapter.</value>
        </member>
        <member name="E:Avalonia.Controls.Utils.ISelectionAdapter.Commit">
            <summary>
            Occurs when a selected item is not cancelled and is committed as the
            selected item.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Utils.ISelectionAdapter.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.ISelectionAdapter.HandleKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event that occurs
            when a key is pressed while the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has focus.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Input.KeyEventArgs" />
            that contains data about the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event.</param>
        </member>
        <member name="T:Avalonia.Controls.Utils.RealizedStackElements">
            <summary>
            Stores the realized element state for a virtualizing panel that arranges its children
            in a stack layout, such as <see cref="T:Avalonia.Controls.VirtualizingStackPanel"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.RealizedStackElements.Count">
            <summary>
            Gets the number of realized elements.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.RealizedStackElements.FirstIndex">
            <summary>
            Gets the index of the first realized element, or -1 if no elements are realized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.RealizedStackElements.LastIndex">
            <summary>
            Gets the index of the last realized element, or -1 if no elements are realized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.RealizedStackElements.Elements">
            <summary>
            Gets the elements.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.RealizedStackElements.SizeU">
            <summary>
            Gets the sizes of the elements on the primary axis.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.RealizedStackElements.StartU">
            <summary>
            Gets the position of the first element on the primary axis.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.Add(System.Int32,Avalonia.Controls.Control,System.Double,System.Double)">
            <summary>
            Adds a newly realized element to the collection.
            </summary>
            <param name="index">The index of the element.</param>
            <param name="element">The element.</param>
            <param name="u">The position of the elemnt on the primary axis.</param>
            <param name="sizeU">The size of the element on the primary axis.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.GetElement(System.Int32)">
            <summary>
            Gets the element at the specified index, if realized.
            </summary>
            <param name="index">The index in the source collection of the element to get.</param>
            <returns>The element if realized; otherwise null.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.GetOrEstimateAnchorElementForViewport(System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
            Gets or estimates the index and start U position of the anchor element for the
            specified viewport.
            </summary>
            <param name="viewportStartU">The U position of the start of the viewport.</param>
            <param name="viewportEndU">The U position of the end of the viewport.</param>
            <param name="itemCount">The number of items in the list.</param>
            <param name="estimatedElementSizeU">The current estimated element size.</param>
            <returns>
            A tuple containing:
            - The index of the anchor element, or -1 if an anchor could not be determined
            - The U position of the start of the anchor element, if determined
            </returns>
            <remarks>
            This method tries to find an existing element in the specified viewport from which
            element realization can start. Failing that it estimates the first element in the
            viewport.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.GetElementU(System.Int32)">
            <summary>
            Gets the position of the element with the requested index on the primary axis, if realized.
            </summary>
            <returns>
            The position of the element, or NaN if the element is not realized.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.EstimateElementSizeU">
            <summary>
            Estimates the average U size of all elements in the source collection based on the
            realized elements.
            </summary>
            <returns>
            The estimated U size of an element, or -1 if not enough information is present to make
            an estimate.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.GetIndex(Avalonia.Controls.Control)">
            <summary>
            Gets the index of the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The index or -1 if the element is not present in the collection.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.ItemsInserted(System.Int32,System.Int32,System.Action{Avalonia.Controls.Control,System.Int32,System.Int32})">
            <summary>
            Updates the elements in response to items being inserted into the source collection.
            </summary>
            <param name="index">The index in the source collection of the insert.</param>
            <param name="count">The number of items inserted.</param>
            <param name="updateElementIndex">A method used to update the element indexes.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.ItemsRemoved(System.Int32,System.Int32,System.Action{Avalonia.Controls.Control,System.Int32,System.Int32},System.Action{Avalonia.Controls.Control})">
            <summary>
            Updates the elements in response to items being removed from the source collection.
            </summary>
            <param name="index">The index in the source collection of the remove.</param>
            <param name="count">The number of items removed.</param>
            <param name="updateElementIndex">A method used to update the element indexes.</param>
            <param name="recycleElement">A method used to recycle elements.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.ItemsReset(System.Action{Avalonia.Controls.Control})">
            <summary>
            Recycles all elements in response to the source collection being reset.
            </summary>
            <param name="recycleElement">A method used to recycle elements.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.RecycleElementsBefore(System.Int32,System.Action{Avalonia.Controls.Control,System.Int32})">
            <summary>
            Recycles elements before a specific index.
            </summary>
            <param name="index">The index in the source collection of new first element.</param>
            <param name="recycleElement">A method used to recycle elements.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.RecycleElementsAfter(System.Int32,System.Action{Avalonia.Controls.Control,System.Int32})">
            <summary>
            Recycles elements after a specific index.
            </summary>
            <param name="index">The index in the source collection of new last element.</param>
            <param name="recycleElement">A method used to recycle elements.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.RecycleAllElements(System.Action{Avalonia.Controls.Control,System.Int32})">
            <summary>
            Recycles all realized elements.
            </summary>
            <param name="recycleElement">A method used to recycle elements.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.RealizedStackElements.ResetForReuse">
            <summary>
            Resets the element list and prepares it for reuse.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter">
            <summary>
            Represents the selection adapter contained in the drop-down portion of
            an <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter._selector">
            <summary>
            The SelectingItemsControl instance.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.IgnoringSelectionChanged">
            <summary>
            Gets or sets a value indicating whether the selection change event 
            should not be fired.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectorControl">
            <summary>
            Gets or sets the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
            <value>The underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.</value>
        </member>
        <member name="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedItem" />
            property value changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Commit">
            <summary>
            Occurs when an item is selected and is committed to the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Cancel">
            <summary>
            Occurs when a selection is canceled before it is committed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter" />
            class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.#ctor(Avalonia.Controls.Primitives.SelectingItemsControl)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapterr" />
            class with the specified
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
            <param name="selector">The
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" /> control
            to wrap as a
            <see cref="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter" />.</param>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item of the selection adapter.
            </summary>
            <value>The selected item of the underlying selection adapter.</value>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the content of
            the selection adapter.
            </summary>
            <value>The collection used to generate content for the selection
            adapter.</value>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.ResetScrollViewer">
            <summary>
            If the control contains a ScrollViewer, this will reset the viewer 
            to be scrolled to the top.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnSelectorPointerReleased(System.Object,Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Handles the mouse left button up event on the selector control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnSelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event on the SelectingItemsControl control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedIndexIncrement">
            <summary>
            Increments the
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex" />
            property of the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedIndexDecrement">
            <summary>
            Decrements the
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex" />
            property of the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.HandleKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event that occurs
            when a key is pressed while the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has focus.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Input.KeyEventArgs" />
            that contains data about the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCommit">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Commit" />
            event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCommit(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Fires the Commit event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCancel">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Cancel" />
            event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCancel(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Fires the Cancel event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.AfterAdapterAction">
            <summary>
            Change the selection after the actions are complete.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.UndoRedoHelper`1.Limit">
            <summary>
            Maximum number of states this helper can store for undo/redo.
            If -1, no limit is imposed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Viewbox">
            <summary>
            Viewbox is used to scale single child to fit in the available space.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Viewbox.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Viewbox.Stretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Viewbox.StretchDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Viewbox.StretchDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Viewbox.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Viewbox.Child"/> property
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Viewbox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Viewbox"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Viewbox.Stretch">
            <summary>
            Gets or sets the stretch mode, 
            which determines how child fits into the available space.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Viewbox.StretchDirection">
            <summary>
            Gets or sets a value controlling in what direction contents will be stretched.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Viewbox.Child">
            <summary>
            Gets or sets the child of the Viewbox
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Viewbox.InternalTransform">
            <summary>
            Gets or sets the transform applied to the container visual that
            hosts the child of the Viewbox
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Viewbox.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Viewbox.MeasureOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Viewbox.ArrangeOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.Viewbox.ViewboxContainer">
            <summary>
            A simple container control which hosts its child as a visual but not logical child.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.VirtualizingCarouselPanel">
            <summary>
            A panel used by <see cref="T:Avalonia.Controls.Carousel"/> to display the current item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.VirtualizingPanel">
            <summary>
            Base class for panels that can be used to virtualize items for an <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemsControl"/>.
            </summary>
            <remarks>
            Panels should implement the abstract members of this class to provide virtualization of
            items in a <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemsControl"/>. Derived panels can manage scrolling by implementing
            <see cref="T:Avalonia.Controls.Primitives.ILogicalScrollable"/> or by listening to the 
            <see cref="E:Avalonia.Layout.Layoutable.EffectiveViewportChanged"/> event.
            
            The methods on the <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemContainerGenerator"/> should be used to create, prepare and
            clear containers for items.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingPanel.ItemContainerGenerator">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemContainerGenerator"/> for this <see cref="T:Avalonia.Controls.VirtualizingPanel"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingPanel.Items">
            <summary>
            Gets the items to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingPanel.ItemsControl">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemsControl"/> that the panel is displaying items for.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.ScrollIntoView(System.Int32)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>
            The element with the specified index, or null if the element could not be brought into view.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the container for the item at the specified index.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>
            The container for the item at the specified index within the item collection, if the
            item is realized; otherwise, null.
            </returns>
            <remarks>
            Note for implementors: if the item at the the specified index is an ItemIsOwnContainer
            item that has previously been realized, then the item should be returned even if it
            currently falls outside the realized viewport.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.IndexFromContainer(Avalonia.Controls.Control)">
            <summary>
            Returns the index to the item that has the specified realized container.
            </summary>
            <param name="container">The generated container to retrieve the item index for.</param>
            <returns>
            The index to the item that corresponds to the specified realized container, or -1 if 
            <paramref name="container"/> is not found.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.GetRealizedContainers">
            <summary>
            Gets the currently realized containers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.OnItemsControlChanged(Avalonia.Controls.ItemsControl)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemsControl"/> that owns the panel changes.
            </summary>
            <param name="oldValue">
            The old value of the <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemsControl"/> property.
            </param>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.OnItemsChanged(System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection of the owner
            <see cref="P:Avalonia.Controls.VirtualizingPanel.ItemsControl"/> changes.
            </summary>
            <param name="items">The items.</param>
            <param name="e">The event args.</param>
            <remarks>
            This method is called a <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> event is raised by
            the items, or when the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> property is assigned a
            new collection, in which case the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> will
            be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.AddInternalChild(Avalonia.Controls.Control)">
            <summary>
            Adds the specified <see cref="T:Avalonia.Controls.Control"/> to the <see cref="P:Avalonia.Controls.Panel.Children"/> collection
            of a <see cref="T:Avalonia.Controls.VirtualizingPanel"/> element.
            </summary>
            <param name="control">The control to add to the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.InsertInternalChild(System.Int32,Avalonia.Controls.Control)">
            <summary>
            Adds the specified <see cref="T:Avalonia.Controls.Control"/> to the <see cref="P:Avalonia.Controls.Panel.Children"/> collection
            of a <see cref="T:Avalonia.Controls.VirtualizingPanel"/> element at the specified index position.
            </summary>
            <param name="index">
            The index position within the collection at which the child element is inserted.
            </param>
            <param name="control">The control to add to the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.RemoveInternalChild(Avalonia.Controls.Control)">
            <summary>
            Removes a child element from the <see cref="P:Avalonia.Controls.Panel.Children"/> collection.
            </summary>
            <param name="child">The child to remove/</param>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingPanel.RemoveInternalChildRange(System.Int32,System.Int32)">
            <summary>
            Removes child elements from the <see cref="P:Avalonia.Controls.Panel.Children"/> collection.
            </summary>
            <param name="index">
            The beginning index position within the collection at which the first child element is
            removed.
            </param>
            <param name="count">The number of child elements to remove.</param>
        </member>
        <member name="T:Avalonia.Controls.VirtualizingStackPanel">
            <summary>
            Arranges and virtualizes content on a single line that is oriented either horizontally or vertically.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.VirtualizingStackPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.VirtualizingStackPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.VirtualizingStackPanel.AreHorizontalSnapPointsRegularProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.VirtualizingStackPanel.AreHorizontalSnapPointsRegular"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.VirtualizingStackPanel.AreVerticalSnapPointsRegularProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.VirtualizingStackPanel.AreVerticalSnapPointsRegular"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.VirtualizingStackPanel.HorizontalSnapPointsChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.VirtualizingStackPanel.HorizontalSnapPointsChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.VirtualizingStackPanel.VerticalSnapPointsChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.VirtualizingStackPanel.VerticalSnapPointsChanged"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingStackPanel.Orientation">
            <summary>
            Gets or sets the axis along which items are laid out.
            </summary>
            <value>
            One of the enumeration values that specifies the axis along which items are laid out.
            The default is Vertical.
            </value>
        </member>
        <member name="E:Avalonia.Controls.VirtualizingStackPanel.HorizontalSnapPointsChanged">
            <summary>
            Occurs when the measurements for horizontal snap points change.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.VirtualizingStackPanel.VerticalSnapPointsChanged">
            <summary>
            Occurs when the measurements for vertical snap points change.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingStackPanel.AreHorizontalSnapPointsRegular">
            <summary>
            Gets or sets whether the horizontal snap points for the <see cref="T:Avalonia.Controls.VirtualizingStackPanel"/> are equidistant from each other.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingStackPanel.AreVerticalSnapPointsRegular">
            <summary>
            Gets or sets whether the vertical snap points for the <see cref="T:Avalonia.Controls.VirtualizingStackPanel"/> are equidistant from each other.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingStackPanel.FirstRealizedIndex">
            <summary>
            Gets the index of the first realized element, or -1 if no elements are realized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.VirtualizingStackPanel.LastRealizedIndex">
            <summary>
            Gets the index of the last realized element, or -1 if no elements are realized.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingStackPanel.GetIrregularSnapPoints(Avalonia.Layout.Orientation,Avalonia.Controls.Primitives.SnapPointsAlignment)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.VirtualizingStackPanel.GetRegularSnapPoints(Avalonia.Layout.Orientation,Avalonia.Controls.Primitives.SnapPointsAlignment,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.SizeToContent">
            <summary>
            Determines how a <see cref="T:Avalonia.Controls.Window"/> will size itself to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Manual">
            <summary>
            The window will not automatically size itself to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Width">
            <summary>
            The window will size itself horizontally to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Height">
            <summary>
            The window will size itself vertically to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.WidthAndHeight">
            <summary>
            The window will size itself horizontally and vertically to fit its content.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SystemDecorations">
            <summary>
            Determines system decorations (title bar, border, etc) for a <see cref="T:Avalonia.Controls.Window"/>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SystemDecorations.None">
            <summary>
            No decorations
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SystemDecorations.BorderOnly">
            <summary>
            Window border without titlebar
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SystemDecorations.Full">
            <summary>
            Fully decorated (default)
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Window">
            <summary>
            A top-level window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.SizeToContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.SizeToContent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.ExtendClientAreaToDecorationsHint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.IsExtendedIntoWindowDecorations"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowDecorationMarginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.WindowDecorationMargin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.SystemDecorationsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.SystemDecorations"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.ShowActivatedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.ShowActivated"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.ShowInTaskbarProperty">
            <summary>
            Enables or disables the taskbar icon
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowStateProperty">
            <summary>
            Represents the current window state (normal, minimized, maximized)
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.TitleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.Title"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.Icon"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowStartupLocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.WindowStartupLocation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowClosedEvent">
            <summary>
            Routed event that can be used for global tracking of window destruction
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowOpenedEvent">
            <summary>
            Routed event that can be used for global tracking of opening windows
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#ctor(Avalonia.Platform.IWindowImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
            <param name="impl">The window implementation.</param>
        </member>
        <member name="P:Avalonia.Controls.Window.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.OwnedWindows">
            <summary>
            Gets a collection of child windows owned by this window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.SizeToContent">
            <summary>
            Gets or sets a value indicating how the window will size itself to fit its content.
            </summary>
            <remarks>
            If <see cref="P:Avalonia.Controls.Window.SizeToContent"/> has a value other than <see cref="F:Avalonia.Controls.SizeToContent.Manual"/>,
            <see cref="P:Avalonia.Controls.Window.SizeToContent"/> is automatically set to <see cref="F:Avalonia.Controls.SizeToContent.Manual"/>
            if a user resizes the window by using the resize grip or dragging the border.
            
            NOTE: Because of a limitation of X11, <see cref="P:Avalonia.Controls.Window.SizeToContent"/> will be reset on X11 to
            <see cref="F:Avalonia.Controls.SizeToContent.Manual"/> on any resize - including the resize that happens when
            the window is first shown. This is because X11 resize notifications are asynchronous and
            there is no way to know whether a resize came from the user or the layout system. To avoid
            this, consider setting <see cref="P:Avalonia.Controls.Window.CanResize"/> to false, which will disable user resizing
            of the window.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Window.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.ExtendClientAreaToDecorationsHint">
            <summary>
            Gets or sets if the ClientArea is Extended into the Window Decorations (chrome or border).
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.ExtendClientAreaChromeHints">
            <summary>
            Gets or Sets the <see cref="T:Avalonia.Platform.ExtendClientAreaChromeHints"/> that control
            how the chrome looks when the client area is extended.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHint">
            <summary>
            Gets or Sets the TitlebarHeightHint for when the client area is extended.
            A value of -1 will cause the titlebar to be auto sized to the OS default.
            Any other positive value will cause the titlebar to assume that height.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.IsExtendedIntoWindowDecorations">
            <summary>
            Gets if the ClientArea is Extended into the Window Decorations.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.WindowDecorationMargin">
            <summary>
            Gets the WindowDecorationMargin.
            This tells you the thickness around the window that is used by borders and the titlebar.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.OffScreenMargin">
            <summary>
            Gets the window margin that is hidden off the screen area.
            This is generally only the case on Windows when in Maximized where the window border
            is hidden off the screen. This Margin may be used to ensure user content doesnt overlap this space.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.SystemDecorations">
            <summary>
            Sets the system decorations (title bar, border, etc)
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.ShowActivated">
            <summary>
            Gets or sets a value that indicates whether a window is activated when first shown. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.ShowInTaskbar">
            <summary>
            Enables or disables the taskbar icon
            </summary>
            
        </member>
        <member name="P:Avalonia.Controls.Window.WindowState">
            <summary>
            Gets or sets the minimized/maximized state of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.CanResize">
            <summary>
            Enables or disables resizing of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Icon">
            <summary>
            Gets or sets the icon of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.WindowStartupLocation">
            <summary>
            Gets or sets the startup location of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Position">
            <summary>
            Gets or sets the window position in screen coordinates.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.BeginMoveDrag(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Starts moving a window with left button being held. Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.BeginResizeDrag(Avalonia.Controls.WindowEdge,Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Starts resizing a window. This function is used if an application has window resizing controls. 
            Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.StyleKeyOverride">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Window.Closing">
            <summary>
            Fired before a window is closed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Close(System.Object)">
            <summary>
            Closes a dialog window with the specified result.
            </summary>
            <param name="dialogResult">The dialog result.</param>
            <remarks>
            When the window is shown with the <see cref="M:Avalonia.Controls.Window.ShowDialog``1(Avalonia.Controls.Window)"/>
            or <see cref="M:Avalonia.Controls.Window.ShowDialog``1(Avalonia.Controls.Window)"/> method, the
            resulting task will produce the <see cref="F:Avalonia.Controls.Window._dialogResult"/> value when the window
            is closed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Window.HandleClosing(Avalonia.Controls.WindowCloseReason)">
            <summary>
            Handles a closing notification from <see cref="P:Avalonia.Platform.IWindowImpl.Closing"/>.
            <returns>true if closing is cancelled. Otherwise false.</returns>
            </summary>
            <param name="reason">The reason the window is closing.</param>
        </member>
        <member name="M:Avalonia.Controls.Window.Hide">
            <summary>
            Hides the window but does not close it.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Show">
            <summary>
            Shows the window.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The window has already been closed.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.Window.Show(Avalonia.Controls.Window)">
            <summary>
            Shows the window as a child of <paramref name="owner"/>.
            </summary>
            <param name="owner">Window that will be the owner of the shown window.</param>
            <exception cref="T:System.InvalidOperationException">
            The window has already been closed.
            </exception>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog(Avalonia.Controls.Window)">
            <summary>
            Shows the window as a dialog.
            </summary>
            <param name="owner">The dialog's owner window.</param>
            <exception cref="T:System.InvalidOperationException">
            The window has already been closed.
            </exception>
            <returns>
            A task that can be used to track the lifetime of the dialog.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog``1(Avalonia.Controls.Window)">
            <summary>
            Shows the window as a dialog.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the dialog.
            </typeparam>
            <param name="owner">The dialog's owner window.</param>
            <returns>.
            A task that can be used to retrieve the result of the dialog when it closes.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.HandleResized(Avalonia.Size,Avalonia.Controls.WindowResizeReason)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.OnClosing(Avalonia.Controls.WindowClosingEventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.Window.Closing"/> event.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            A type that derives from <see cref="T:Avalonia.Controls.Window"/>  may override <see cref="M:Avalonia.Controls.Window.OnClosing(Avalonia.Controls.WindowClosingEventArgs)"/>. The
            overridden method must call <see cref="M:Avalonia.Controls.Window.OnClosing(Avalonia.Controls.WindowClosingEventArgs)"/> on the base class if the
            <see cref="E:Avalonia.Controls.Window.Closing"/> event needs to be raised.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.WindowBase">
            <summary>
            Base class for top-level windows.
            </summary>
            <remarks>
            This class acts as a base for top level windows such as <see cref="T:Avalonia.Controls.Window"/> and
            <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/>. It handles scheduling layout, styling and rendering as well as
            tracking the window <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/> and <see cref="P:Avalonia.Controls.WindowBase.IsActive"/> state.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.WindowBase.IsActiveProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WindowBase.IsActive"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowBase.OwnerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WindowBase.Owner"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.Activated">
            <summary>
            Fired when the window is activated.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.Deactivated">
            <summary>
            Fired when the window is deactivated.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.PositionChanged">
            <summary>
            Fired when the window position is changed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.Resized">
            <summary>
            Occurs when the window is resized.
            </summary>
            <remarks>
            Although this event is similar to the <see cref="E:Avalonia.Controls.Control.SizeChanged"/> event, they are
            conceptually different:
            
            - <see cref="E:Avalonia.Controls.WindowBase.Resized"/> is a window-level event, fired when a resize notification arrives
              from the platform windowing subsystem. The event args contain details of the source of
              the resize event in the <see cref="P:Avalonia.Controls.WindowResizedEventArgs.Reason"/> property. This
              event is raised before layout has been run on the window's content.
            - <see cref="E:Avalonia.Controls.Control.SizeChanged"/> is a layout-level event, fired when a layout pass
              completes on a control. <see cref="E:Avalonia.Controls.Control.SizeChanged"/> is present on all controls
              and is fired when the control's size changes for any reason, including a
              <see cref="E:Avalonia.Controls.WindowBase.Resized"/> event in the case of a Window.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.IsActive">
            <summary>
            Gets a value that indicates whether the window is active.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.Owner">
            <summary>
            Gets or sets the owner of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.Topmost">
            <summary>
            Gets or sets whether this window appears on top of all other windows
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.DesktopScaling">
            <summary>
            Gets the scaling factor for Window positioning and sizing.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.EnsureInitialized">
            <summary>
            Ensures that the window is initialized.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.OnOpened(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.OnResized(Avalonia.Controls.WindowResizedEventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.WindowBase.Resized"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandleResized(Avalonia.Size,Avalonia.Controls.WindowResizeReason)">
            <summary>
            Handles a resize notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="clientSize">The new client size.</param>
            <param name="reason">The reason for the resize.</param>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.MeasureCore(Avalonia.Size)">
            <summary>
            Overrides the core measure logic for windows.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The measured size.</returns>
            <remarks>
            The layout logic for top-level windows is different than for other controls because
            they don't have a parent, meaning that many layout properties handled by the default
            MeasureCore (such as margins and alignment) make no sense.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.ArrangeCore(Avalonia.Rect)">
            <summary>
            Overrides the core arrange logic for windows.
            </summary>
            <param name="finalRect">The final arrange rect.</param>
            <remarks>
            The layout logic for top-level windows is different than for other controls because
            they don't have a parent, meaning that many layout properties handled by the default
            ArrangeCore (such as margins and alignment) make no sense.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.ArrangeSetBounds(Avalonia.Size)">
            <summary>
            Called during the arrange pass to set the size of the window.
            </summary>
            <param name="size">The requested size of the window.</param>
            <returns>The actual size of the window.</returns>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandlePositionChanged(Avalonia.PixelPoint)">
            <summary>
            Handles a window position change notification from 
            <see cref="P:Avalonia.Platform.IWindowBaseImpl.PositionChanged"/>.
            </summary>
            <param name="pos">The window position.</param>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandleActivated">
            <summary>
            Handles an activated notification from <see cref="P:Avalonia.Platform.IWindowBaseImpl.Activated"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandleDeactivated">
            <summary>
            Handles a deactivated notification from <see cref="P:Avalonia.Platform.IWindowBaseImpl.Deactivated"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowCloseReason">
            <summary>
            Specifies the reason that a window was closed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowCloseReason.Undefined">
            <summary>
            The cause of the closure was not provided by the underlying platform.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowCloseReason.WindowClosing">
            <summary>
            The window itself was requested to close.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowCloseReason.OwnerWindowClosing">
            <summary>
            The window is closing due to a parent/owner window closing.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowCloseReason.ApplicationShutdown">
            <summary>
            The window is closing due to the application shutting down.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowCloseReason.OSShutdown">
            <summary>
            The window is closing due to the operating system shutting down.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowClosingEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.Window.Closing"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowClosingEventArgs.CloseReason">
            <summary>
            Gets a value that indicates why the window is being closed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowClosingEventArgs.IsProgrammatic">
            <summary>
            Gets a value indicating whether the window is being closed programmatically.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowIcon">
            <summary>
            Represents an icon for a window.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowResizeReason">
            <summary>
            Describes the reason for a <see cref="E:Avalonia.Controls.WindowBase.Resized"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowResizeReason.Unspecified">
            <summary>
            The resize reason is unknown or unspecified.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowResizeReason.User">
            <summary>
            The resize was due to the user resizing the window, for example by dragging the
            window frame.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowResizeReason.Application">
            <summary>
            The resize was initiated by the application, for example by setting one of the sizing-
            related properties on <see cref="T:Avalonia.Controls.Window"/> such as <see cref="P:Avalonia.Layout.Layoutable.Width"/> or
            <see cref="P:Avalonia.Layout.Layoutable.Height"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowResizeReason.Layout">
            <summary>
            The resize was initiated by the layout system.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowResizeReason.DpiChange">
            <summary>
            The resize was due to a change in DPI.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowResizedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.WindowBase.Resized"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowResizedEventArgs.ClientSize">
            <summary>
            Gets the new client size of the window in device-independent pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowResizedEventArgs.Reason">
            <summary>
            Gets the reason for the resize.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowStartupLocation">
            <summary>
            Determines the startup location of the window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowStartupLocation.Manual">
            <summary>
            The startup location is defined by the Position property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowStartupLocation.CenterScreen">
            <summary>
            The startup location is the center of the screen.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowStartupLocation.CenterOwner">
            <summary>
            The startup location is the center of the owner window. If the owner window is not specified, the startup location will be <see cref="F:Avalonia.Controls.WindowStartupLocation.Manual"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowState">
            <summary>
            Defines the minimized/maximized state of a <see cref="T:Avalonia.Controls.Window"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Normal">
            <summary>
            The window is neither minimized or maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Minimized">
            <summary>
            The window is minimized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Maximized">
            <summary>
            The window is maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.FullScreen">
            <summary>
            The window is fullscreen.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowTransparencyLevel.None">
            <summary>
            The window background is Black where nothing is drawn in the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowTransparencyLevel.Transparent">
            <summary>
            The window background is Transparent where nothing is drawn in the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowTransparencyLevel.Blur">
            <summary>
            The window background is a blur-behind where nothing is drawn in the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowTransparencyLevel.AcrylicBlur">
            <summary>
            The window background is a blur-behind with a high blur radius. This level may fallback to Blur.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowTransparencyLevel.Mica">
            <summary>
            The window background is based on desktop wallpaper tint with a blur. This will only work on Windows 11 
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WrapPanel">
            <summary>
            Positions child elements in sequential position from left to right, 
            breaking content to the next line at the edge of the containing box. 
            Subsequent ordering happens sequentially from top to bottom or from right to left, 
            depending on the value of the <see cref="P:Avalonia.Controls.WrapPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WrapPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WrapPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WrapPanel.ItemWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WrapPanel.ItemWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WrapPanel.ItemHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WrapPanel.ItemHeight"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.WrapPanel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child controls will be layed out.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of all items in the WrapPanel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of all items in the WrapPanel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.AppBuilder">
            <summary>
            Initializes platform-specific services for an <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.RuntimePlatformServicesInitializer">
            <summary>
            Gets or sets a method to call the initialize the runtime platform services (e. g. AssetLoader)
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.RuntimePlatformServicesName">
            <summary>
            Gets the name of the currently selected windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.Instance">
            <summary>
            Gets the <see cref="T:Avalonia.Application"/> instance being initialized.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.ApplicationType">
            <summary>
            Gets the type of the Instance (even if it's not created yet)
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.WindowingSubsystemInitializer">
            <summary>
            Gets or sets a method to call the initialize the windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.WindowingSubsystemName">
            <summary>
            Gets the name of the currently selected windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.RenderingSubsystemInitializer">
            <summary>
            Gets or sets a method to call the initialize the windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.RenderingSubsystemName">
            <summary>
            Gets the name of the currently selected rendering subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.AppBuilder.AfterSetupCallback">
            <summary>
            Gets or sets a method to call after the <see cref="T:Avalonia.Application"/> is setup.
            </summary>
        </member>
        <member name="M:Avalonia.AppBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AppBuilder"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.AppBuilder.Configure``1">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            </summary>
            <typeparam name="TApp">The subclass of <see cref="T:Avalonia.Application"/> to configure.</typeparam>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.Configure``1(System.Func{``0})">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            </summary>
            <param name="appFactory">Factory function for <typeparamref name="TApp"/>.</param>
            <typeparam name="TApp">The subclass of <see cref="T:Avalonia.Application"/> to configure.</typeparam>
            <remarks><paramref name="appFactory"/> is useful for passing of dependencies to <typeparamref name="TApp"/>.</remarks>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.Configure(System.Type)">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            Should only be used for testing and design purposes, as it relies on dynamic code.
            </summary>
            <param name="entryPointType">
            Parameter from which <see cref="T:Avalonia.AppBuilder"/> should be created.
            It either needs to have BuildAvaloniaApp -> AppBuilder method or inherit Application.
            </param>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance. If can't be created, thrown an exception.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.SetupWithoutStarting">
            <summary>
            Sets up the platform-specific services for the application, but does not run it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.AppBuilder.SetupWithLifetime(Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime)">
            <summary>
            Sets up the platform-specific services for the application and initialized it with a particular lifetime, but does not run it.
            </summary>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.AppBuilder.UseWindowingSubsystem(System.Action,System.String)">
            <summary>
            Specifies a windowing subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the windowing subsystem.</param>
            <param name="name">The name of the windowing subsystem.</param>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.UseRenderingSubsystem(System.Action,System.String)">
            <summary>
            Specifies a rendering subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the rendering subsystem.</param>
            <param name="name">The name of the rendering subsystem.</param>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.UseRuntimePlatformSubsystem(System.Action,System.String)">
            <summary>
            Specifies a runtime platform subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the runtime platform subsystem.</param>
            <param name="name">The name of the runtime platform subsystem.</param>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.UseStandardRuntimePlatformSubsystem">
            <summary>
            Specifies a standard runtime platform subsystem to use.
            </summary>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.With``1(``0)">
            <summary>
            Configures platform-specific options
            </summary>
        </member>
        <member name="M:Avalonia.AppBuilder.With``1(System.Func{``0})">
            <summary>
            Configures platform-specific options
            </summary>
        </member>
        <member name="M:Avalonia.AppBuilder.ConfigureFonts(System.Action{Avalonia.Media.FontManager})">
            <summary>
            Registers an action that is executed with the current font manager.
            </summary>
            <param name="action">The action.</param>
            <returns>An <see cref="T:Avalonia.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.AppBuilder.Setup">
            <summary>
            Sets up the platform-specific services for the <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="M:Avalonia.AppBuilder.SetupUnsafe">
            <summary>
            Setup method that doesn't check for input initalizers being set.
            Nor 
            </summary>
        </member>
        <member name="T:Avalonia.Application">
            <summary>
            Encapsulates a Avalonia application.
            </summary>
            <remarks>
            The <see cref="T:Avalonia.Application"/> class encapsulates Avalonia application-specific
            functionality, including:
            - A global set of <see cref="P:Avalonia.Application.DataTemplates"/>.
            - A global set of <see cref="P:Avalonia.Application.Styles"/>.
            - A <see cref="T:Avalonia.Input.FocusManager"/>.
            - An <see cref="P:Avalonia.Application.InputManager"/>.
            - Registers services needed by the rest of Avalonia in the <see cref="M:Avalonia.Application.RegisterServices"/>
            method.
            - Tracks the lifetime of the application.
            </remarks>
        </member>
        <member name="F:Avalonia.Application._dataTemplates">
            <summary>
            The application-global data templates.
            </summary>
        </member>
        <member name="F:Avalonia.Application.DataContextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Application.DataContext"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Application.ActualThemeVariantProperty">
            <inheritdoc cref="F:Avalonia.Controls.ThemeVariantScope.ActualThemeVariantProperty" />
        </member>
        <member name="F:Avalonia.Application.RequestedThemeVariantProperty">
            <inheritdoc cref="F:Avalonia.Controls.ThemeVariantScope.RequestedThemeVariantProperty" />
        </member>
        <member name="E:Avalonia.Application.ResourcesChanged">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Application.UrlsOpened">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Application.ActualThemeVariantChanged">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Application.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Avalonia.Application"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Application.DataContext">
            <summary>
            Gets or sets the Applications's data context.
            </summary>
            <remarks>
            The data context property specifies the default object that will
            be used for data binding.
            </remarks>
        </member>
        <member name="P:Avalonia.Application.RequestedThemeVariant">
            <inheritdoc cref="P:Avalonia.Controls.ThemeVariantScope.RequestedThemeVariant"/>
        </member>
        <member name="P:Avalonia.Application.ActualThemeVariant">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Application.Current">
            <summary>
            Gets the current instance of the <see cref="T:Avalonia.Application"/> class.
            </summary>
            <value>
            The current instance of the <see cref="T:Avalonia.Application"/> class.
            </value>
        </member>
        <member name="P:Avalonia.Application.DataTemplates">
            <summary>
            Gets or sets the application's global data templates.
            </summary>
            <value>
            The application's global data templates.
            </value>
        </member>
        <member name="P:Avalonia.Application.InputManager">
            <summary>
            Gets the application's input manager.
            </summary>
            <value>
            The application's input manager.
            </value>
        </member>
        <member name="P:Avalonia.Application.Resources">
            <summary>
            Gets the application's global resource dictionary.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Styles">
            <summary>
            Gets the application's global styles.
            </summary>
            <value>
            The application's global styles.
            </value>
            <remarks>
            Global styles apply to all windows in the application.
            </remarks>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Controls#Templates#IDataTemplateHost#IsDataTemplatesInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Controls#IResourceNode#HasResources">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Styling#IStyleHost#StylingParent">
            <summary>
            Gets the styling parent of the application, which is null.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Styling#IStyleHost#IsStylesInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.ApplicationLifetime">
            <summary>
            Application lifetime, use it for things like setting the main window and exiting the app from code
            Currently supported lifetimes are:
            - <see cref="T:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime"/>
            - <see cref="T:Avalonia.Controls.ApplicationLifetimes.ISingleViewApplicationLifetime"/>
            - <see cref="T:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime"/> 
            </summary>
        </member>
        <member name="P:Avalonia.Application.PlatformSettings">
            <summary>
            Represents a contract for accessing global platform-specific settings.
            </summary>
            <remarks>
            PlatformSettings can be null only if application wasn't initialized yet.
            <see cref="T:Avalonia.Controls.TopLevel"/>'s <see cref="P:Avalonia.Controls.TopLevel.PlatformSettings"/> is an equivalent API
            which should always be preferred over a global one,
            as specific top levels might have different settings set-up. 
            </remarks>
        </member>
        <member name="M:Avalonia.Application.Initialize">
            <summary>
            Initializes the application by loading XAML etc.
            </summary>
        </member>
        <member name="M:Avalonia.Application.TryGetResource(System.Object,Avalonia.Styling.ThemeVariant,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Application.RegisterServices">
            <summary>
            Register's the services needed by Avalonia.
            </summary>
        </member>
        <member name="F:Avalonia.Application.NameProperty">
            <summary>
            Defines Name property
            </summary>
        </member>
        <member name="P:Avalonia.Application.Name">
            <summary>
            Application name to be used for various platform-specific purposes
            </summary>
        </member>
        <member name="T:Avalonia.Automation.AutomationElementIdentifiers">
            <summary>
            Contains values used as automation property identifiers by UI Automation providers.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.AutomationElementIdentifiers.BoundingRectangleProperty">
            <summary>
            Identifies the bounding rectangle automation property. The bounding rectangle property
            value is returned by the <see cref="M:Avalonia.Automation.Peers.AutomationPeer.GetBoundingRectangle"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.AutomationElementIdentifiers.ClassNameProperty">
            <summary>
            Identifies the class name automation property. The class name property value is returned
            by the <see cref="M:Avalonia.Automation.Peers.AutomationPeer.GetClassName"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.AutomationElementIdentifiers.NameProperty">
            <summary>
            Identifies the name automation property. The class name property value is returned
            by the <see cref="M:Avalonia.Automation.Peers.AutomationPeer.GetName"/> method.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.AutomationLiveSetting">
            <summary>
            Describes the notification characteristics of a particular live region
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationLiveSetting.Off">
            <summary>
            The element does not send notifications if the content of the live region has changed.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationLiveSetting.Polite">
            <summary>
            The element sends non-interruptive notifications if the content of the live region has
            changed. With this setting, UI Automation clients and assistive technologies are expected 
            to not interrupt the user to inform of changes to the live region.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationLiveSetting.Assertive">
            <summary>
            The element sends interruptive notifications if the content of the live region has changed. 
            With this setting, UI Automation clients and assistive technologies are expected to interrupt 
            the user to inform of changes to the live region.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.AccessibilityView">
            <summary>
            Declares how a control should included in different views of the automation tree.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AccessibilityView.Default">
            <summary>
            The control's view is defined by its automation peer.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AccessibilityView.Raw">
            <summary>
            The control is included in the Raw view of the automation tree.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AccessibilityView.Control">
            <summary>
            The control is included in the Control view of the automation tree.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AccessibilityView.Content">
            <summary>
            The control is included in the Content view of the automation tree.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.AcceleratorKeyProperty">
            <summary>
            Defines the AutomationProperties.AcceleratorKey attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.AccessibilityViewProperty">
            <summary>
            Defines the AutomationProperties.AccessibilityView attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.AccessKeyProperty">
            <summary>
            Defines the AutomationProperties.AccessKey attached property
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.AutomationIdProperty">
            <summary>
            Defines the AutomationProperties.AutomationId attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.ControlTypeOverrideProperty">
            <summary>
            Defines the AutomationProperties.ControlTypeOverride attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.HelpTextProperty">
            <summary>
            Defines the AutomationProperties.HelpText attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.IsColumnHeaderProperty">
            <summary>
            Defines the AutomationProperties.IsColumnHeader attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.IsRequiredForFormProperty">
            <summary>
            Defines the AutomationProperties.IsRequiredForForm attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.IsRowHeaderProperty">
            <summary>
            Defines the AutomationProperties.IsRowHeader attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.IsOffscreenBehaviorProperty">
            <summary>
            Defines the AutomationProperties.IsOffscreenBehavior attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.ItemStatusProperty">
            <summary>
            Defines the AutomationProperties.ItemStatus attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.ItemTypeProperty">
            <summary>
            Defines the AutomationProperties.ItemType attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.LabeledByProperty">
            <summary>
            Defines the AutomationProperties.LabeledBy attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.LiveSettingProperty">
            <summary>
            Defines the AutomationProperties.LiveSetting attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.NameProperty">
            <summary>
            Defines the AutomationProperties.Name attached attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.PositionInSetProperty">
            <summary>
            Defines the AutomationProperties.PositionInSet attached property.
            </summary>
            <remarks>
            The PositionInSet property describes the ordinal location of the element within a set
            of elements which are considered to be siblings. PositionInSet works in coordination
            with the SizeOfSet property to describe the ordinal location in the set.
            </remarks>
        </member>
        <member name="F:Avalonia.Automation.AutomationProperties.SizeOfSetProperty">
            <summary>
            Defines the AutomationProperties.SizeOfSet attached property.
            </summary>
            <remarks>
            The SizeOfSet property describes the count of automation elements in a group or set
            that are considered to be siblings. SizeOfSet works in coordination with the PositionInSet
            property to describe the count of items in the set.
            </remarks>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetAcceleratorKey(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting AcceleratorKey property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetAcceleratorKey(Avalonia.StyledElement)">
            <summary>
            Helper for reading AcceleratorKey property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetAccessibilityView(Avalonia.StyledElement,Avalonia.Automation.AccessibilityView)">
            <summary>
            Helper for setting AccessibilityView property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetAccessibilityView(Avalonia.StyledElement)">
            <summary>
            Helper for reading AccessibilityView property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetAccessKey(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting AccessKey property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetAccessKey(Avalonia.StyledElement)">
            <summary>
            Helper for reading AccessKey property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetAutomationId(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting AutomationId property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetAutomationId(Avalonia.StyledElement)">
            <summary>
            Helper for reading AutomationId property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetControlTypeOverride(Avalonia.StyledElement,System.Nullable{Avalonia.Automation.Peers.AutomationControlType})">
            <summary>
            Helper for setting ControlTypeOverride property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetControlTypeOverride(Avalonia.StyledElement)">
            <summary>
            Helper for reading ControlTypeOverride property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetHelpText(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting HelpText property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetHelpText(Avalonia.StyledElement)">
            <summary>
            Helper for reading HelpText property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetIsColumnHeader(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Helper for setting IsColumnHeader property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetIsColumnHeader(Avalonia.StyledElement)">
            <summary>
            Helper for reading IsColumnHeader property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetIsRequiredForForm(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Helper for setting IsRequiredForForm property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetIsRequiredForForm(Avalonia.StyledElement)">
            <summary>
            Helper for reading IsRequiredForForm property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetIsRowHeader(Avalonia.StyledElement)">
            <summary>
            Helper for reading IsRowHeader property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetIsRowHeader(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Helper for setting IsRowHeader property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetIsOffscreenBehavior(Avalonia.StyledElement,Avalonia.Automation.IsOffscreenBehavior)">
            <summary>
            Helper for setting IsOffscreenBehavior property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetIsOffscreenBehavior(Avalonia.StyledElement)">
            <summary>
            Helper for reading IsOffscreenBehavior property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetItemStatus(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting ItemStatus property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetItemStatus(Avalonia.StyledElement)">
            <summary>
            Helper for reading ItemStatus property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetItemType(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting ItemType property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetItemType(Avalonia.StyledElement)">
            <summary>
            Helper for reading ItemType property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetLabeledBy(Avalonia.StyledElement,Avalonia.Controls.Control)">
            <summary>
            Helper for setting LabeledBy property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetLabeledBy(Avalonia.StyledElement)">
            <summary>
            Helper for reading LabeledBy property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetLiveSetting(Avalonia.StyledElement,Avalonia.Automation.AutomationLiveSetting)">
            <summary>
            Helper for setting LiveSetting property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetLiveSetting(Avalonia.StyledElement)">
            <summary>
            Helper for reading LiveSetting property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetName(Avalonia.StyledElement,System.String)">
            <summary>
            Helper for setting Name property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetName(Avalonia.StyledElement)">
            <summary>
            Helper for reading Name property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetPositionInSet(Avalonia.StyledElement,System.Int32)">
            <summary>
            Helper for setting PositionInSet property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetPositionInSet(Avalonia.StyledElement)">
            <summary>
            Helper for reading PositionInSet property from a StyledElement.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.SetSizeOfSet(Avalonia.StyledElement,System.Int32)">
            <summary>
            Helper for setting SizeOfSet property on a StyledElement. 
            </summary>
        </member>
        <member name="M:Avalonia.Automation.AutomationProperties.GetSizeOfSet(Avalonia.StyledElement)">
            <summary>
            Helper for reading SizeOfSet property from a StyledElement.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.AutomationProperty">
            <summary>
            Identifies a property of <see cref="T:Avalonia.Automation.AutomationElementIdentifiers"/> or of a specific
            control pattern.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.ExpandCollapsePatternIdentifiers">
            <summary>
            Contains values used as identifiers by <see cref="T:Avalonia.Automation.Provider.IExpandCollapseProvider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState"/> automation property.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.ExpandCollapseState">
            <summary>
            Contains values that specify the <see cref="T:Avalonia.Automation.ExpandCollapseState"/> of a UI Automation element.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.ExpandCollapseState.Collapsed">
            <summary>
            No child nodes, controls, or content of the UI Automation element are displayed.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.ExpandCollapseState.Expanded">
            <summary>
            All child nodes, controls or content of the UI Automation element are displayed.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.ExpandCollapseState.LeafNode">
            <summary>
            The UI Automation element has no child nodes, controls, or content to display.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.ExpandCollapseState.PartiallyExpanded">
            <summary>
            Some, but not all, child nodes, controls, or content of the UI Automation element are
            displayed.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.IsOffscreenBehavior">
            <summary>
            This enum offers different ways of evaluating the IsOffscreen AutomationProperty
            </summary>
        </member>
        <member name="F:Avalonia.Automation.IsOffscreenBehavior.Default">
            <summary>
            The AutomationProperty IsOffscreen is calculated based on IsVisible.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.IsOffscreenBehavior.Onscreen">
            <summary>
            The AutomationProperty IsOffscreen is false.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.IsOffscreenBehavior.Offscreen">
            <summary>
            The AutomationProperty IsOffscreen if true.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.IsOffscreenBehavior.FromClip">
            <summary>
            The AutomationProperty IsOffscreen is calculated based on clip regions.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Peers.AutomationPeer">
            <summary>
            Provides a base class that exposes an element to UI Automation.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.BringIntoView">
            <summary>
            Attempts to bring the element associated with the automation peer into view.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetAcceleratorKey">
            <summary>
            Gets the accelerator key combinations for the element that is associated with the UI
            Automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetAccessKey">
            <summary>
            Gets the access key for the element that is associated with the automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetAutomationControlType">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetAutomationId">
            <summary>
            Gets the automation ID of the element that is associated with the UI Automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetBoundingRectangle">
            <summary>
            Gets the bounding rectangle of the element that is associated with the automation peer
            in top-level coordinates.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetChildren">
            <summary>
            Gets the child automation peers.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetClassName">
            <summary>
            Gets a string that describes the class of the element.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetLabeledBy">
            <summary>
            Gets the automation peer for the label that is targeted to the element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetLocalizedControlType">
            <summary>
            Gets a human-readable localized string that represents the type of the control that is
            associated with this automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetName">
            <summary>
            Gets text that describes the element that is associated with this automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetParent">
            <summary>
            Gets the <see cref="T:Avalonia.Automation.Peers.AutomationPeer"/> that is the parent of this <see cref="T:Avalonia.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.HasKeyboardFocus">
            <summary>
            Gets a value that indicates whether the element that is associated with this automation
            peer currently has keyboard focus.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.IsContentElement">
            <summary>
            Gets a value that indicates whether the element that is associated with this automation
            peer contains data that is presented to the user.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.IsControlElement">
            <summary>
            Gets a value that indicates whether the element is understood by the user as
            interactive or as contributing to the logical structure of the control in the GUI.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.IsEnabled">
            <summary>
            Gets a value indicating whether the control is enabled for user interaction.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
            <summary>
            Gets a value that indicates whether the element can accept keyboard focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.SetFocus">
            <summary>
            Sets the keyboard focus on the element that is associated with this automation peer.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.ShowContextMenu">
            <summary>
            Shows the context menu for the element that is associated with this automation peer.
            </summary>
            <returns>true if a context menu is present for the element; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.GetProvider``1">
            <summary>
            Tries to get a provider of the specified type from the peer.
            </summary>
            <typeparam name="T">The provider type.</typeparam>
            <returns>The provider, or null if not implemented on this peer.</returns>
        </member>
        <member name="E:Avalonia.Automation.Peers.AutomationPeer.ChildrenChanged">
            <summary>
            Occurs when the children of the automation peer have changed.
            </summary>
        </member>
        <member name="E:Avalonia.Automation.Peers.AutomationPeer.PropertyChanged">
            <summary>
            Occurs when a property value of the automation peer has changed.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.RaiseChildrenChangedEvent">
            <summary>
            Raises an event to notify the automation client the the children of the peer have changed.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(Avalonia.Automation.AutomationProperty,System.Object,System.Object)">
            <summary>
            Raises an event to notify the automation client of a changed property value.
            </summary>
            <param name="property">The property that changed.</param>
            <param name="oldValue">The previous value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="T:Avalonia.Automation.Peers.ControlAutomationPeer">
            <summary>
            An automation peer which represents a <see cref="T:Avalonia.Controls.Control"/> element.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.ControlAutomationPeer.CreatePeerForElement(Avalonia.Controls.Control)">
            <summary>
            Gets the <see cref="T:Avalonia.Automation.Peers.AutomationPeer"/> for a <see cref="T:Avalonia.Controls.Control"/>, creating it if
            necessary.
            </summary>
            <param name="element">The control.</param>
            <returns>The automation peer.</returns>
            <remarks>
            Despite the name (which comes from the analogous WPF API), this method does not create
            a new peer if one already exists: instead it returns the existing peer.
            </remarks>
        </member>
        <member name="M:Avalonia.Automation.Peers.ControlAutomationPeer.FromElement(Avalonia.Controls.Control)">
            <summary>
            Gets an existing <see cref="T:Avalonia.Automation.Peers.AutomationPeer"/> for a <see cref="T:Avalonia.Controls.Control"/>.
            </summary>
            <param name="element">The control.</param>
            <returns>The automation peer if already created; otherwise null.</returns>
            <remarks>
            To ensure that a peer is created, use <see cref="M:Avalonia.Automation.Peers.ControlAutomationPeer.CreatePeerForElement(Avalonia.Controls.Control)"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Automation.Peers.ControlAutomationPeer.InvalidateChildren">
            <summary>
            Invalidates the peer's children and causes a re-read from <see cref="M:Avalonia.Automation.Peers.ControlAutomationPeer.GetChildrenCore"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Peers.ControlAutomationPeer.InvalidateParent">
            <summary>
            Invalidates the peer's parent.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Peers.NoneAutomationPeer">
            <summary>
            An automation peer which represents an element that is exposed to automation as non-
            interactive or as not contributing to the logical structure of the application.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Peers.UnrealizedElementAutomationPeer">
            <summary>
            An automation peer which represents an unrealized element
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.IExpandCollapseProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to controls that
            visually expand to display content and collapse to hide content.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState">
            <summary>
            Gets the state, expanded or collapsed, of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IExpandCollapseProvider.ShowsMenu">
            <summary>
            Gets a value indicating whether expanding the element shows a menu of items to the user,
            such as drop-down list.
            </summary>
            <remarks>
            Used in OSX to enable the "Show Menu" action on the element.
            </remarks>
        </member>
        <member name="M:Avalonia.Automation.Provider.IExpandCollapseProvider.Expand">
            <summary>
            Displays all child nodes, controls, or content of the control.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.IExpandCollapseProvider.Collapse">
            <summary>
            Hides all nodes, controls, or content that are descendants of the control.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.IInvokeProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to controls that
            initiate or perform a single, unambiguous action and do not maintain state when
            activated.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.IInvokeProvider.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.IRangeValueProvider">
            <summary>
            Exposes methods and properties to support access by a UI Automation client to controls
            that can be set to a value within a range.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IRangeValueProvider.IsReadOnly">
            <summary>
            Gets a value that indicates whether the value of a control is read-only.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IRangeValueProvider.Minimum">
            <summary>
            Gets the minimum range value that is supported by the control.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IRangeValueProvider.Maximum">
            <summary>
            Gets the maximum range value that is supported by the control.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IRangeValueProvider.Value">
            <summary>
            Gets the value of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IRangeValueProvider.LargeChange">
            <summary>
            Gets the value that is added to or subtracted from the Value property when a large
            change is made, such as with the PAGE DOWN key.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IRangeValueProvider.SmallChange">
            <summary>
            Gets the value that is added to or subtracted from the Value property when a small
            change is made, such as with an arrow key.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
            <summary>
            Sets the value of the control.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Avalonia.Automation.Provider.IScrollProvider">
            <summary>
            Exposes methods and properties to support access by a UI Automation client to a control
            that acts as a scrollable container for a collection of child objects. 
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IScrollProvider.HorizontallyScrollable">
            <summary>
            Gets a value that indicates whether the control can scroll horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IScrollProvider.HorizontalScrollPercent">
            <summary>
            Gets the current horizontal scroll position.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IScrollProvider.HorizontalViewSize">
            <summary>
            Gets the current horizontal view size.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IScrollProvider.VerticallyScrollable">
            <summary>
            Gets a value that indicates whether the control can scroll vertically.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IScrollProvider.VerticalScrollPercent">
            <summary>
            Gets the current vertical scroll position.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IScrollProvider.VerticalViewSize">
            <summary>
            Gets the vertical view size.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.IScrollProvider.Scroll(Avalonia.Automation.Provider.ScrollAmount,Avalonia.Automation.Provider.ScrollAmount)">
            <summary>
            Scrolls the visible region of the content area horizontally and vertically.
            </summary>
            <param name="horizontalAmount">The horizontal increment specific to the control.</param>
            <param name="verticalAmount">The vertical increment specific to the control.</param>
        </member>
        <member name="M:Avalonia.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)">
            <summary>
            Sets the horizontal and vertical scroll position as a percentage of the total content
            area within the control.
            </summary>
            <param name="horizontalPercent">
            The horizontal position as a percentage of the content area's total range.
            <see cref="F:Avalonia.Automation.ScrollPatternIdentifiers.NoScroll"/> should be passed in if the control
            cannot be scrolled in this direction.
            </param>
            <param name="verticalPercent">
            The vertical position as a percentage of the content area's total range.
            <see cref="F:Avalonia.Automation.ScrollPatternIdentifiers.NoScroll"/> should be passed in if the control
            cannot be scrolled in this direction.
            </param>
        </member>
        <member name="T:Avalonia.Automation.Provider.ISelectionItemProvider">
            <summary>
            Exposes methods and properties to support access by a UI Automation client to individual,
            selectable child controls of containers that implement <see cref="T:Avalonia.Automation.Provider.ISelectionProvider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.ISelectionItemProvider.IsSelected">
            <summary>
            Gets a value that indicates whether an item is selected.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.ISelectionItemProvider.SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements <see cref="T:Avalonia.Automation.Provider.ISelectionProvider"/> and
            acts as the container for the calling object.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.ISelectionItemProvider.AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.ISelectionItemProvider.Select">
            <summary>
            Clears any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.ISelectionProvider">
            <summary>
            Exposes methods and properties to support access by a UI Automation client to controls
            that act as containers for a collection of individual, selectable child items.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.ISelectionProvider.CanSelectMultiple">
            <summary>
            Gets a value that indicates whether the provider allows more than one child element
            to be selected concurrently.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.ISelectionProvider.IsSelectionRequired">
            <summary>
            Gets a value that indicates whether the provider requires at least one child element
            to be selected.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.ISelectionProvider.GetSelection">
            <summary>
            Retrieves a provider for each child element that is selected.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.ToggleState">
            <summary>
            Contains values that specify the toggle state of a UI Automation element.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.Provider.ToggleState.Off">
            <summary>
            The UI Automation element isn't selected, checked, marked, or otherwise activated.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.Provider.ToggleState.On">
            <summary>
            The UI Automation element is selected, checked, marked, or otherwise activated.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.Provider.ToggleState.Indeterminate">
            <summary>
            The UI Automation element is in an indeterminate state.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.IToggleProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to controls that can
            cycle through a set of states and maintain a particular state. 
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IToggleProvider.ToggleState">
            <summary>
            Gets the toggle state of the control.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.IToggleProvider.Toggle">
            <summary>
            Cycles through the toggle states of a control.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.Provider.IValueProvider">
            <summary>
            Exposes methods and properties to support access by a UI Automation client to controls
            that have an intrinsic value that does not span a range and that can be represented as
            a string.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IValueProvider.IsReadOnly">
            <summary>
            Gets a value that indicates whether the value of a control is read-only.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.Provider.IValueProvider.Value">
            <summary>
            Gets the value of the control.
            </summary>
        </member>
        <member name="M:Avalonia.Automation.Provider.IValueProvider.SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <param name="value">
            The value to set. The provider is responsible for converting the value to the
            appropriate data type.
            </param>
        </member>
        <member name="T:Avalonia.Automation.RangeValuePatternIdentifiers">
            <summary>
            Contains values used as identifiers by <see cref="T:Avalonia.Automation.Provider.IRangeValueProvider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IRangeValueProvider.IsReadOnly"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.RangeValuePatternIdentifiers.MinimumProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IRangeValueProvider.Minimum"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.RangeValuePatternIdentifiers.MaximumProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IRangeValueProvider.Maximum"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.RangeValuePatternIdentifiers.ValueProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IRangeValueProvider.Value"/> automation property.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.ScrollPatternIdentifiers">
            <summary>
            Contains values used as identifiers by <see cref="T:Avalonia.Automation.Provider.IScrollProvider"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Automation.ScrollPatternIdentifiers.NoScroll">
            <summary>
            Specifies that scrolling should not be performed.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IScrollProvider.HorizontallyScrollable"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IScrollProvider.HorizontalScrollPercent"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IScrollProvider.HorizontalViewSize"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IScrollProvider.VerticallyScrollable"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IScrollProvider.VerticalScrollPercent"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.IScrollProvider.VerticalViewSize"/> automation property.
            </summary>
        </member>
        <member name="T:Avalonia.Automation.SelectionItemPatternIdentifiers">
            <summary>
            Contains values used as identifiers by <see cref="T:Avalonia.Automation.Provider.ISelectionItemProvider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty">
            <summary>Indicates the element is currently selected.</summary>
        </member>
        <member name="P:Avalonia.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty">
            <summary>Indicates the element is currently selected.</summary>
        </member>
        <member name="T:Avalonia.Automation.SelectionPatternIdentifiers">
            <summary>
            Contains values used as identifiers by <see cref="T:Avalonia.Automation.Provider.ISelectionProvider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.ISelectionProvider.CanSelectMultiple"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty">
            <summary>
            Identifies <see cref="P:Avalonia.Automation.Provider.ISelectionProvider.IsSelectionRequired"/> automation property.
            </summary>
        </member>
        <member name="P:Avalonia.Automation.SelectionPatternIdentifiers.SelectionProperty">
            <summary>
            Identifies the property that gets the selected items in a container.
            </summary>
        </member>
        <member name="M:Avalonia.LoggingExtensions.LogToTrace(Avalonia.AppBuilder,Avalonia.Logging.LogEventLevel,System.String[])">
            <summary>
            Logs Avalonia events to the <see cref="T:System.Diagnostics.Trace"/> sink.
            </summary>
            <param name="builder">The app builder instance.</param>
            <param name="level">The minimum level to log.</param>
            <param name="areas">The areas to log. Valid values are listed in <see cref="T:Avalonia.Logging.LogArea"/>.</param>
            <returns>The app builder instance.</returns>
        </member>
        <member name="T:Avalonia.Platform.ExtendClientAreaChromeHints">
            <summary>
            Hint for Window Chrome when ClientArea is Extended.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.ExtendClientAreaChromeHints.NoChrome">
            <summary>
            The will be no chrome at all.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.ExtendClientAreaChromeHints.Default">
            <summary>
            The default for the platform.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.ExtendClientAreaChromeHints.SystemChrome">
            <summary>
            Use SystemChrome
            </summary>
        </member>
        <member name="F:Avalonia.Platform.ExtendClientAreaChromeHints.PreferSystemChrome">
            <summary>
            Use system chrome where possible. OSX system chrome is used, Windows managed chrome is used.
            This is because Windows Chrome can not be shown on top of user content.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.ExtendClientAreaChromeHints.OSXThickTitleBar">
            <summary>
            On OSX the titlebar is the thicker toolbar kind. Causes traffic lights to be positioned
            slightly lower than normal.
            </summary>
        </member>
        <member name="E:Avalonia.Platform.IPlatformLifetimeEventsImpl.ShutdownRequested">
            <summary>
            Raised by the platform when a shutdown is requested.
            </summary>
            <remarks>
            Raised on on OSX via the Quit menu or right-clicking on the application icon and selecting Quit.
            </remarks>
        </member>
        <member name="T:Avalonia.Platform.IPopupImpl">
            <summary>
            Defines a platform-specific popup window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IScreenImpl.ScreenCount">
            <summary>
            Gets the total number of screens available on the device.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IScreenImpl.AllScreens">
            <summary>
            Gets the list of all screens available on the device.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.ITopLevelImpl">
            <summary>
            Defines a platform-specific top-level window implementation.
            </summary>
            <remarks>
            This interface is the common interface to <see cref="T:Avalonia.Platform.IWindowImpl"/> and
            <see cref="T:Avalonia.Platform.IPopupImpl"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.ClientSize">
            <summary>
            Gets the client size of the toplevel.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.FrameSize">
            <summary>
            Gets the total size of the toplevel, excluding shadows.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.RenderScaling">
            <summary>
            Gets the scaling factor for the toplevel. This is used for rendering.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Surfaces">
            <summary>
            The list of native platform's surfaces that can be consumed by rendering subsystems.
            </summary>
            <remarks>
            Rendering platform will check that list and see if it can utilize one of them to output.
            It should be enough to expose a native window handle via IPlatformHandle
            and add support for framebuffer (even if it's emulated one) via IFramebufferPlatformSurface.
            If you have some rendering platform that's tied to your particular windowing platform,
            just expose some toolkit-specific object (e. g. Func&lt;Gdk.Drawable&gt; in case of GTK#+Cairo)
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Input">
            <summary>
            Gets or sets a method called when the toplevel receives input.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Paint">
            <summary>
            Gets or sets a method called when the toplevel requires painting.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Resized">
            <summary>
            Gets or sets a method called when the toplevel is resized.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.ScalingChanged">
            <summary>
            Gets or sets a method called when the toplevel's scaling changes.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.TransparencyLevelChanged">
            <summary>
            Gets or sets a method called when the toplevel's TransparencyLevel changes.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Compositor">
            <summary>
            Gets the compositor that's compatible with the toplevel
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetInputRoot(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the <see cref="T:Avalonia.Input.IInputRoot"/> for the toplevel.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.PointToClient(Avalonia.PixelPoint)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="point">The point in screen coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.PointToScreen(Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen coordinates.</returns>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetCursor(Avalonia.Platform.ICursorImpl)">
            <summary>
            Sets the cursor associated with the toplevel.
            </summary>
            <param name="cursor">The cursor. Use null for default cursor</param>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Closed">
            <summary>
            Gets or sets a method called when the underlying implementation is destroyed.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.LostFocus">
            <summary>
            Gets or sets a method called when the input focus is lost.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetTransparencyLevelHint(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.WindowTransparencyLevel})">
            <summary>
            Sets the <see cref="T:Avalonia.Controls.WindowTransparencyLevel"/> hint of the TopLevel.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.TransparencyLevel">
            <summary>
            Gets the current <see cref="T:Avalonia.Controls.WindowTransparencyLevel"/> of the TopLevel.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetFrameThemeVariant(Avalonia.Platform.PlatformThemeVariant)">
            <summary>
            Sets the <see cref="T:Avalonia.Platform.PlatformThemeVariant"/> on the frame if it should be dark or light.
            Also applies for the mobile status bar.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.AcrylicCompensationLevels">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.AcrylicPlatformCompensationLevels"/> for the platform.        
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITrayIconImpl.SetIcon(Avalonia.Platform.IWindowIconImpl)">
            <summary>
            Sets the icon of this tray icon.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITrayIconImpl.SetToolTipText(System.String)">
            <summary>
            Sets the icon of this tray icon.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITrayIconImpl.SetIsVisible(System.Boolean)">
            <summary>
            Sets if the tray icon is visible or not.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITrayIconImpl.MenuExporter">
            <summary>
            Gets the MenuExporter to allow native menus to be exported to the TrayIcon.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITrayIconImpl.OnClicked">
            <summary>
            Gets or Sets the Action that is called when the TrayIcon is clicked.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Show(System.Boolean,System.Boolean)">
            <summary>
            Shows the window.
            </summary>
            <param name="activate">Whether to activate the shown window.</param>
            <param name="isDialog">Whether the window is being shown as a dialog.</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.DesktopScaling">
            <summary>
            Gets the scaling factor for Window positioning and sizing.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Position">
            <summary>
            Gets the position of the window in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.PositionChanged">
            <summary>
            Gets or sets a method called when the window's position changes.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Deactivated">
            <summary>
            Gets or sets a method called when the window is deactivated (loses focus).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Activated">
            <summary>
            Gets or sets a method called when the window is activated (receives focus).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Handle">
            <summary>
            Gets the platform window handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.MaxAutoSizeHint">
            <summary>
            Gets a maximum client size hint for an auto-sizing window, in device-independent pixels.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.SetTopmost(System.Boolean)">
            <summary>
            Sets whether this window appears on top of all other windows
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Screen">
            <summary>
            Gets platform specific display information
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IWindowImpl">
            <summary>
            Defines a platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.WindowState">
            <summary>
            Gets or sets the minimized/maximized state of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.WindowStateChanged">
            <summary>
            Gets or sets a method called when the minimized/maximized state of the window changes.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetTitle(System.String)">
            <summary>
            Sets the title of the window.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetParent(Avalonia.Platform.IWindowImpl)">
            <summary>
            Sets the parent of the window.
            </summary>
            <param name="parent">The parent <see cref="T:Avalonia.Platform.IWindowImpl"/>.</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetEnabled(System.Boolean)">
            <summary>
            Disables the window for example when a modal dialog is open.
            </summary>
            <param name="enable">true if the window is enabled, or false if it is disabled.</param>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.GotInputWhenDisabled">
            <summary>
            Called when a disabled window received input. Can be used to activate child windows.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetSystemDecorations(Avalonia.Controls.SystemDecorations)">
            <summary>
            Enables or disables system window decorations (title bar, buttons, etc)
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetIcon(Avalonia.Platform.IWindowIconImpl)">
            <summary>
            Sets the icon of this window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.ShowTaskbarIcon(System.Boolean)">
            <summary>
            Enables or disables the taskbar icon
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.CanResize(System.Boolean)">
            <summary>
            Enables or disables resizing of the window
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.Closing">
            <summary>
            Gets or sets a method called before the underlying implementation is destroyed.
            Return true to prevent the underlying implementation from closing.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.IsClientAreaExtendedToDecorations">
            <summary>
            Gets a value to indicate if the platform was able to extend client area to non-client area.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.ExtendClientAreaToDecorationsChanged">
            <summary>
            Gets or Sets an action that is called whenever one of the extend client area properties changed.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.NeedsManagedDecorations">
            <summary>
            Gets a flag that indicates if Managed decorations i.e. caption buttons are required.
            This property is used when <see cref="P:Avalonia.Platform.IWindowImpl.IsClientAreaExtendedToDecorations"/> is set.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.ExtendedMargins">
            <summary>
            Gets a thickness that describes the amount each side of the non-client area extends into the client area.
            It includes the titlebar.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.OffScreenMargin">
            <summary>
            Gets a thickness that describes the margin around the window that is offscreen.
            This may happen when a window is maximized and <see cref="P:Avalonia.Platform.IWindowImpl.IsClientAreaExtendedToDecorations"/> is set.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.BeginMoveDrag(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Starts moving a window with left button being held. Should be called from left mouse button press event handler.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.BeginResizeDrag(Avalonia.Controls.WindowEdge,Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Starts resizing a window. This function is used if an application has window resizing controls. 
            Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.Resize(Avalonia.Size,Avalonia.Controls.WindowResizeReason)">
            <summary>
            Sets the client size of the top level.
            </summary>
            <param name="clientSize">The new client size.</param>
            <param name="reason">The reason for the resize.</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.Move(Avalonia.PixelPoint)">
            <summary>
            Sets the client size of the top level.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetMinMaxSize(Avalonia.Size,Avalonia.Size)">
            <summary>
            Minimum width of the window.
            </summary>
            
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetExtendClientAreaToDecorationsHint(System.Boolean)">
            <summary>
            Sets if the ClientArea is extended into the non-client area.
            </summary>
            <param name="extendIntoClientAreaHint">true to enable, false to disable</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetExtendClientAreaChromeHints(Avalonia.Platform.ExtendClientAreaChromeHints)">
            <summary>
            Sets hints that configure how the client area extends. 
            </summary>
            <param name="hints"></param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetExtendClientAreaTitleBarHeightHint(System.Double)">
            <summary>
            Sets how big the non-client titlebar area should be.
            </summary>
            <param name="titleBarHeight">-1 for platform default, otherwise the height in DIPs.</param>
        </member>
        <member name="T:Avalonia.Platform.Screen">
            <summary>
            Represents a single display screen.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Screen.Scaling">
            <summary>
            Gets the scaling factor applied to the screen by the operating system.
            </summary>
            <remarks>
            Multiply this value by 100 to get a percentage.
            Both X and Y scaling factors are assumed uniform.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Screen.PixelDensity">
            <inheritdoc cref="P:Avalonia.Platform.Screen.Scaling"/>
        </member>
        <member name="P:Avalonia.Platform.Screen.Bounds">
            <summary>
            Gets the overall pixel-size of the screen.
            </summary>
            <remarks>
            This generally is the raw pixel counts in both the X and Y direction.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Screen.WorkingArea">
            <summary>
            Gets the actual working-area pixel-size of the screen.
            </summary>
            <remarks>
            This area may be smaller than <see href="Bounds"/> to account for notches and
            other block-out areas such as taskbars etc.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Screen.IsPrimary">
            <summary>
            Gets a value indicating whether the screen is the primary one.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Screen.Primary">
            <inheritdoc cref="P:Avalonia.Platform.Screen.IsPrimary"/>
        </member>
        <member name="M:Avalonia.Platform.Screen.#ctor(System.Double,Avalonia.PixelRect,Avalonia.PixelRect,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Platform.Screen"/> class.
            </summary>
            <param name="scaling">The scaling factor applied to the screen by the operating system.</param>
            <param name="bounds">The overall pixel-size of the screen.</param>
            <param name="workingArea">The actual working-area pixel-size of the screen.</param>
            <param name="isPrimary">Whether the screen is the primary one.</param>
        </member>
    </members>
</doc>
