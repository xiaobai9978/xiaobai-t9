<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Base</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Animation.Animatable">
            <summary>
            Base class for all animatable objects.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animatable.ClockProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animatable.Clock"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animatable.TransitionsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animatable.Transitions"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animatable.Clock">
            <summary>
            Gets or sets the clock which controls the animations on the control.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animatable.Transitions">
            <summary>
            Gets or sets the property transitions for the control.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animatable.EnableTransitions">
            <summary>
            Enables transitions for the control.
            </summary>
            <remarks>
            This method should not be called from user code, it will be called automatically by the framework
            when a control is added to the visual tree.
            </remarks>
        </member>
        <member name="M:Avalonia.Animation.Animatable.DisableTransitions">
            <summary>
            Disables transitions for the control.
            </summary>
            <remarks>
            This method should not be called from user code, it will be called automatically by the framework
            when a control is removed from the visual tree.
            </remarks>
        </member>
        <member name="T:Avalonia.Animation.Animation">
            <summary>
            Tracks the progress of an animation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animation.SetAnimator(Avalonia.Animation.IAnimationSetter,Avalonia.Animation.CustomAnimatorBase)">
            <summary>
            Sets the value of the Animator attached property for a setter.
            </summary>
            <param name="setter">The animation setter.</param>
            <param name="value">The property animator value.</param>
        </member>
        <member name="M:Avalonia.Animation.Animation.SetAnimator(Avalonia.Animation.IAnimationSetter,Avalonia.Animation.ICustomAnimator)">
            <summary>
            Sets the value of the Animator attached property for a setter.
            </summary>
            <param name="setter">The animation setter.</param>
            <param name="value">The property animator value.</param>
        </member>
        <member name="M:Avalonia.Animation.Animation.RegisterAnimator``2">
            <summary>
            Registers a <see cref="T:Avalonia.Animation.Animators.Animator`1"/> that can handle
            a value type that matches the specified condition.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.DurationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.Duration"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.IterationCountProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.IterationCount"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.PlaybackDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.PlaybackDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.FillModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.FillMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.EasingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.Easing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.DelayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.Delay"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.DelayBetweenIterationsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.DelayBetweenIterations"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animation.SpeedRatioProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Animation.Animation.SpeedRatio"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animation.Duration">
            <summary>
            Gets or sets the active time of this animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animation.IterationCount">
            <summary>
            Gets or sets the repeat count for this animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animation.PlaybackDirection">
            <summary>
            Gets or sets the playback direction for this animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animation.FillMode">
            <summary>
            Gets or sets the value fill mode for this animation.
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Animation.Easing">
            <summary>
            Gets or sets the easing function to be used for this animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animation.Delay">
            <summary> 
            Gets or sets the initial delay time for this animation. 
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Animation.DelayBetweenIterations">
            <summary> 
            Gets or sets the delay time in between iterations.
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Animation.SpeedRatio">
            <summary>
            Gets or sets the speed multiple for this animation.
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Animation.Children">
            <summary>
            Gets the children of the <see cref="T:Avalonia.Animation.Animation"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animation.GetAnimator(Avalonia.Animation.IAnimationSetter)">
            <summary>
            Gets the value of the Animator attached property for a setter.
            </summary>
            <param name="setter">The animation setter.</param>
            <returns>The property animator type.</returns>
        </member>
        <member name="M:Avalonia.Animation.Animation.Apply(Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animation.RunAsync(Avalonia.Animation.Animatable,Avalonia.Animation.IClock)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animation.RunAsync(Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.AnimationInstance`1">
            <summary>
            Handles interpolation and time-related functions 
            for keyframe animations.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.AnimatorDrivenTransition`2">
            <summary>
            <see cref="T:Avalonia.Animation.Transition`1"/> using an <see cref="T:Avalonia.Animation.Animators.Animator`1"/> to transition between values.
            </summary>
            <typeparam name="T">Type of the transitioned value.</typeparam>
            <typeparam name="TAnimator">Type of the animator.</typeparam>
        </member>
        <member name="T:Avalonia.Animation.AnimatorKeyFrame">
            <summary>
            Defines a KeyFrame that is used for
            <see cref="T:Avalonia.Animation.Animators.Animator`1"/> objects.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.Animator`1">
            <summary>
            Base class for <see cref="T:Avalonia.Animation.Animators.Animator`1"/> objects
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Animators.Animator`1._convertedKeyframes">
            <summary>
            List of type-converted keyframes.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Animators.Animator`1.Property">
            <summary>
            Gets or sets the target property for the keyframe.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.Animator`1.Apply(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animators.Animator`1.Run(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.Action)">
            <summary>
            Runs the KeyFrames Animation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.Animator`1.Interpolate(System.Double,`0,`0)">
            <summary>
            Interpolates in-between two key values given the desired progress time.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.BaseBrushAnimator">
            <summary>
            Animator that handles all animations on properties
            with <see cref="T:Avalonia.Media.IBrush"/> as their type and
            redirect them to the properly registered
            animators in this class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.BaseBrushAnimator.RegisterBrushAnimator``1(System.Func{System.Type,System.Boolean})">
            <summary>
            Register an <see cref="T:Avalonia.Animation.Animators.Animator`1"/> that handles a specific
            <see cref="T:Avalonia.Media.IBrush"/>'s descendant value type.
            </summary>
            <param name="condition">
            The condition to which the <see cref="T:Avalonia.Animation.Animators.Animator`1"/>
            is to be activated and used.
            </param>
            <typeparam name="TAnimator">
            The type of the animator to instantiate.
            </typeparam>
        </member>
        <member name="M:Avalonia.Animation.Animators.BaseBrushAnimator.Apply(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animators.BaseBrushAnimator.Interpolate(System.Double,Avalonia.Media.IBrush,Avalonia.Media.IBrush)">
            <summary>
            Fallback implementation of <see cref="T:Avalonia.Media.IBrush"/> animation.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.BoolAnimator">
            <summary>
            Animator that handles <see cref="T:System.Boolean"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.BoolAnimator.Interpolate(System.Double,System.Boolean,System.Boolean)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.ByteAnimator">
            <summary>
            Animator that handles <see cref="T:System.Byte"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.ByteAnimator.Interpolate(System.Double,System.Byte,System.Byte)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.ColorAnimator">
            <summary>
            Animator that interpolates <see cref="T:Avalonia.Media.Color"/> through 
            gamma sRGB color space for better visual result.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.ColorAnimator.OECF_sRGB(System.Double)">
            <summary>
            Opto-electronic conversion function for the sRGB color space.
            Takes a gamma-encoded sRGB value and converts it to a linear sRGB value.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.ColorAnimator.EOCF_sRGB(System.Double)">
            <summary>
            Electro-optical conversion function for the sRGB color space.
            Takes a linear sRGB value and converts it to a gamma-encoded sRGB value.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.CornerRadiusAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.CornerRadius"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.DecimalAnimator">
            <summary>
            Animator that handles <see cref="T:System.Decimal"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.DecimalAnimator.Interpolate(System.Double,System.Decimal,System.Decimal)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.DoubleAnimator">
            <summary>
            Animator that handles <see cref="T:System.Double"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.DoubleAnimator.Interpolate(System.Double,System.Double,System.Double)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.FloatAnimator">
            <summary>
            Animator that handles <see cref="T:System.Single"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.FloatAnimator.Interpolate(System.Double,System.Single,System.Single)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.GradientBrushAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Media.SolidColorBrush"/> values. 
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.Int16Animator">
            <summary>
            Animator that handles <see cref="T:System.Int16"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.Int16Animator.Interpolate(System.Double,System.Int16,System.Int16)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.Int32Animator">
            <summary>
            Animator that handles <see cref="T:System.Int32"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.Int32Animator.Interpolate(System.Double,System.Int32,System.Int32)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.Int64Animator">
            <summary>
            Animator that handles <see cref="T:System.Int64"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.Int64Animator.Interpolate(System.Double,System.Int64,System.Int64)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.PointAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Point"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.RectAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Rect"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.RelativePointAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.RelativePoint"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.SizeAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Size"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.ISolidColorBrushAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Media.SolidColorBrush"/> values. 
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.ThicknessAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Thickness"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.TransformAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Media.Transform"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.TransformAnimator.Apply(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animators.TransformAnimator.Interpolate(System.Double,System.Double,System.Double)">
            <inheritdocs/> 
        </member>
        <member name="T:Avalonia.Animation.Animators.UInt16Animator">
            <summary>
            Animator that handles <see cref="T:System.UInt16"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.UInt16Animator.Interpolate(System.Double,System.UInt16,System.UInt16)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.UInt32Animator">
            <summary>
            Animator that handles <see cref="T:System.UInt32"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.UInt32Animator.Interpolate(System.Double,System.UInt32,System.UInt32)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.UInt64Animator">
            <summary>
            Animator that handles <see cref="T:System.UInt64"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.UInt64Animator.Interpolate(System.Double,System.UInt64,System.UInt64)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.Animators.VectorAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Vector"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.EffectAnimator.Interpolate(System.Double,Avalonia.Media.IEffect,Avalonia.Media.IEffect)">
            <summary>
            Fallback implementation of <see cref="T:Avalonia.Media.IEffect"/> animation.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.AnimatorTransitionObservable`2">
            <summary>
            Transition observable based on an <see cref="T:Avalonia.Animation.Animators.Animator`1"/> producing a value.
            </summary>
            <typeparam name="T">Type of the transitioned value.</typeparam>
            <typeparam name="TAnimator">Type of the animator.</typeparam>
        </member>
        <member name="T:Avalonia.Animation.CompositePageTransition">
            <summary>
            Defines a composite page transition that can be used to combine multiple transitions.
            </summary>
            <remarks>
            <para>
            Instantiate the <see cref="T:Avalonia.Animation.CompositePageTransition" /> in XAML and initialize the
            <see cref="T:Avalonia.Animation.Transitions" /> property in order to have many animations triggered at once.
            For example, you can combine <see cref="T:Avalonia.Animation.CrossFade"/> and <see cref="T:Avalonia.Animation.PageSlide"/>.
            <code>
            <![CDATA[
            <reactiveUi:RoutedViewHost Router="{Binding Router}">
              <reactiveUi:RoutedViewHost.PageTransition>
                <CompositePageTransition>
                  <PageSlide Duration="0.5" />
                  <CrossFade Duration="0.5" />
                </CompositePageTransition>
              </reactiveUi:RoutedViewHost.PageTransition>
            </reactiveUi:RoutedViewHost>
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Animation.CompositePageTransition.PageTransitions">
            <summary>
            Gets or sets the transitions to be executed. Can be defined from XAML.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CompositePageTransition.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Animation.CrossFade">
            <summary>
            Defines a cross-fade animation between two <see cref="T:Avalonia.Visual"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CrossFade.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.CrossFade"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CrossFade.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.CrossFade"/> class.
            </summary>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="P:Avalonia.Animation.CrossFade.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.CrossFade.FadeInEasing">
            <summary>
            Gets or sets element entrance easing.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.CrossFade.FadeOutEasing">
            <summary>
            Gets or sets element exit easing.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CrossFade.Start(Avalonia.Visual,Avalonia.Visual,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Avalonia.Animation.CrossFade.Start(Avalonia.Visual,Avalonia.Visual,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Avalonia.Animation.CrossFade.Avalonia#Animation#IPageTransition#Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the animation.
            </summary>
            <param name="from">
            The control that is being transitioned away from. May be null.
            </param>
            <param name="to">
            The control that is being transitioned to. May be null.
            </param>
            <param name="forward">
            Unused for cross-fades.
            </param>
            <param name="cancellationToken">allowed cancel transition</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that tracks the progress of the animation.
            </returns>
        </member>
        <member name="T:Avalonia.Animation.Cue">
            <summary>
            Determines the time index for a <see cref="T:Avalonia.Animation.KeyFrame"/>. 
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Cue.CueValue">
            <summary>
            The normalized percent value, ranging from 0.0 to 1.0
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Cue.#ctor(System.Double)">
            <summary>
            Sets a new <see cref="T:Avalonia.Animation.Cue"/> object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Avalonia.Animation.Cue.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string to a <see cref="T:Avalonia.Animation.Cue"/> object.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Cue.Equals(System.Double)">
            <summary>
            Checks for equality between a <see cref="T:Avalonia.Animation.Cue"/>
            and a <see cref="T:System.Double"/> value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Animation.DisposeAnimationInstanceSubject`1">
            <summary>
            Manages the lifetime of animation instances as determined by its selector state.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Easings.BackEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a overshooting cubic function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.BackEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.BackEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.BackEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.BackEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a overshooting cubic function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.BackEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.BounceEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a simulated bounce function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.BounceEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.BounceEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piecewise simulated bounce function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.BounceEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.BounceEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a simulated bounce function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.BounceEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.CircularEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using the shifted fourth quadrant of
            the unit circle.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.CircularEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.CircularEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piecewise unit circle function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.CircularEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.CircularEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using the shifted second quadrant of
            the unit circle.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.CircularEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.CubicBezier">
            <summary>
            Represents a cubic bezier curve and can compute Y coordinate for a given X
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Easings.CubicEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a cubic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.CubicEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.CubicEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piece-wise cubic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.CubicEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.CubicEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a cubic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.CubicEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.Easing">
            <summary>
            Base class for all Easing classes.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.Easing.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Easings.Easing.Parse(System.String)">
            <summary>
            Parses a Easing type string.
            </summary>
            <param name="e">The Easing type string.</param>
            <returns>Returns the instance of the parsed type.</returns>
        </member>
        <member name="T:Avalonia.Animation.Easings.ElasticEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a damped sine function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.ElasticEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.ElasticEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piecewise damped sine function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.ElasticEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.ElasticEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a damped sine function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.ElasticEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.ExponentialEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a exponential function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.ExponentialEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.ExponentialEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piecewise exponential function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.ExponentialEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.ExponentialEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a exponential function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.ExponentialEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.IEasing">
            <summary>
            Defines the interface for easing classes.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.IEasing.Ease(System.Double)">
            <summary>
            Returns the value of the transition for the specified progress.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Easings.LinearEasing">
            <summary>
            Linearly eases a <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.LinearEasing.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuadraticEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a quadratic function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuadraticEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuadraticEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piece-wise quadratic function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuadraticEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuadraticEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a quadratic function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuadraticEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuarticEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a quartic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuarticEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuarticEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piece-wise quartic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuarticEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuarticEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a quartic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuarticEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuinticEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using a quartic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuinticEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuinticEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a piece-wise quartic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuinticEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.QuinticEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using a quartic equation.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.QuinticEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.SineEaseIn">
            <summary>
            Eases in a <see cref="T:System.Double"/> value 
            using the quarter-wave of sine function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.SineEaseIn.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.SineEaseInOut">
            <summary>
            Eases a <see cref="T:System.Double"/> value 
            using a half sine wave function.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.SineEaseInOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.SineEaseOut">
            <summary>
            Eases out a <see cref="T:System.Double"/> value 
            using the quarter-wave of sine function
            with shifted phase.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.SineEaseOut.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.SplineEasing">
            <summary>
            Eases a <see cref="T:System.Double"/> value
            using a user-defined cubic bezier curve.
            Good for custom easing functions that doesn't quite
            fit with the built-in ones. 
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Easings.SplineEasing.X1">
            <summary>
            X coordinate of the first control point
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Easings.SplineEasing.Y1">
            <summary>
            Y coordinate of the first control point
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Easings.SplineEasing.X2">
            <summary>
            X coordinate of the second control point
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Easings.SplineEasing.Y2">
            <summary>
            Y coordinate of the second control point
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.SplineEasing.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.Easings.SpringEasing">
            <summary>
            Eases a <see cref="T:System.Double"/> value using a user-defined spring formula.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Easings.SpringEasing.Mass">
            <summary>
            The spring mass.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Easings.SpringEasing.Stiffness">
            <summary>
            The spring stiffness.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Easings.SpringEasing.Damping">
            <summary>
            The spring damping.
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Easings.SpringEasing.InitialVelocity">
            <summary>
            The spring initial velocity.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Easings.SpringEasing.Ease(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Animation.IAnimation">
            <summary>
            Interface for Animation objects
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IAnimation.Apply(Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <summary>
            Apply the animation to the specified control and run it when <paramref name="match" /> produces <c>true</c>.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IAnimation.RunAsync(Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.Threading.CancellationToken)">
            <summary>
            Run the animation on the specified control.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.IAnimator">
            <summary>
            Interface for Animator objects
            </summary>
        </member>
        <member name="P:Avalonia.Animation.IAnimator.Property">
            <summary>
            The target property.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IAnimator.Apply(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <summary>
            Applies the current KeyFrame group to the specified control.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.InterpolatingTransitionBase`1">
            <summary>
            The base class for user-defined transition that are doing simple value interpolation
            </summary>
        </member>
        <member name="T:Avalonia.Animation.IPageTransition">
            <summary>
            Interface for animations that transition between two pages.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IPageTransition.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the animation.
            </summary>
            <param name="from">
            The control that is being transitioned away from. May be null.
            </param>
            <param name="to">
            The control that is being transitioned to. May be null.
            </param>
            <param name="forward">
            If the animation is bidirectional, controls the direction of the animation.
            </param>
            <param name="cancellationToken">
            Animation cancellation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that tracks the progress of the animation.
            </returns>
        </member>
        <member name="T:Avalonia.Animation.IterationType">
            <summary>
            Defines the valid modes for a <see cref="T:Avalonia.Animation.IterationCount"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.IterationCount">
            <summary>
            Determines the number of iterations of an animation.
            Also defines its repeat behavior. 
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.IterationCount"/> struct.
            </summary>
            <param name="value">The number of iterations of an animation.</param>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.#ctor(System.UInt64,Avalonia.Animation.IterationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.IterationCount"/> struct.
            </summary>
            <param name="value">The size of the IterationCount.</param>
            <param name="type">The unit of the IterationCount.</param>
        </member>
        <member name="P:Avalonia.Animation.IterationCount.Infinite">
            <summary>
            Gets an instance of <see cref="T:Avalonia.Animation.IterationCount"/> that indicates that an animation
            should repeat forever.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.IterationCount.RepeatType">
            <summary>
            Gets the unit of the <see cref="T:Avalonia.Animation.IterationCount"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.IterationCount.IsInfinite">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Animation.IterationCount"/> is set to Infinite.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.IterationCount.Value">
            <summary>
            Gets the number of repeat iterations.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.op_Equality(Avalonia.Animation.IterationCount,Avalonia.Animation.IterationCount)">
            <summary>
            Compares two IterationCount structures for equality.
            </summary>
            <param name="a">The first IterationCount.</param>
            <param name="b">The second IterationCount.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.op_Inequality(Avalonia.Animation.IterationCount,Avalonia.Animation.IterationCount)">
            <summary>
            Compares two IterationCount structures for inequality.
            </summary>
            <param name="rc1">The first IterationCount.</param>
            <param name="rc2">The first IterationCount.</param>
            <returns>True if the structures are unequal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.Equals(System.Object)">
            <summary>
            Determines whether the <see cref="T:Avalonia.Animation.IterationCount"/> is equal to the specified object.
            </summary>
            <param name="o">The object with which to test equality.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.Equals(Avalonia.Animation.IterationCount)">
            <summary>
            Compares two IterationCount structures for equality.
            </summary>
            <param name="IterationCount">The structure with which to test equality.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.GetHashCode">
            <summary>
            Gets a hash code for the IterationCount.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.ToString">
            <summary>
            Gets a string representation of the <see cref="T:Avalonia.Animation.IterationCount"/>.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Avalonia.Animation.IterationCount.Parse(System.String)">
            <summary>
            Parses a string to return a <see cref="T:Avalonia.Animation.IterationCount"/>.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Animation.IterationCount"/>.</returns>
        </member>
        <member name="T:Avalonia.Animation.ITransition">
            <summary>
            Interface for Transition objects.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.ITransition.Apply(Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.Object,System.Object)">
            <summary>
            Applies the transition to the specified <see cref="T:Avalonia.Animation.Animatable"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.ITransition.Property">
            <summary>
            Gets the property to be animated.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.KeyFrame">
            <summary>
            Stores data regarding a specific key
            point and value in an animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.KeyFrame.Setters">
            <summary>
            Gets the setters of <see cref="T:Avalonia.Animation.KeyFrame"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.KeyFrame.KeyTime">
            <summary>
            Gets or sets the key time of this <see cref="T:Avalonia.Animation.KeyFrame"/>.
            </summary>
            <value>The key time.</value>
        </member>
        <member name="P:Avalonia.Animation.KeyFrame.Cue">
            <summary>
            Gets or sets the cue of this <see cref="T:Avalonia.Animation.KeyFrame"/>.
            </summary>
            <value>The cue.</value>
        </member>
        <member name="P:Avalonia.Animation.KeyFrame.KeySpline">
            <summary>
            Gets or sets the KeySpline of this <see cref="T:Avalonia.Animation.KeyFrame"/>.
            </summary>
            <value>The key spline.</value>
        </member>
        <member name="T:Avalonia.Animation.KeyFrames">
            <summary>
            A collection of <see cref="T:Avalonia.Animation.KeyFrame"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.KeyFrames.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.KeyFrames"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.KeyFrames.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Animation.KeyFrame})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.KeyFrames"/> class.
            </summary>
            <param name="items">The initial items in the collection.</param>
        </member>
        <member name="T:Avalonia.Animation.KeySpline">
            <summary>
            Determines how an animation is used based on a cubic bezier curve.
            X1 and X2 must be between 0.0 and 1.0, inclusive.
            See https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.animation.keyspline
            </summary>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.#ctor">
            <summary>
            Create a <see cref="T:Avalonia.Animation.KeySpline"/> with X1 = Y1 = 0 and X2 = Y2 = 1.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:Avalonia.Animation.KeySpline"/> with the given parameters
            </summary>
            <param name="x1">X coordinate for the first control point</param>
            <param name="y1">Y coordinate for the first control point</param>
            <param name="x2">X coordinate for the second control point</param>
            <param name="y2">Y coordinate for the second control point</param>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parse a <see cref="T:Avalonia.Animation.KeySpline"/> from a string. The string
            needs to contain 4 values in it for the 2 control points.
            </summary>
            <param name="value">string with 4 values in it</param>
            <param name="culture">culture of the string</param>
            <exception cref="T:System.FormatException">Thrown if the string does not have 4 values</exception>
            <returns>A <see cref="T:Avalonia.Animation.KeySpline"/> with the appropriate values set</returns>
        </member>
        <member name="P:Avalonia.Animation.KeySpline.ControlPointX1">
            <summary>
            X coordinate of the first control point
            </summary>
        </member>
        <member name="P:Avalonia.Animation.KeySpline.ControlPointY1">
            <summary>
            Y coordinate of the first control point
            </summary>
        </member>
        <member name="P:Avalonia.Animation.KeySpline.ControlPointX2">
            <summary>
            X coordinate of the second control point
            </summary>
        </member>
        <member name="P:Avalonia.Animation.KeySpline.ControlPointY2">
            <summary>
            Y coordinate of the second control point
            </summary>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.GetSplineProgress(System.Double)">
            <summary>
            Calculates spline progress from a linear progress.
            </summary>
            <param name="linearProgress">the linear progress</param>
            <returns>the spline progress</returns>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.IsValid">
            <summary>
            Check to see whether the <see cref="T:Avalonia.Animation.KeySpline"/> is valid by looking
            at its X values.
            </summary>
            <returns>true if the X values for this <see cref="T:Avalonia.Animation.KeySpline"/> fall in 
            acceptable range; false otherwise.</returns>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.IsValidXValue(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.Build">
            <summary>
            Compute cached coefficients.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.GetBezierValue(System.Double,System.Double,System.Double)">
            <summary>
            Get an X or Y value with the Bezier formula.
            </summary>
            <param name="b">the second Bezier coefficient</param>
            <param name="c">the third Bezier coefficient</param>
            <param name="t">the parameter value to evaluate at</param>
            <returns>the value of the Bezier function at the given parameter</returns>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.GetXAndDx(System.Double,System.Double@,System.Double@)">
            <summary>
            Get X and dX/dt at a given parameter
            </summary>
            <param name="t">the parameter value to evaluate at</param>
            <param name="x">the value of x there</param>
            <param name="dx">the value of dx/dt there</param>
        </member>
        <member name="M:Avalonia.Animation.KeySpline.SetParameterFromX(System.Double)">
            <summary>
            Compute the parameter value that corresponds to a given X value, using a modified
            clamped Newton-Raphson algorithm to solve the equation X(t) - time = 0. We make 
            use of some known properties of this particular function:
            * We are only interested in solutions in the interval [0,1]
            * X(t) is increasing, so we can assume that if X(t) > time t > solution.  We use
              that to clamp down the search interval with every probe.
            * The derivative of X and Y are between 0 and 3.
            </summary>
            <param name="time">the time, scaled to fit in [0,1]</param>
        </member>
        <member name="T:Avalonia.Animation.KeySplineTypeConverter">
            <summary>
            Converts string values to <see cref="T:Avalonia.Animation.KeySpline"/> values
            </summary>
        </member>
        <member name="T:Avalonia.Animation.PageSlide">
            <summary>
            Transitions between two pages by sliding them horizontally or vertically.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.PageSlide.SlideAxis">
            <summary>
            The axis on which the PageSlide should occur
            </summary>
        </member>
        <member name="M:Avalonia.Animation.PageSlide.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.PageSlide"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.PageSlide.#ctor(System.TimeSpan,Avalonia.Animation.PageSlide.SlideAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.PageSlide"/> class.
            </summary>
            <param name="duration">The duration of the animation.</param>
            <param name="orientation">The axis on which the animation should occur</param>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.Orientation">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.SlideInEasing">
            <summary>
            Gets or sets element entrance easing.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.SlideOutEasing">
            <summary>
            Gets or sets element exit easing.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.PageSlide.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Animation.PageSlide.GetVisualParent(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Gets the common visual parent of the two control.
            </summary>
            <param name="from">The from control.</param>
            <param name="to">The to control.</param>
            <returns>The common parent.</returns>
            <exception cref="T:System.ArgumentException">
            The two controls do not share a common parent.
            </exception>
            <remarks>
            Any one of the parameters may be null, but not both.
            </remarks>
        </member>
        <member name="T:Avalonia.Animation.PlaybackDirection">
            <summary>
            Determines the playback direction of an animation.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlaybackDirection.Normal">
            <summary>
            The animation is played normally.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlaybackDirection.Reverse">
            <summary>
            The animation is played in reverse direction.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlaybackDirection.Alternate">
            <summary>
            The animation is played forwards first, then backwards.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlaybackDirection.AlternateReverse">
            <summary>
            The animation is played backwards first, then forwards.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.PlayState">
            <summary>
            Determines the playback state of an animation.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlayState.Run">
            <summary>
            The animation is running.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlayState.Pause">
            <summary>
            The animation is paused.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.PlayState.Stop">
            <summary>
            The animation is stopped.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Spring">
            <summary>
            Determines how an animation is used based on spring formula.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Spring.#ctor">
            <summary>
            Create a <see cref="T:Avalonia.Animation.Spring"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Spring.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:Avalonia.Animation.Spring"/> with the given parameters.
            </summary>
            <param name="mass">The spring mass.</param>
            <param name="stiffness">The spring stiffness.</param>
            <param name="damping">The spring damping.</param>
            <param name="initialVelocity">The spring initial velocity.</param>
        </member>
        <member name="M:Avalonia.Animation.Spring.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parse a <see cref="T:Avalonia.Animation.Spring"/> from a string. The string needs to contain 4 values in it.
            </summary>
            <param name="value">string with 4 values in it</param>
            <param name="culture">culture of the string</param>
            <exception cref="T:System.FormatException">Thrown if the string does not have 4 values</exception>
            <returns>A <see cref="T:Avalonia.Animation.Spring"/> with the appropriate values set</returns>
        </member>
        <member name="P:Avalonia.Animation.Spring.Mass">
            <summary>
            The spring mass.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Spring.Stiffness">
            <summary>
            The spring stiffness.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Spring.Damping">
            <summary>
            The spring damping.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Spring.InitialVelocity">
            <summary>
            The spring initial velocity.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Spring.GetSpringProgress(System.Double)">
            <summary>
            Calculates spring progress from a linear progress.
            </summary>
            <param name="linearProgress">the linear progress</param>
            <returns>The spring progress</returns>
        </member>
        <member name="M:Avalonia.Animation.Spring.Build">
            <summary>
            Create cached spring solver.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.SpringTypeConverter">
            <summary>
            Converts string values to <see cref="T:Avalonia.Animation.Spring"/> values.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Transition`1">
            <summary>
            Defines how a property should be animated using a transition.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Transition`1.Duration">
            <summary>
            Gets or sets the duration of the transition.
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Transition`1.Delay">
            <summary>
            Gets or sets delay before starting the transition.
            </summary> 
        </member>
        <member name="P:Avalonia.Animation.Transition`1.Easing">
            <summary>
            Gets the easing class to be used.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.Transition`1.Property">
            <inheritdocs/>
        </member>
        <member name="M:Avalonia.Animation.Transition`1.DoTransition(System.IObservable{System.Double},`0,`0)">
            <summary>
            Apply interpolation to the property.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Transition`1.Avalonia#Animation#ITransition#Apply(Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.Object,System.Object)">
            <inheritdocs/>
        </member>
        <member name="T:Avalonia.Animation.TransitionInstance">
            <summary>
            Handles the timing and lifetime of a <see cref="T:Avalonia.Animation.Transition`1"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.TransitionInstance.TransitionClock">
            <summary>
            TODO: This clock is still fairly expensive due to <see cref="T:Avalonia.Animation.ClockBase"/> implementation.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.TransitionObservableBase`1">
            <summary>
            Provides base for observables implementing transitions.
            </summary>
            <typeparam name="T">Type of the transitioned value.</typeparam>
        </member>
        <member name="M:Avalonia.Animation.TransitionObservableBase`1.ProduceValue(System.Double)">
            <summary>
            Produces value at given progress time point.
            </summary>
            <param name="progress">Transition progress.</param>
        </member>
        <member name="T:Avalonia.Animation.Transitions">
            <summary>
            A collection of <see cref="T:Avalonia.Animation.ITransition"/> definitions.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Transitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.Transitions"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.BoxShadowsTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.BoxShadows"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.BrushTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.IBrush"/> type.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.ColorTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.Color"/> type.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.CornerRadiusTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.CornerRadius"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.DoubleTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:System.Double"/> types.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.FloatTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:System.Single"/> types.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.IntegerTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:System.Int32"/> types.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.PointTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Point"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.RelativePointTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.RelativePoint"/> type.
            </summary>  
        </member>
        <member name="M:Avalonia.Animation.Rotate3DTransition.#ctor(System.TimeSpan,Avalonia.Animation.PageSlide.SlideAxis,System.Nullable{System.Double})">
            <summary>
             Creates a new instance of the <see cref="T:Avalonia.Animation.Rotate3DTransition"/>
            </summary>
            <param name="duration">How long the rotation should take place</param>
            <param name="orientation">The orientation of the rotation</param>
            <param name="depth">Defines the depth of the 3D Effect. If null, depth will be calculated automatically from the width or height of the common parent of the visual being rotated</param>
        </member>
        <member name="P:Avalonia.Animation.Rotate3DTransition.Depth">
            <summary>
             Defines the depth of the 3D Effect. If null, depth will be calculated automatically from the width or height
             of the common parent of the visual being rotated.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Rotate3DTransition.#ctor">
            <summary>
             Creates a new instance of the <see cref="T:Avalonia.Animation.Rotate3DTransition"/>
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Rotate3DTransition.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Animation.SizeTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Size"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.ThicknessTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Thickness"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.VectorTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Vector"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.Utils.BounceEaseUtils">
            <summary>
            Helper static class for BounceEase classes.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Utils.BounceEaseUtils.Bounce(System.Double)">
            <summary>
            Returns the consequent <see cref="T:System.Double"/> value of
            a simulated bounce function.
            </summary>
            <param name="progress">The amount of progress from 0 to 1.</param>
            <returns>The result of the easing function</returns>
        </member>
        <member name="T:Avalonia.Animation.Utils.EasingUtils">
            <summary>
            Helper static class for easing mathematical constants.
            </summary>
        </member>
        <member name="F:Avalonia.Animation.Utils.EasingUtils.HALFPI">
            <summary>
            Half of <see cref="F:System.Math.PI"/>
            </summary>
        </member>
        <member name="T:Avalonia.Animation.EffectTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.IEffect"/> type.
            </summary>
        </member>
        <member name="T:Avalonia.AttachedProperty`1">
            <summary>
            An attached avalonia property.
            </summary>
            <typeparam name="TValue">The type of the property's value.</typeparam>
        </member>
        <member name="M:Avalonia.AttachedProperty`1.#ctor(System.String,System.Type,System.Type,Avalonia.StyledPropertyMetadata{`0},System.Boolean,System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AttachedProperty`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The class that is registering the property.</param>
            <param name="hostType">The class that the property being is registered on.</param>
            <param name="metadata">The property metadata.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="validate">A value validation callback.</param>
        </member>
        <member name="M:Avalonia.AttachedProperty`1.AddOwner``1(Avalonia.StyledPropertyMetadata{`0})">
            <summary>
            Attaches the property as a non-attached property on the specified type.
            </summary>
            <typeparam name="TOwner">The owner type.</typeparam>
            <returns>The property.</returns>
        </member>
        <member name="T:Avalonia.AvaloniaInternalException">
            <summary>
            Exception signifying an internal logic error in Avalonia.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaInternalException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Avalonia.AvaloniaObject">
            <summary>
            An object with <see cref="T:Avalonia.AvaloniaProperty"/> support.
            </summary>
            <remarks>
            This class is analogous to DependencyObject in WPF.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaObject"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.AvaloniaObject.PropertyChanged">
            <summary>
            Raised when a <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="E:Avalonia.AvaloniaObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Raised when a <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaObject.InheritanceParent">
            <summary>
            Gets or sets the parent object that inherited <see cref="T:Avalonia.AvaloniaProperty"/> values
            are inherited from.
            </summary>
            <value>
            The inheritance parent.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaObject.Item(Avalonia.AvaloniaProperty)">
            <summary>
            Gets or sets the value of a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Avalonia.AvaloniaObject.Item(Avalonia.Data.IndexerDescriptor)">
            <summary>
            Gets or sets a binding for a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="binding">The binding information.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.CheckAccess">
            <summary>
            Returns a value indicating whether the current thread is the UI thread.
            </summary>
            <returns>true if the current thread is the UI thread; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.VerifyAccess">
            <summary>
            Checks that the current thread is the UI thread and throws if not.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaObject.ClearValue(Avalonia.AvaloniaProperty)">
            <summary>
            Clears a <see cref="T:Avalonia.AvaloniaProperty"/>'s local value.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.ClearValue``1(Avalonia.AvaloniaProperty{``0})">
            <summary>
            Clears a <see cref="T:Avalonia.AvaloniaProperty"/>'s local value.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.ClearValue``1(Avalonia.StyledProperty{``0})">
            <summary>
            Clears a <see cref="T:Avalonia.AvaloniaProperty"/>'s local value.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.ClearValue``1(Avalonia.DirectPropertyBase{``0})">
            <summary>
            Clears a <see cref="T:Avalonia.AvaloniaProperty"/>'s local value.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Equals(System.Object)">
            <summary>
            Compares two objects using reference equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <remarks>
            Overriding Equals and GetHashCode on an AvaloniaObject is disallowed for two reasons:
            
            - AvaloniaObjects are by their nature mutable
            - The presence of attached properties means that the semantics of equality are
              difficult to define
            
            See https://github.com/AvaloniaUI/Avalonia/pull/2747 for the discussion that prompted
            this.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <remarks>
            Overriding Equals and GetHashCode on an AvaloniaObject is disallowed for two reasons:
            
            - AvaloniaObjects are by their nature mutable
            - The presence of attached properties means that the semantics of equality are
              difficult to define
            
            See https://github.com/AvaloniaUI/Avalonia/pull/2747 for the discussion that prompted
            this.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetValue(Avalonia.AvaloniaProperty)">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetValue``1(Avalonia.StyledProperty{``0})">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetValue``1(Avalonia.DirectPropertyBase{``0})">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetBaseValue``1(Avalonia.StyledProperty{``0})">
            <summary>
            Gets an <see cref="T:Avalonia.AvaloniaProperty"/> base value.
            </summary>
            <param name="property">The property.</param>
            <remarks>
            Gets the value of the property excluding animated values, otherwise <see cref="P:Avalonia.Data.Optional`1.Empty"/>.
            Note that this method does not return property values that come from inherited or default values.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.IsAnimating(Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is animating.
            </summary>
            <param name="property">The property.</param>
            <returns>True if the property is animating, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.IsSet(Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is set on this object.
            </summary>
            <param name="property">The property.</param>
            <returns>True if the property is set, otherwise false.</returns>
            <remarks>
            Returns true if <paramref name="property"/> is a styled property which has a value
            assigned to it or a binding targeting it; otherwise false.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetValue(Avalonia.AvaloniaProperty,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetValue``1(Avalonia.StyledProperty{``0},``0,Avalonia.Data.BindingPriority)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> if setting the property can be undone, otherwise null.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetValue``1(Avalonia.DirectPropertyBase{``0},``0)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetCurrentValue(Avalonia.AvaloniaProperty,System.Object)">
            <summary>
            Sets the value of a dependency property without changing its value source.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <remarks>
            This method is used by a component that programmatically sets the value of one of its
            own properties without disabling an application's declared use of the property. The
            method changes the effective value of the property, but existing data bindings and
            styles will continue to work.
            
            The new value will have the property's current <see cref="T:Avalonia.Data.BindingPriority"/>, even if
            that priority is <see cref="F:Avalonia.Data.BindingPriority.Unset"/> or 
            <see cref="F:Avalonia.Data.BindingPriority.Inherited"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetCurrentValue``1(Avalonia.StyledProperty{``0},``0)">
            <summary>
            Sets the value of a dependency property without changing its value source.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <remarks>
            This method is used by a component that programmatically sets the value of one of its
            own properties without disabling an application's declared use of the property. The
            method changes the effective value of the property, but existing data bindings and
            styles will continue to work.
            
            The new value will have the property's current <see cref="T:Avalonia.Data.BindingPriority"/>, even if
            that priority is <see cref="F:Avalonia.Data.BindingPriority.Unset"/> or 
            <see cref="F:Avalonia.Data.BindingPriority.Inherited"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind(Avalonia.AvaloniaProperty,System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.StyledProperty{``0},System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.StyledProperty{``0},System.IObservable{``0},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.StyledProperty{``0},System.IObservable{Avalonia.Data.BindingValue{``0}},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.DirectPropertyBase{``0},System.IObservable{System.Object})">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.DirectPropertyBase{``0},System.IObservable{``0})">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.DirectPropertyBase{``0},System.IObservable{Avalonia.Data.BindingValue{``0}})">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.CoerceValue(Avalonia.AvaloniaProperty)">
            <summary>
            Coerces the specified <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Avalonia#Diagnostics#IAvaloniaObjectDebug#GetPropertyChangedSubscribers">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetBindingWarningLogger(Avalonia.AvaloniaProperty,System.Exception)">
            <summary>
            Gets a logger to which a binding warning may be written.
            </summary>
            <param name="property">The property that the error occurred on.</param>
            <param name="e">The binding exception, if any.</param>
            <remarks>
            This is overridden in <see cref="T:Avalonia.Visual"/> to prevent logging binding errors when a
            control is not attached to the visual tree.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingValueType,System.Exception)">
            <summary>
            Called to update the validation state for properties for which data validation is
            enabled.
            </summary>
            <param name="property">The property.</param>
            <param name="state">The current data binding state.</param>
            <param name="error">The current data binding error, if any.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.OnPropertyChangedCore(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when a avalonia property changes on the object.
            </summary>
            <param name="change">The property change details.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when a avalonia property changes on the object.
            </summary>
            <param name="change">The property change details.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.RaisePropertyChanged``1(Avalonia.DirectPropertyBase{``0},``0,``0)">
            <summary>
            Raises the <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event for a direct property.
            </summary>
            <param name="property">The property that has changed.</param>
            <param name="oldValue">The old property value.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.RaisePropertyChanged``1(Avalonia.AvaloniaProperty{``0},Avalonia.Data.Optional{``0},Avalonia.Data.BindingValue{``0},Avalonia.Data.BindingPriority,System.Boolean)">
            <summary>
            Raises the <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event.
            </summary>
            <param name="property">The property that has changed.</param>
            <param name="oldValue">The old property value.</param>
            <param name="newValue">The new property value.</param>
            <param name="priority">The priority of the binding that produced the value.</param>
            <param name="isEffectiveValue">
            Whether the notification represents a change to the effective value of the property.
            </param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetAndRaise``1(Avalonia.DirectPropertyBase{``0},``0@,``0)">
            <summary>
            Sets the backing field for a direct avalonia property, raising the 
            <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event if the value has changed.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="field">The backing field.</param>
            <param name="value">The value.</param>
            <returns>
            True if the value changed, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetDirectValueUnchecked``1(Avalonia.DirectPropertyBase{``0},``0)">
            <summary>
            Sets the value of a direct property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetDirectValueUnchecked``1(Avalonia.DirectPropertyBase{``0},Avalonia.Data.BindingValue{``0})">
            <summary>
            Sets the value of a direct property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetDescription(System.Object)">
            <summary>
            Gets a description of an observable that van be used in logs.
            </summary>
            <param name="o">The observable.</param>
            <returns>The description.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.LogPropertySet``1(Avalonia.AvaloniaProperty{``0},``0,Avalonia.Data.BindingPriority)">
            <summary>
            Logs a property set message.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The new value.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="T:Avalonia.AvaloniaObjectExtensions">
            <summary>
            Provides extension methods for <see cref="T:Avalonia.AvaloniaObject"/> and related classes.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.ToBinding``1(System.IObservable{``0})">
            <summary>
            Converts an <see cref="T:System.IObservable`1"/> to an <see cref="T:Avalonia.Data.IBinding"/>.
            </summary>
            <typeparam name="T">The type produced by the observable.</typeparam>
            <param name="source">The observable</param>
            <returns>An <see cref="T:Avalonia.Data.IBinding"/>.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetObservable(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets an observable for an <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            An observable which fires immediately with the current value of the property on the
            object and subsequently each time the property value changes.
            </returns>
            <remarks>
            The subscription to <paramref name="o"/> is created using a weak reference.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetObservable``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets an observable for an <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <typeparam name="T">The property type.</typeparam>
            <param name="property">The property.</param>
            <returns>
            An observable which fires immediately with the current value of the property on the
            object and subsequently each time the property value changes.
            </returns>
            <remarks>
            The subscription to <paramref name="o"/> is created using a weak reference.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetObservable``2(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:Avalonia.AvaloniaObjectExtensions.GetObservable``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0})"/>
            <param name="o"/>
            <param name="property"/>
            <param name="converter">A method which is executed to convert each property value to <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetBindingObservable(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets an observable for an <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            An observable which fires immediately with the current value of the property on the
            object and subsequently each time the property value changes.
            </returns>
            <remarks>
            The subscription to <paramref name="o"/> is created using a weak reference.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetBindingObservable``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets an observable for an <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <typeparam name="T">The property type.</typeparam>
            <param name="property">The property.</param>
            <returns>
            An observable which fires immediately with the current value of the property on the
            object and subsequently each time the property value changes.
            </returns>
            <remarks>
            The subscription to <paramref name="o"/> is created using a weak reference.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetBindingObservable``2(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:Avalonia.AvaloniaObjectExtensions.GetBindingObservable``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0})"/>
            <param name="o"/>
            <param name="property"/>
            <param name="converter">A method which is executed to convert each property value to <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetPropertyChangedObservable(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets an observable that listens for property changed events for an
            <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            An observable which when subscribed pushes the property changed event args
            each time a <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event is raised
            for the specified property.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.Bind``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0},System.IObservable{Avalonia.Data.BindingValue{``0}},Avalonia.Data.BindingPriority)">
            <summary>
            Binds an <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="target">The object.</param>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.Bind``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0},System.IObservable{``0},Avalonia.Data.BindingPriority)">
            <summary>
            Binds an <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <param name="target">The object.</param>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.Bind(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,Avalonia.Data.IBinding,System.Object)">
            <summary>
            Binds a property on an <see cref="T:Avalonia.AvaloniaObject"/> to an <see cref="T:Avalonia.Data.IBinding"/>.
            </summary>
            <param name="target">The object.</param>
            <param name="property">The property to bind.</param>
            <param name="binding">The binding.</param>
            <param name="anchor">
            An optional anchor from which to locate required context. When binding to objects that
            are not in the logical tree, certain types of binding need an anchor into the tree in 
            order to locate named controls or resources. The <paramref name="anchor"/> parameter 
            can be used to provice this context.
            </param>
            <returns>An <see cref="T:System.IDisposable"/> which can be used to cancel the binding.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetValue``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="target">The object.</param>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetBaseValue(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets an <see cref="T:Avalonia.AvaloniaProperty"/> base value.
            </summary>
            <param name="target">The object.</param>
            <param name="property">The property.</param>
            <remarks>
            For styled properties, gets the value of the property excluding animated values, otherwise
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>. Note that this method does not return
            property values that come from inherited or default values.
            
            For direct properties returns the current value of the property.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetBaseValue``1(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets an <see cref="T:Avalonia.AvaloniaProperty"/> base value.
            </summary>
            <param name="target">The object.</param>
            <param name="property">The property.</param>
            <remarks>
            For styled properties, gets the value of the property excluding animated values, otherwise
            <see cref="P:Avalonia.Data.Optional`1.Empty"/>. Note that this method does not return property values
            that come from inherited or default values.
            
            For direct properties returns the current value of the property.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.AddClassHandler``1(System.IObservable{Avalonia.AvaloniaPropertyChangedEventArgs},System.Action{``0,Avalonia.AvaloniaPropertyChangedEventArgs})">
            <summary>
            Subscribes to a property changed notifications for changes that originate from a
            <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TTarget">The type of the property change sender.</typeparam>
            <param name="observable">The property changed observable.</param>
            <param name="action">
            The method to call. The parameters are the sender and the event args.
            </param>
            <returns>A disposable that can be used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.AddClassHandler``2(System.IObservable{Avalonia.AvaloniaPropertyChangedEventArgs{``1}},System.Action{``0,Avalonia.AvaloniaPropertyChangedEventArgs{``1}})">
            <summary>
            Subscribes to a property changed notifications for changes that originate from a
            <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TTarget">The type of the property change sender.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="observable">The property changed observable.</param>
            <param name="action">
            The method to call. The parameters are the sender and the event args.
            </param>
            <returns>A disposable that can be used to terminate the subscription.</returns>
        </member>
        <member name="T:Avalonia.AvaloniaProperty">
            <summary>
            Base class for avalonia properties.
            </summary>
        </member>
        <member name="F:Avalonia.AvaloniaProperty.UnsetValue">
            <summary>
            Represents an unset property value.
            </summary>
        </member>
        <member name="F:Avalonia.AvaloniaProperty._defaultMetadata">
            <summary>
            Provides a metadata object for types which have no metadata of their own.
            </summary>
        </member>
        <member name="F:Avalonia.AvaloniaProperty._singleMetadata">
            <summary>
            Provides a fast path when the property has no metadata overrides.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.#ctor(System.String,System.Type,System.Type,System.Type,Avalonia.AvaloniaPropertyMetadata,System.Action{Avalonia.AvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="valueType">The type of the property's value.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="hostType">The class that the property being is registered on.</param>
            <param name="metadata">The property metadata.</param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.#ctor(Avalonia.AvaloniaProperty,System.Type,Avalonia.AvaloniaPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="source">The direct property to copy.</param>
            <param name="ownerType">The new owner type.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.PropertyType">
            <summary>
            Gets the type of the property's value.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.OwnerType">
            <summary>
            Gets the type of the class that registered the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Inherits">
            <summary>
            Gets a value indicating whether the property inherits its value.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.IsAttached">
            <summary>
            Gets a value indicating whether this is an attached property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.IsDirect">
            <summary>
            Gets a value indicating whether this is a direct property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.IsReadOnly">
            <summary>
            Gets a value indicating whether this is a readonly property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Changed">
            <summary>
            Gets an observable that is fired when this property changes on any
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </summary>
            <value>
            An observable that is fired when this property changes on any
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Notifying">
            <summary>
            Gets a method that gets called before and after the property starts being notified on an
            object.
            </summary>
            <remarks>
            When a property changes, change notifications are sent to all property subscribers;
            for example via the <see cref="P:Avalonia.AvaloniaProperty.Changed"/> observable and and the
            <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event. If this callback is set for a property,
            then it will be called before and after these notifications take place. The bool argument
            will be true before the property change notifications are sent and false afterwards. This
            callback is intended to support Control.IsDataContextChanging.
            </remarks>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Id">
            <summary>
            Gets the integer ID that represents this property.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_LogicalNot(Avalonia.AvaloniaProperty)">
            <summary>
            Provides access to a property's binding via the <see cref="T:Avalonia.AvaloniaObject"/>
            indexer.
            </summary>
            <param name="property">The property.</param>
            <returns>A <see cref="T:Avalonia.Data.IndexerDescriptor"/> describing the binding.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_OnesComplement(Avalonia.AvaloniaProperty)">
            <summary>
            Provides access to a property's template binding via the <see cref="T:Avalonia.AvaloniaObject"/>
            indexer.
            </summary>
            <param name="property">The property.</param>
            <returns>A <see cref="T:Avalonia.Data.IndexerDescriptor"/> describing the binding.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_Equality(Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty)">
            <summary>
            Tests two <see cref="T:Avalonia.AvaloniaProperty"/>s for equality.
            </summary>
            <param name="a">The first property.</param>
            <param name="b">The second property.</param>
            <returns>True if the properties are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_Inequality(Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty)">
            <summary>
            Tests two <see cref="T:Avalonia.AvaloniaProperty"/>s for inequality.
            </summary>
            <param name="a">The first property.</param>
            <param name="b">The second property.</param>
            <returns>True if the properties are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Register``2(System.String,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``1,System.Boolean},System.Func{Avalonia.AvaloniaObject,``1,``1},System.Boolean)">
            <summary>
            Registers a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A value validation callback.</param>
            <param name="coerce">A value coercion callback.</param>
            <param name="enableDataValidation">Whether the property is interested in data validation.</param>
            <returns>A <see cref="T:Avalonia.StyledProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Register``2(System.String,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``1,System.Boolean},System.Func{Avalonia.AvaloniaObject,``1,``1},System.Boolean,System.Action{Avalonia.AvaloniaObject,System.Boolean})">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A value validation callback.</param>
            <param name="coerce">A value coercion callback.</param>
            <param name="enableDataValidation">if is set to true enable data validation.</param>
            <param name="notifying">
            A method that gets called before and after the property starts being notified on an
            object; the bool argument will be true before and false afterwards. This callback is
            intended to support IsDataContextChanging.
            </param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RegisterAttached``3(System.String,``2,System.Boolean,Avalonia.Data.BindingMode,System.Func{``2,System.Boolean},System.Func{Avalonia.AvaloniaObject,``2,``2})">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="THost">The type of the class that the property is to be registered on.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A value validation callback.</param>
            <param name="coerce">A value coercion callback.</param>
            <returns>A <see cref="T:Avalonia.AvaloniaProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RegisterAttached``2(System.String,System.Type,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``1,System.Boolean},System.Func{Avalonia.AvaloniaObject,``1,``1})">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="THost">The type of the class that the property is to be registered on.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A value validation callback.</param>
            <param name="coerce">A value coercion callback.</param>
            <returns>A <see cref="T:Avalonia.AvaloniaProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RegisterDirect``2(System.String,System.Func{``0,``1},System.Action{``0,``1},``1,Avalonia.Data.BindingMode,System.Boolean)">
            <summary>
            Registers a direct <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property.</param>
            <param name="unsetValue">The value to use when the property is cleared.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="enableDataValidation">
            Whether the property is interested in data validation.
            </param>
            <returns>A <see cref="T:Avalonia.AvaloniaProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Bind">
            <summary>
            Returns a binding accessor that can be passed to <see cref="T:Avalonia.AvaloniaObject"/>'s []
            operator to initiate a binding.
            </summary>
            <returns>A <see cref="T:Avalonia.Data.IndexerDescriptor"/>.</returns>
            <remarks>
            The ! and ~ operators are short forms of this.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Equals(Avalonia.AvaloniaProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.GetMetadata``1">
            <summary>
            Gets the <see cref="T:Avalonia.AvaloniaPropertyMetadata"/> which applies to this property when it is used with the specified type.
            </summary>
            <typeparam name="T">The type for which to retrieve metadata.</typeparam>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.GetMetadata(System.Type)">
            <inheritdoc cref="M:Avalonia.AvaloniaProperty.GetMetadata``1"/>
            <param name="type">The type for which to retrieve metadata.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.IsValidValue(System.Object)">
            <summary>
            Checks whether the <paramref name="value"/> is valid for the property.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the value is valid, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.ToString">
            <summary>
            Gets the string representation of the property.
            </summary>
            <returns>The property's string representation.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.CreateEffectiveValue(Avalonia.AvaloniaObject)">
            <summary>
            Creates an effective value for the property.
            </summary>
            <param name="o">The effective value owner.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteClearValue(Avalonia.AvaloniaObject)">
            <summary>
            Routes an untyped ClearValue call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteCoerceDefaultValue(Avalonia.AvaloniaObject)">
            <summary>
            Routes an untyped CoerceValue call on a property with its default value to a typed call.
            </summary>
            <param name="o">The object instance.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteGetValue(Avalonia.AvaloniaObject)">
            <summary>
            Routes an untyped GetValue call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteGetBaseValue(Avalonia.AvaloniaObject)">
            <summary>
            Routes an untyped GetBaseValue call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteSetValue(Avalonia.AvaloniaObject,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Routes an untyped SetValue call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> if setting the property can be undone, otherwise null.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteSetCurrentValue(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Routes an untyped SetCurrentValue call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RouteBind(Avalonia.AvaloniaObject,System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Routes an untyped Bind call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
            <param name="source">The binding source.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.OverrideMetadata(System.Type,Avalonia.AvaloniaPropertyMetadata)">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Avalonia.UnsetValueType">
            <summary>
            Class representing the <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="M:Avalonia.UnsetValueType.ToString">
            <summary>
            Returns the string representation of the <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
            <returns>The string "(unset)".</returns>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyChangedEventArgs">
            <summary>
            Provides information for a avalonia property change.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.Sender">
            <summary>
            Gets the <see cref="T:Avalonia.AvaloniaObject"/> that the property changed on.
            </summary>
            <value>The sender object.</value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.Property">
            <summary>
            Gets the property that changed.
            </summary>
            <value>
            The property that changed.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.Priority">
            <summary>
            Gets the priority of the binding that produced the value.
            </summary>
            <value>
            The priority of the new value.
            </value>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyChangedEventArgs`1">
            <summary>
            Provides information for an Avalonia property change.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyChangedEventArgs`1.#ctor(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty{`0},Avalonia.Data.Optional{`0},Avalonia.Data.BindingValue{`0},Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaPropertyChangedEventArgs"/> class.
            </summary>
            <param name="sender">The object that the property changed on.</param>
            <param name="property">The property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <param name="priority">The priority of the binding that produced the value.</param>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs`1.Property">
            <summary>
            Gets the property that changed.
            </summary>
            <value>
            The property that changed.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets the old value of the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value of the property.
            </summary>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyChangedExtensions">
            <summary>
            Provides extensions for <see cref="T:Avalonia.AvaloniaPropertyChangedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyChangedExtensions.GetOldValue``1(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Gets a typed value from <see cref="P:Avalonia.AvaloniaPropertyChangedEventArgs.OldValue"/>.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="e">The event args.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyChangedExtensions.GetNewValue``1(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Gets a typed value from <see cref="P:Avalonia.AvaloniaPropertyChangedEventArgs.NewValue"/>.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="e">The event args.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyChangedExtensions.GetOldAndNewValue``1(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Gets a typed value from <see cref="P:Avalonia.AvaloniaPropertyChangedEventArgs.OldValue"/> and
            <see cref="P:Avalonia.AvaloniaPropertyChangedEventArgs.NewValue"/>.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="e">The event args.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyExtensions">
            <summary>
            Extensions for <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyExtensions.CanValueAffectRender(Avalonia.AvaloniaProperty)">
            <summary>
            Checks if values of given property can affect rendering (via <see cref="T:Avalonia.Media.IAffectsRender"/>).
            </summary>
            <param name="property">Property to check.</param>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyMetadata">
            <summary>
            Base class for avalonia property metadata.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyMetadata.#ctor(Avalonia.Data.BindingMode,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaPropertyMetadata"/> class.
            </summary>
            <param name="defaultBindingMode">The default binding mode.</param>
            <param name="enableDataValidation">Whether the property is interested in data validation.</param>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyMetadata.DefaultBindingMode">
            <summary>
            Gets the default binding mode for the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyMetadata.EnableDataValidation">
            <summary>
            Gets a value indicating whether the property is interested in data validation.
            </summary>
            <remarks>
            Data validation is validation performed at the target of a binding, for example in a
            view model using the INotifyDataErrorInfo interface. Only certain properties on a
            control (such as a TextBox's Text property) will be interested in receiving data
            validation messages so this feature must be explicitly enabled by setting this flag.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyMetadata.Merge(Avalonia.AvaloniaPropertyMetadata,Avalonia.AvaloniaProperty)">
            <summary>
            Merges the metadata with the base metadata.
            </summary>
            <param name="baseMetadata">The base metadata to merge.</param>
            <param name="property">The property to which the metadata is being applied.</param>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyMetadata.GenerateTypeSafeMetadata">
            <summary>
            Gets a copy of this object configured for use with any owner type.
            </summary>
            <remarks>
            For example, delegates which receive the owner object should be removed.
            </remarks>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyRegistry">
            <summary>
            Tracks registered <see cref="T:Avalonia.AvaloniaProperty"/> instances.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyRegistry.Instance">
            <summary>
            Gets the <see cref="T:Avalonia.AvaloniaPropertyRegistry"/> instance
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyRegistry.Properties">
            <summary>
            Gets a list of all registered properties.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegistered(System.Type)">
            <summary>
            Gets all non-attached <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegisteredAttached(System.Type)">
            <summary>
            Gets all attached <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegisteredDirect(System.Type)">
            <summary>
            Gets all direct <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegisteredInherited(System.Type)">
            <summary>
            Gets all inherited <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegistered(Avalonia.AvaloniaObject)">
            <summary>
            Gets all <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a object.
            </summary>
            <param name="o">The object.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegisteredDirect``1(Avalonia.AvaloniaObject,Avalonia.DirectPropertyBase{``0})">
            <summary>
            Gets a direct property as registered on an object.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The direct property.</param>
            <returns>
            The registered.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegistered(System.Type,System.String)">
            <summary>
            Finds a registered property on a type by name.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The property name.</param>
            <returns>
            The registered property or null if no matching property found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The property name contains a '.'.
            </exception>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegistered(Avalonia.AvaloniaObject,System.String)">
            <summary>
            Finds a registered property on an object by name.
            </summary>
            <param name="o">The object.</param>
            <param name="name">The property name.</param>
            <returns>
            The registered property or null if no matching property found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The property name contains a '.'.
            </exception>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegisteredDirect``1(Avalonia.AvaloniaObject,Avalonia.DirectPropertyBase{``0})">
            <summary>
            Finds a direct property as registered on an object.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The direct property.</param>
            <returns>
            The registered property or null if no matching property found.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegistered(System.Int32)">
            <summary>
            Finds a registered property by Id.
            </summary>
            <param name="id">The property Id.</param>
            <returns>The registered property or null if no matching property found.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.IsRegistered(System.Type,Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is registered on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <returns>True if the property is registered, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.IsRegistered(System.Object,Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is registered on a object.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>True if the property is registered, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.Register(System.Type,Avalonia.AvaloniaProperty)">
            <summary>
            Registers a <see cref="T:Avalonia.AvaloniaProperty"/> on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <remarks>
            You won't usually want to call this method directly, instead use the
            <see cref="M:Avalonia.AvaloniaProperty.Register``2(System.String,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``1,System.Boolean},System.Func{Avalonia.AvaloniaObject,``1,``1},System.Boolean)"/>
            method.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.RegisterAttached(System.Type,Avalonia.AvaloniaProperty)">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/> on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <remarks>
            You won't usually want to call this method directly, instead use the
            <see cref="M:Avalonia.AvaloniaProperty.RegisterAttached``2(System.String,System.Type,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``1,System.Boolean},System.Func{Avalonia.AvaloniaObject,``1,``1})"/>
            method.
            </remarks>
        </member>
        <member name="T:Avalonia.AvaloniaProperty`1">
            <summary>
            A typed avalonia property.
            </summary>
            <typeparam name="TValue">The value type of the property.</typeparam>
        </member>
        <member name="M:Avalonia.AvaloniaProperty`1.#ctor(System.String,System.Type,System.Type,Avalonia.AvaloniaPropertyMetadata,System.Action{Avalonia.AvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="hostType">The class that the property being is registered on.</param>
            <param name="metadata">The property metadata.</param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty`1.#ctor(Avalonia.AvaloniaProperty{`0},System.Type,Avalonia.AvaloniaPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty`1"/> class.
            </summary>
            <param name="source">The property to copy.</param>
            <param name="ownerType">The new owner type.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="P:Avalonia.AvaloniaProperty`1.Changed">
            <summary>
            Gets an observable that is fired when this property changes on any
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </summary>
            <value>
            An observable that is fired when this property changes on any
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </value>
        </member>
        <member name="M:Avalonia.AvaloniaProperty`1.NotifyChanged(Avalonia.AvaloniaPropertyChangedEventArgs{`0})">
            <summary>
            Notifies the <see cref="P:Avalonia.AvaloniaProperty`1.Changed"/> observable.
            </summary>
            <param name="e">The observable arguments.</param>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaDictionary`2">
            <summary>
            A notifying dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaDictionary`2"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaDictionary`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaDictionary`2.PropertyChanged">
            <summary>
            Raised when a property on the collection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Item(`0)">
            <summary>
            Gets or sets the named resource.
            </summary>
            <param name="key">The resource key.</param>
            <returns>The resource, or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaDictionaryExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:Avalonia.Collections.AvaloniaList`1"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionaryExtensions.ForEachItem``2(Avalonia.Collections.IAvaloniaReadOnlyDictionary{``0,``1},System.Action{``0,``1},System.Action{``0,``1},System.Action,System.Boolean)">
            <summary>
            Invokes an action for each item in a collection and subsequently each item added or
            removed from the collection.
            </summary>
            <typeparam name="TKey">The key type of the collection items.</typeparam>
            <typeparam name="TValue">The value type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="added">
            An action called initially for each item in the collection and subsequently for each
            item added to the collection. The parameters passed are the index in the collection and
            the item.
            </param>
            <param name="removed">
            An action called for each item removed from the collection. The parameters passed are
            the index in the collection and the item.
            </param>
            <param name="reset">
            An action called when the collection is reset. This will be followed by calls to 
            <paramref name="added"/> for each item present in the collection after the reset.
            </param>
            <param name="weakSubscription">
            Indicates if a weak subscription should be used to track changes to the collection.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="T:Avalonia.Collections.ResetBehavior">
            <summary>
            Describes the action notified on a clear of a <see cref="T:Avalonia.Collections.AvaloniaList`1"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.ResetBehavior.Reset">
            <summary>
            Clearing the list notifies a with a 
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.ResetBehavior.Remove">
            <summary>
            Clearing the list notifies a with a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaList`1">
            <summary>
            A notifying list.
            </summary>
            <typeparam name="T">The type of the list items.</typeparam>
            <remarks>
            <para>
            AvaloniaList is similar to <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            with a few added features:
            </para>
            
            <list type="bullet">
            <item>
            It can be configured to notify the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/> action instead of a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> when the list is cleared by
            setting <see cref="P:Avalonia.Collections.AvaloniaList`1.ResetBehavior"/> to <see cref="F:Avalonia.Collections.ResetBehavior.Remove"/>.
            removed
            </item>
            <item>
            A <see cref="P:Avalonia.Collections.AvaloniaList`1.Validate"/> function can be used to validate each item before insertion.
            removed
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/>.
            </summary>
            <param name="capacity">Initial list capacity.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/> class.
            </summary>
            <param name="items">The initial items for the collection.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/> class.
            </summary>
            <param name="items">The initial items for the collection.</param>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged">
            <summary>
            Raised when a change is made to the collection's items.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaList`1.PropertyChanged">
            <summary>
            Raised when a property on the collection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.ResetBehavior">
            <summary>
            Gets or sets the reset behavior of the list.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Validate">
            <summary>
            Gets or sets a validation routine that can be used to validate items before they are
            added.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#Count">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Contains(`0)">
            <summary>
            Tests if the collection contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the collection contains the item; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection's contents to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The first index of the array to copy to.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates the items in the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of items from the collection.
            </summary>
            <param name="index">The zero-based <see cref="T:Avalonia.Collections.AvaloniaList`1"/> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The index of the item or -1 if the item is not contained in the collection.
            </returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple items at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item to a new index.
            </summary>
            <param name="oldIndex">The index of the item to move.</param>
            <param name="newIndex">The index to move the item to.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves multiple items to a new index.
            </summary>
            <param name="oldIndex">The first index of the items to move.</param>
            <param name="count">The number of items to move.</param>
            <param name="newIndex">The index to move the items to.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of the list is at least <see cref="P:Avalonia.Collections.AvaloniaList`1.Capacity"/>.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item was found and removed, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple items from the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Avalonia#Diagnostics#INotifyCollectionChangedDebug#GetCollectionChangedSubscribers">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyAdd(System.Collections.IList,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with an add action.
            </summary>
            <param name="t">The items that were added.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyAdd(`0,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a add action.
            </summary>
            <param name="item">The item that was added.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyCountChanged">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.PropertyChanged"/> event when the <see cref="P:Avalonia.Collections.AvaloniaList`1.Count"/> property
            changes.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyRemove(System.Collections.IList,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a remove action.
            </summary>
            <param name="t">The items that were removed.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyRemove(`0,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a remove action.
            </summary>
            <param name="item">The item that was removed.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaList`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Avalonia.Collections.AvaloniaList`1"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaListConverter`1">
            <summary>
            Creates an <see cref="T:Avalonia.Collections.AvaloniaList`1"/> from a string representation.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaListExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:Avalonia.Collections.AvaloniaList`1"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaListExtensions.ForEachItem``1(Avalonia.Collections.IAvaloniaReadOnlyList{``0},System.Action{``0},System.Action{``0},System.Action,System.Boolean)">
            <summary>
            Invokes an action for each item in a collection and subsequently each item added or
            removed from the collection.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="added">
            An action called initially for each item in the collection and subsequently for each
            item added to the collection. The parameters passed are the index in the collection and
            the item.
            </param>
            <param name="removed">
            An action called for each item removed from the collection. The parameters passed are
            the index in the collection and the item.
            </param>
            <param name="reset">
            An action called when the collection is reset.
            </param>
            <param name="weakSubscription">
            Indicates if a weak subscription should be used to track changes to the collection.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaListExtensions.ForEachItem``1(Avalonia.Collections.IAvaloniaReadOnlyList{``0},System.Action{System.Int32,``0},System.Action{System.Int32,``0},System.Action,System.Boolean)">
            <summary>
            Invokes an action for each item in a collection and subsequently each item added or
            removed from the collection.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="added">
            An action called initially for each item in the collection and subsequently for each
            item added to the collection. The parameters passed are the index in the collection and
            the item.
            </param>
            <param name="removed">
            An action called for each item removed from the collection. The parameters passed are
            the index in the collection and the item.
            </param>
            <param name="reset">
            An action called when the collection is reset. This will be followed by calls to 
            <paramref name="added"/> for each item present in the collection after the reset.
            </param>
            <param name="weakSubscription">
            Indicates if a weak subscription should be used to track changes to the collection.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaListExtensions.TrackItemPropertyChanged``1(Avalonia.Collections.IAvaloniaReadOnlyList{``0},System.Action{System.Tuple{System.Object,System.ComponentModel.PropertyChangedEventArgs}})">
            <summary>
            Listens for property changed events from all items in a collection.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="callback">A callback to call for each property changed event.</param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="T:Avalonia.Collections.IAvaloniaList`1">
            <summary>
            A notifying list.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="P:Avalonia.Collections.IAvaloniaList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.IAvaloniaList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element at the requested index.</returns>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple items at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item to a new index.
            </summary>
            <param name="oldIndex">The index of the item to move.</param>
            <param name="newIndex">The index to move the item to.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves multiple items to a new index.
            </summary>
            <param name="oldIndex">The first index of the items to move.</param>
            <param name="count">The number of items to move.</param>
            <param name="newIndex">The index to move the items to.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple items from the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="T:Avalonia.Collections.IAvaloniaReadOnlyList`1">
            <summary>
            A read-only notifying list.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:Avalonia.Collections.NotifyCollectionChangedExtensions.GetWeakCollectionChangedObservable(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Gets a weak observable for the CollectionChanged event.
            </summary>
            <param name="collection">The collection.</param>
            <returns>An observable.</returns>
        </member>
        <member name="M:Avalonia.Collections.NotifyCollectionChangedExtensions.WeakSubscribe(System.Collections.Specialized.INotifyCollectionChanged,System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Subscribes to the CollectionChanged event using a weak subscription.
            </summary>
            <param name="collection">The collection.</param>
            <param name="handler">
            An action called when the collection event is raised.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.Collections.NotifyCollectionChangedExtensions.WeakSubscribe(System.Collections.Specialized.INotifyCollectionChanged,System.Action{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Subscribes to the CollectionChanged event using a weak subscription.
            </summary>
            <param name="collection">The collection.</param>
            <param name="handler">
            An action called when the collection event is raised.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="T:Avalonia.Collections.Pooled.ClearMode">
            <summary>
            This enum allows control over how data is treated when internal
            arrays are returned to the ArrayPool. Be careful to understand 
            what each option does before using anything other than the default
            of Auto.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.Pooled.ClearMode.Auto">
            <summary>
            <para><code>Auto</code> has different behavior depending on the host project's target framework.</para>
            <para>.NET Core 2.1: Reference types and value types that contain reference types are cleared
            when the internal arrays are returned to the pool. Value types that do not contain reference
            types are not cleared when returned to the pool.</para>
            <para>.NET Standard 2.0: All user types are cleared before returning to the pool, in case they
            contain reference types.
            For .NET Standard, Auto and Always have the same behavior.</para>
            </summary>
        </member>
        <member name="F:Avalonia.Collections.Pooled.ClearMode.Always">
            <summary>
            The <para><code>Always</code> setting has the effect of always clearing user types before returning to the pool.
            This is the default behavior on .NET Standard.</para><para>You might want to turn this on in a .NET Core project
            if you were concerned about sensitive data stored in value types leaking to other pars of your application.</para> 
            </summary>
        </member>
        <member name="F:Avalonia.Collections.Pooled.ClearMode.Never">
            <summary>
            <para><code>Never</code> will cause pooled collections to never clear user types before returning them to the pool.</para>
            <para>You might want to use this setting in a .NET Standard project when you know that a particular collection stores
            only value types and you want the performance benefit of not taking time to reset array items to their default value.</para>
            <para>Be careful with this setting: if used for a collection that contains reference types, or value types that contain
            reference types, this setting could cause memory issues by making the garbage collector unable to clean up instances
            that are still being referenced by arrays sitting in the ArrayPool.</para>
            </summary>
        </member>
        <member name="T:Avalonia.Collections.Pooled.IReadOnlyPooledList`1">
            <summary>
            Represents a read-only collection of pooled elements that can be accessed by index
            </summary>
            <typeparam name="T">The type of elements in the read-only pooled list.</typeparam>
        </member>
        <member name="P:Avalonia.Collections.Pooled.IReadOnlyPooledList`1.Span">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> for the items currently in the collection.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.Pooled.PooledList`1">
            <summary>
            Implements a variable-size list that uses a pooled array to store the
            elements. A PooledList has a capacity, which is the allocated length
            of the internal array. As elements are added to a PooledList, the capacity
            of the PooledList is automatically increased as required by reallocating the
            internal array.
            </summary>
            <remarks>
            This class is based on the code for <see cref="T:System.Collections.Generic.List`1"/> but it supports <see cref="T:System.Span`1"/>
            and uses <see cref="T:System.Buffers.ArrayPool`1"/> when allocating internal arrays.
            </remarks>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor">
            <summary>
            Constructs a PooledList. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to DefaultCapacity, and then increased in multiples of two
            as required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Constructs a PooledList. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to DefaultCapacity, and then increased in multiples of two
            as required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to DefaultCapacity, and then increased in multiples of two
            as required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to DefaultCapacity, and then increased in multiples of two
            as required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32)">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,Avalonia.Collections.Pooled.ClearMode,System.Boolean)">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,System.Buffers.ArrayPool{`0},System.Boolean)">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Int32,Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0},System.Boolean)">
            <summary>
            Constructs a List with a given initial capacity. The list is
            initially empty, but will have room for the given number of elements
            before any reallocations are required.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(`0[])">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(`0[],Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(`0[],System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(`0[],Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.ReadOnlySpan{`0},Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.ReadOnlySpan{`0},System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.ReadOnlySpan{`0},Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Collections.Generic.IEnumerable{`0},Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.#ctor(System.Collections.Generic.IEnumerable{`0},Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a PooledList, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledList`1.Span">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for the items currently in the collection.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledList`1.Avalonia#Collections#Pooled#IReadOnlyPooledList{T}#Span">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledList`1.Capacity">
            <summary>
            Gets and sets the capacity of this list.  The capacity is the size of
            the internal array used to hold items.  When set, the internal 
            Memory of the list is reallocated to the given capacity.
            Note that the return value for this property may be larger than the property was set to.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledList`1.Count">
            <summary>
            Read-only property describing how many elements are in the List.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledList`1.ClearMode">
            <summary>
            Returns the ClearMode behavior for the collection, denoting whether values are
            cleared from internal arrays before returning them to the pool.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the given index.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Add(`0)">
            <summary>
            Adds the given object to the end of this list. The size of the list is
            increased by one. If required, the capacity of the list is doubled
            before adding the new element.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the given collection to the end of this list. If
            required, the capacity of the list is increased to twice the previous
            capacity or the new size, whichever is larger.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.AddRange(`0[])">
            <summary>
            Adds the elements of the given array to the end of this list. If
            required, the capacity of the list is increased to twice the previous
            capacity or the new size, whichever is larger.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.AddRange(System.ReadOnlySpan{`0})">
            <summary>
            Adds the elements of the given <see cref="T:System.ReadOnlySpan`1"/> to the end of this list. If
            required, the capacity of the list is increased to twice the previous
            capacity or the new size, whichever is larger.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.AddSpan(System.Int32)">
            <summary>
            Advances the <see cref="P:Avalonia.Collections.Pooled.PooledList`1.Count"/> by the number of items specified,
            increasing the capacity if required, then returns a Span representing
            the set of items to be added, allowing direct writes to that section
            of the collection.
            </summary>
            <param name="count">The number of items to add.</param>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
             <summary>
             Searches a section of the list for a given element using a binary search
             algorithm. 
             </summary>
             
             <remarks><para>Elements of the list are compared to the search value using
             the given IComparer interface. If comparer is null, elements of
             the list are compared to the search value using the IComparable
             interface, which in that case must be implemented by all elements of the
             list and the given search value. This method assumes that the given
             section of the list is already sorted; if this is not the case, the
             result will be incorrect.</para>
            
             <para>The method returns the index of the given value in the list. If the
             list does not contain the given value, the method returns a negative
             integer. The bitwise complement operator (~) can be applied to a
             negative result to produce the index of the first element (if any) that
             is larger than the given search value. This is also the index at which
             the search value should be inserted into the list in order for the list
             to remain sorted.
             </para></remarks>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.BinarySearch(`0)">
            <summary>
            Searches the list for a given element using a binary search
            algorithm. If the item implements <see cref="T:System.IComparable`1"/>
            then that is used for comparison, otherwise <see cref="P:System.Collections.Generic.Comparer`1.Default"/> is used.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the list for a given element using a binary search
            algorithm. If the item implements <see cref="T:System.IComparable`1"/>
            then that is used for comparison, otherwise <see cref="P:System.Collections.Generic.Comparer`1.Default"/> is used.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Clear">
            <summary>
            Clears the contents of the PooledList.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Contains(`0)">
            <summary>
            Contains returns true if the specified element is in the List.
            It does a linear, O(n) search.  Equality is determined by calling
            EqualityComparer{T}.Default.Equals.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.CopyTo(System.Span{`0})">
            <summary>
            Copies this list to the given span.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of this list is at least the given minimum
            value. If the current capacity of the list is less than min, the
            capacity is increased to twice the current capacity or to min,
            whichever is larger.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.GetEnumerator">
            <summary>
            Returns an enumerator for this list with the given
            permission for removal of elements. If modifications made to the list 
            while an enumeration is in progress, the MoveNext and 
            GetObject methods of the enumerator will throw an exception.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Equivalent to PooledList.Span.Slice(index, count).
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.IndexOf(`0)">
            <summary>
            Returns the index of the first occurrence of a given value in
            this list. The list is searched forwards from beginning to end.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.IndexOf(`0,System.Int32)">
            <summary>
            Returns the index of the first occurrence of a given value in a range of
            this list. The list is searched forwards, starting at index
            index and ending at count number of elements. 
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence of a given value in a range of
            this list. The list is searched forwards, starting at index
            index and upto count number of elements. 
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into this list at a given index. The size of the list
            is increased by one. If required, the capacity of the list is doubled
            before inserting the new element.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of the given collection at a given index. If
            required, the capacity of the list is increased to twice the previous
            capacity or the new size, whichever is larger.  Ranges may be added
            to the end of the list by setting index to the List's size.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.InsertRange(System.Int32,System.ReadOnlySpan{`0})">
            <summary>
            Inserts the elements of the given collection at a given index. If
            required, the capacity of the list is increased to twice the previous
            capacity or the new size, whichever is larger.  Ranges may be added
            to the end of the list by setting index to the List's size.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.InsertRange(System.Int32,`0[])">
            <summary>
            Inserts the elements of the given collection at a given index. If
            required, the capacity of the list is increased to twice the previous
            capacity or the new size, whichever is larger.  Ranges may be added
            to the end of the list by setting index to the List's size.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.InsertSpan(System.Int32,System.Int32)">
            <summary>
            Advances the <see cref="P:Avalonia.Collections.Pooled.PooledList`1.Count"/> by the number of items specified,
            increasing the capacity if required, then returns a Span representing
            the set of items to be added, allowing direct writes to that section
            of the collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.LastIndexOf(`0)">
            <summary>
            Returns the index of the last occurrence of a given value in a range of
            this list. The list is searched backwards, starting at the end 
            and ending at the first element in the list.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Returns the index of the last occurrence of a given value in a range of
            this list. The list is searched backwards, starting at index
            index and ending at the first element in the list.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the index of the last occurrence of a given value in a range of
            this list. The list is searched backwards, starting at index
            index and upto count elements
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            This method removes all items which match the predicate.
            The complexity is O(n).
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the given index. The size of the list is
            decreased by one.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this list.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Reverse">
            <summary>
            Reverses the elements in this list.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the elements in a range of this list. Following a call to this
            method, an element in the range given by index and count
            which was previously located at index i will now be located at
            index + (index + count - i - 1).
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Sort">
            <summary>
            Sorts the elements in this list.  Uses the default comparer and 
            Array.Sort.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in this list.  Uses Array.Sort with the
            provided comparer.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a section of this list. The sort compares the
            elements to each other using the given IComparer interface. If
            comparer is null, the elements are compared to each other using
            the IComparable interface, which in that case must be implemented by all
            elements of the list.
            
            This method uses the Array.Sort method to sort the elements.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.ToArray">
            <summary>
            ToArray returns an array containing the contents of the List.
            This requires copying the List, which is an O(n) operation.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.TrimExcess">
            <summary>
            Sets the capacity of this list to the size of the list. This method can
            be used to minimize a list's memory overhead once it is known that no
            new elements will be added to the list. To completely clear a list and
            release all memory referenced by the list, execute the following
            statements:
            <code>
            list.Clear();
            list.TrimExcess();
            </code>
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledList`1.Dispose">
            <summary>
            Returns the internal buffers to the ArrayPool.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.Pooled.PooledStack`1">
            <summary>
            A simple stack of objects.  Internally it is implemented as an array,
            so Push can be O(n).  Pop is O(1).
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor">
            <summary>
            Create a stack with the default initial capacity. 
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Create a stack with the default initial capacity. 
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Buffers.ArrayPool{`0})">
            <summary>
            Create a stack with the default initial capacity. 
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Create a stack with the default initial capacity and a custom ArrayPool.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Int32)">
            <summary>
            Create a stack with a specific initial capacity.  The initial capacity
            must be a non-negative number.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Int32,Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Create a stack with a specific initial capacity.  The initial capacity
            must be a non-negative number.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Int32,System.Buffers.ArrayPool{`0})">
            <summary>
            Create a stack with a specific initial capacity.  The initial capacity
            must be a non-negative number.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Int32,Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Create a stack with a specific initial capacity.  The initial capacity
            must be a non-negative number.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Collections.Generic.IEnumerable{`0},Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Buffers.ArrayPool{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.Collections.Generic.IEnumerable{`0},Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(`0[])">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(`0[],Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(`0[],System.Buffers.ArrayPool{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(`0[],Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.ReadOnlySpan{`0},Avalonia.Collections.Pooled.ClearMode)">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.ReadOnlySpan{`0},System.Buffers.ArrayPool{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.#ctor(System.ReadOnlySpan{`0},Avalonia.Collections.Pooled.ClearMode,System.Buffers.ArrayPool{`0})">
            <summary>
            Fills a Stack with the contents of a particular collection.  The items are
            pushed onto the stack in the same order they are read by the enumerator.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledStack`1.Count">
            <summary>
            The number of items in the stack.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.Pooled.PooledStack`1.ClearMode">
            <summary>
            Returns the ClearMode behavior for the collection, denoting whether values are
            cleared from internal arrays before returning them to the pool.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.Clear">
            <summary>
            Removes all Objects from the Stack.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.Contains(`0)">
            <summary>
            Compares items using the default equality comparer
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.RemoveWhere(System.Func{`0,System.Boolean})">
            <summary>
            This method removes all items which match the predicate.
            The complexity is O(n).
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.GetEnumerator">
            <summary>
            Returns an IEnumerator for this PooledStack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <internalonly/>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.Peek">
            <summary>
            Returns the top object on the stack without removing it.  If the stack
            is empty, Peek throws an InvalidOperationException.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.Pop">
            <summary>
            Pops an item from the top of the stack.  If the stack is empty, Pop
            throws an InvalidOperationException.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.Push(`0)">
            <summary>
            Pushes an item to the top of the stack.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.Pooled.PooledStack`1.ToArray">
            <summary>
            Copies the Stack to an array, in the same order Pop would return the items.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Union">
            <summary>
            The two regions are combined by taking the union of both. The resulting geometry is
            geometry A + geometry B.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Intersect">
            <summary>
            The two regions are combined by taking their intersection. The new area consists of the
            overlapping region between the two geometries.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Xor">
            <summary>
            The two regions are combined by taking the area that exists in the first region but not
            the second and the area that exists in the second region but not the first. The new
            region consists of (A-B) + (B-A), where A and B are geometries.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Exclude">
            <summary>
            The second region is excluded from the first. Given two geometries, A and B, the area of
            geometry B is removed from the area of geometry A, producing a region that is A-B.
            </summary>
        </member>
        <member name="T:Avalonia.Media.CombinedGeometry">
            <summary>
            Represents a 2-D geometric shape defined by the combination of two Geometry objects.
            </summary>
        </member>
        <member name="F:Avalonia.Media.CombinedGeometry.Geometry1Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.CombinedGeometry.Geometry1"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.CombinedGeometry.Geometry2Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.CombinedGeometry.Geometry2"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.CombinedGeometry.GeometryCombineModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor(Avalonia.Media.Geometry,Avalonia.Media.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class with the
            specified <see cref="T:Avalonia.Media.Geometry"/> objects.
            </summary>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor(Avalonia.Media.GeometryCombineMode,Avalonia.Media.Geometry,Avalonia.Media.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class with the
            specified <see cref="T:Avalonia.Media.Geometry"/> objects and <see cref="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode"/>.
            </summary>
            <param name="combineMode">The method by which geometry1 and geometry2 are combined.</param>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor(Avalonia.Media.GeometryCombineMode,Avalonia.Media.Geometry,Avalonia.Media.Geometry,Avalonia.Media.Transform)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class with the
            specified <see cref="T:Avalonia.Media.Geometry"/> objects, <see cref="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode"/> and
            <see cref="T:Avalonia.Media.Transform"/>.
            </summary>
            <param name="combineMode">The method by which geometry1 and geometry2 are combined.</param>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
            <param name="transform">The transform applied to the geometry.</param>
        </member>
        <member name="P:Avalonia.Media.CombinedGeometry.Geometry1">
            <summary>
            Gets or sets the first <see cref="T:Avalonia.Media.Geometry"/> object of this
            <see cref="T:Avalonia.Media.CombinedGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.CombinedGeometry.Geometry2">
            <summary>
            Gets or sets the second <see cref="T:Avalonia.Media.Geometry"/> object of this
            <see cref="T:Avalonia.Media.CombinedGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode">
            <summary>
            Gets or sets the method by which the two geometries (specified by the
            <see cref="P:Avalonia.Media.CombinedGeometry.Geometry1"/> and <see cref="P:Avalonia.Media.CombinedGeometry.Geometry2"/> properties) are combined. The
            default value is <see cref="F:Avalonia.Media.GeometryCombineMode.Union"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.AcrylicBackgroundSource">
            <summary>
            Background Sources for Acrylic.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AcrylicBackgroundSource.None">
            <summary>
            The acrylic has no background.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AcrylicBackgroundSource.Digger">
            <summary>
            Cuts through all render layers to reveal the window background.
            This means if your window is transparent or blurred it 
            will be blended with the material.
            </summary>
        </member>
        <member name="T:Avalonia.Media.AlignmentX">
            <summary>
            Describes how content is positioned horizontally in a container.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentX.Left">
            <summary>
            The contents align themselves with the left of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentX.Center">
            <summary>
            The contents align themselves with the center of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentX.Right">
            <summary>
            The contents align themselves with the right of the container
            </summary>
        </member>
        <member name="T:Avalonia.Media.AlignmentY">
            <summary>
            Describes how content is positioned vertically in a container.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentY.Top">
            <summary>
            The contents align themselves with the top of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentY.Center">
            <summary>
            The contents align themselves with the center of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentY.Bottom">
            <summary>
            The contents align themselves with the bottom of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.IsLargeArcProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.IsLargeArc"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.PointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.Point"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.RotationAngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.RotationAngle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.SizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.Size"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.SweepDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.SweepDirection"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.IsLargeArc">
            <summary>
            Gets or sets a value indicating whether this instance is large arc.
            </summary>
            <value>
            <c>true</c> if this instance is large arc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.Point">
            <summary>
            Gets or sets the point.
            </summary>
            <value>
            The point.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>
            The rotation angle.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.SweepDirection">
            <summary>
            Gets or sets the sweep direction.
            </summary>
            <value>
            The sweep direction.
            </value>
        </member>
        <member name="T:Avalonia.Media.BaselineAlignment">
            <summary>
            Enum specifying where a box should be positioned Vertically
            </summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.Top">
            <summary>Align top toward top of container</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.Center">
            <summary>Center vertically</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.Bottom">
            <summary>Align bottom toward bottom of container</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.Baseline">
            <summary>Align at baseline</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.TextTop">
            <summary>Align toward text's top of container</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.TextBottom">
            <summary>Align toward text's bottom of container</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.Subscript">
            <summary>Align baseline to subscript position of container</summary>
        </member>
        <member name="F:Avalonia.Media.BaselineAlignment.Superscript">
            <summary>Align baseline to superscript position of container</summary>
        </member>
        <member name="F:Avalonia.Media.BezierSegment.Point1Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.BezierSegment.Point1"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.BezierSegment.Point2Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.BezierSegment.Point2"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.BezierSegment.Point3Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.BezierSegment.Point3"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.BezierSegment.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>
            The point1.
            </value>
        </member>
        <member name="P:Avalonia.Media.BezierSegment.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>
            The point2.
            </value>
        </member>
        <member name="P:Avalonia.Media.BezierSegment.Point3">
            <summary>
            Gets or sets the point3.
            </summary>
            <value>
            The point3.
            </value>
        </member>
        <member name="T:Avalonia.Media.Brush">
            <summary>
            Describes how an area is painted.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Brush.OpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Brush.Opacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Brush.TransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Brush.Transform"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Brush.TransformOriginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Brush.TransformOrigin"/> property
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brush.Opacity">
            <summary>
            Gets or sets the opacity of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brush.Transform">
            <summary>
            Gets or sets the transform of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brush.TransformOrigin">
            <summary>
            Gets or sets the origin of the brush <see cref="P:Avalonia.Media.Brush.Transform"/>
            </summary>
        </member>
        <member name="M:Avalonia.Media.Brush.Parse(System.String)">
            <summary>
            Parses a brush string.
            </summary>
            <param name="s">The brush string.</param>
            <returns>The <see cref="T:Avalonia.Media.Color"/>.</returns>
        </member>
        <member name="T:Avalonia.Media.BrushConverter">
            <summary>
            Creates an <see cref="T:Avalonia.Media.IBrush"/> from a string representation.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Brushes">
            <summary>
            Predefined brushes.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.AliceBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.AliceBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.AntiqueWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.AntiqueWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Aqua">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Aqua"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Aquamarine">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Aquamarine"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Azure">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Azure"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Beige">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Beige"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Bisque">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Bisque"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Black">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Black"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.BlanchedAlmond">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.BlanchedAlmond"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Blue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Blue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.BlueViolet">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.BlueViolet"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Brown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Brown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.BurlyWood">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.BurlyWood"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.CadetBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.CadetBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Chartreuse">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Chartreuse"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Chocolate">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Chocolate"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Coral">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Coral"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.CornflowerBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.CornflowerBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Cornsilk">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Cornsilk"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Crimson">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Crimson"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Cyan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Cyan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkCyan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkCyan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkGoldenrod">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkGoldenrod"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkKhaki">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkKhaki"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkMagenta">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkMagenta"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkOliveGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkOliveGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkOrange">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkOrange"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkOrchid">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkOrchid"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSalmon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSalmon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSlateBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSlateBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSlateGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSlateGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkTurquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkTurquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkViolet">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkViolet"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DeepPink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DeepPink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DeepSkyBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DeepSkyBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DimGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DimGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DodgerBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DodgerBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Firebrick">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Firebrick"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.FloralWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.FloralWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.ForestGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.ForestGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Fuchsia">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Fuchsia"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Gainsboro">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Gainsboro"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.GhostWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.GhostWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Gold">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Gold"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Goldenrod">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Goldenrod"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Gray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Gray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Green">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Green"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.GreenYellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.GreenYellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Honeydew">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Honeydew"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.HotPink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.HotPink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.IndianRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.IndianRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Indigo">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Indigo"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Ivory">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Ivory"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Khaki">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Khaki"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Lavender">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Lavender"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LavenderBlush">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LavenderBlush"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LawnGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LawnGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LemonChiffon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LemonChiffon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightCoral">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightCoral"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightCyan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightCyan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightGoldenrodYellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightGoldenrodYellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightPink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightPink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSalmon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSalmon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSkyBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSkyBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSlateGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSlateGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSteelBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSteelBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightYellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightYellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Lime">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Lime"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LimeGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LimeGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Linen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Linen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Magenta">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Magenta"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Maroon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Maroon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumAquamarine">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumAquamarine"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumOrchid">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumOrchid"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumPurple">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumPurple"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumSeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumSeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumSlateBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumSlateBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumSpringGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumSpringGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumTurquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumTurquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumVioletRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumVioletRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MidnightBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MidnightBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MintCream">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MintCream"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MistyRose">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MistyRose"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Moccasin">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Moccasin"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.NavajoWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.NavajoWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Navy">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Navy"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.OldLace">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.OldLace"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Olive">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Olive"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.OliveDrab">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.OliveDrab"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Orange">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Orange"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.OrangeRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.OrangeRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Orchid">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Orchid"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleGoldenrod">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleGoldenrod"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleTurquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleTurquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleVioletRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleVioletRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PapayaWhip">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PapayaWhip"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PeachPuff">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PeachPuff"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Peru">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Peru"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Pink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Pink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Plum">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Plum"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PowderBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PowderBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Purple">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Purple"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Red">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Red"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.RosyBrown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.RosyBrown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.RoyalBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.RoyalBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SaddleBrown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SaddleBrown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Salmon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Salmon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SandyBrown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SandyBrown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SeaShell">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SeaShell"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Sienna">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Sienna"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Silver">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Silver"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SkyBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SkyBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SlateBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SlateBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SlateGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SlateGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Snow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Snow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SpringGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SpringGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SteelBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SteelBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Tan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Tan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Teal">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Teal"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Thistle">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Thistle"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Tomato">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Tomato"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Transparent">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Transparent"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Turquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Turquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Violet">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Violet"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Wheat">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Wheat"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.White">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.White"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.WhiteSmoke">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.WhiteSmoke"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Yellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Yellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.YellowGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.YellowGreen"/> colored brush.
            </summary>
        </member>
        <member name="T:Avalonia.Media.BrushExtensions">
            <summary>
            Extension methods for brush classes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.BrushExtensions.ToImmutable(Avalonia.Media.IBrush)">
            <summary>
            Converts a brush to an immutable brush.
            </summary>
            <param name="brush">The brush.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.IMutableBrush.ToImmutable"/> if the brush is mutable,
            otherwise <paramref name="brush"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.BrushExtensions.ToImmutable(Avalonia.Media.IDashStyle)">
            <summary>
            Converts a dash style to an immutable dash style.
            </summary>
            <param name="style">The dash style.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.DashStyle.ToImmutable"/> if the style is mutable,
            otherwise <paramref name="style"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.BrushExtensions.ToImmutable(Avalonia.Media.IPen)">
            <summary>
            Converts a pen to an immutable pen.
            </summary>
            <param name="pen">The pen.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.Pen.ToImmutable"/> if the brush is mutable,
            otherwise <paramref name="pen"/>.
            </returns>
        </member>
        <member name="T:Avalonia.Media.CharacterHit">
            <summary>
                Represents information about a character hit within a glyph run.
            </summary>
            <remarks>
                The CharacterHit structure provides information about the index of the first
                character that got hit as well as information about leading or trailing edge.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.CharacterHit.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Avalonia.Media.CharacterHit"/> structure.
            </summary>
            <param name="firstCharacterIndex">Index of the first character that got hit.</param>
            <param name="trailingLength">In the case of a leading edge, this value is 0. In the case of a trailing edge,
            this value is the number of code points until the next valid caret position.</param>
        </member>
        <member name="P:Avalonia.Media.CharacterHit.FirstCharacterIndex">
            <summary>
                Gets the index of the first character that got hit.
            </summary>
        </member>
        <member name="P:Avalonia.Media.CharacterHit.TrailingLength">
            <summary>
                Gets the trailing length value for the character that got hit.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Color">
            <summary>
            An ARGB color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.A">
            <summary>
            Gets the Alpha component of the color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.R">
            <summary>
            Gets the Red component of the color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.G">
            <summary>
            Gets the Green component of the color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.B">
            <summary>
            Gets the Blue component of the color.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Color"/> struct.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:Avalonia.Media.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Color"/> from alpha, red, green and blue components.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Color"/> from red, green and blue components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.FromUInt32(System.UInt32)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Color"/> from an integer.
            </summary>
            <param name="value">The integer value.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.Parse(System.String)">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <returns>The <see cref="T:Avalonia.Media.Color"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <returns>The <see cref="T:Avalonia.Media.Color"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.TryParse(System.String,Avalonia.Media.Color@)">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <param name="color">The parsed color</param>
            <returns>The status of the operation.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.TryParse(System.ReadOnlySpan{System.Char},Avalonia.Media.Color@)">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <param name="color">The parsed color</param>
            <returns>The status of the operation.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.TryParseHexFormat(System.ReadOnlySpan{System.Char},Avalonia.Media.Color@)">
            <summary>
            Parses the given span of characters representing a hex color value into a new <see cref="T:Avalonia.Media.Color"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Color.TryParseCssFormat(System.String,Avalonia.Media.Color@)">
            <summary>
            Parses the given string representing a CSS color value into a new <see cref="T:Avalonia.Media.Color"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Color.ToString">
            <summary>
            Returns the string representation of the color.
            </summary>
            <returns>
            The string representation of the color.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToUInt32">
            <summary>
            Returns the integer representation of the color.
            </summary>
            <returns>
            The integer representation of the color.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToUint32">
            <inheritdoc cref="M:Avalonia.Media.Color.ToUInt32"/>
        </member>
        <member name="M:Avalonia.Media.Color.ToHsl">
            <summary>
            Returns the HSL color model equivalent of this RGB color.
            </summary>
            <returns>The HSL equivalent color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToHsv">
            <summary>
            Returns the HSV color model equivalent of this RGB color.
            </summary>
            <returns>The HSV equivalent color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.Equals(Avalonia.Media.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Color.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Color.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Color.ToHsl(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts the given RGBA color component values to their HSL color equivalent.
            </summary>
            <param name="red">The Red component in the RGB color model.</param>
            <param name="green">The Green component in the RGB color model.</param>
            <param name="blue">The Blue component in the RGB color model.</param>
            <param name="alpha">The Alpha component.</param>
            <returns>A new <see cref="T:Avalonia.Media.HslColor"/> equivalent to the given RGBA values.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToHsl(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given RGBA color component values to their HSL color equivalent.
            </summary>
            <remarks>
            Warning: No bounds checks or clamping is done on the input component values.
            This method is for internal-use only and the caller must ensure bounds.
            </remarks>
            <param name="r">The Red component in the RGB color model within the range 0..1.</param>
            <param name="g">The Green component in the RGB color model within the range 0..1.</param>
            <param name="b">The Blue component in the RGB color model within the range 0..1.</param>
            <param name="a">The Alpha component in the RGB color model within the range 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HslColor"/> equivalent to the given RGBA values.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToHsv(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts the given RGBA color component values to their HSV color equivalent.
            </summary>
            <param name="red">The Red component in the RGB color model.</param>
            <param name="green">The Green component in the RGB color model.</param>
            <param name="blue">The Blue component in the RGB color model.</param>
            <param name="alpha">The Alpha component.</param>
            <returns>A new <see cref="T:Avalonia.Media.HsvColor"/> equivalent to the given RGBA values.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToHsv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given RGBA color component values to their HSV color equivalent.
            </summary>
            <remarks>
            Warning: No bounds checks or clamping is done on the input component values.
            This method is for internal-use only and the caller must ensure bounds.
            </remarks>
            <param name="r">The Red component in the RGB color model within the range 0..1.</param>
            <param name="g">The Green component in the RGB color model within the range 0..1.</param>
            <param name="b">The Blue component in the RGB color model within the range 0..1.</param>
            <param name="a">The Alpha component in the RGB color model within the range 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HsvColor"/> equivalent to the given RGBA values.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.op_Equality(Avalonia.Media.Color,Avalonia.Media.Color)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Avalonia.Media.Color"/> objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.op_Inequality(Avalonia.Media.Color,Avalonia.Media.Color)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Avalonia.Media.Color"/> objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left and right are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Avalonia.Media.Colors">
            <summary>
            Defines a set of predefined colors.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.AliceBlue">
            <summary>
            Gets a color with an ARGB value of #fff0f8ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.AntiqueWhite">
            <summary>
            Gets a color with an ARGB value of #fffaebd7.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Aqua">
            <summary>
            Gets a color with an ARGB value of #ff00ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Aquamarine">
            <summary>
            Gets a color with an ARGB value of #ff7fffd4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Azure">
            <summary>
            Gets a color with an ARGB value of #fff0ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Beige">
            <summary>
            Gets a color with an ARGB value of #fff5f5dc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Bisque">
            <summary>
            Gets a color with an ARGB value of #ffffe4c4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Black">
            <summary>
            Gets a color with an ARGB value of #ff000000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.BlanchedAlmond">
            <summary>
            Gets a color with an ARGB value of #ffffebcd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Blue">
            <summary>
            Gets a color with an ARGB value of #ff0000ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.BlueViolet">
            <summary>
            Gets a color with an ARGB value of #ff8a2be2.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Brown">
            <summary>
            Gets a color with an ARGB value of #ffa52a2a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.BurlyWood">
            <summary>
            Gets a color with an ARGB value of #ffdeb887.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.CadetBlue">
            <summary>
            Gets a color with an ARGB value of #ff5f9ea0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Chartreuse">
            <summary>
            Gets a color with an ARGB value of #ff7fff00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Chocolate">
            <summary>
            Gets a color with an ARGB value of #ffd2691e.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Coral">
            <summary>
            Gets a color with an ARGB value of #ffff7f50.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.CornflowerBlue">
            <summary>
            Gets a color with an ARGB value of #ff6495ed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Cornsilk">
            <summary>
            Gets a color with an ARGB value of #fffff8dc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Crimson">
            <summary>
            Gets a color with an ARGB value of #ffdc143c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Cyan">
            <summary>
            Gets a color with an ARGB value of #ff00ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkBlue">
            <summary>
            Gets a color with an ARGB value of #ff00008b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkCyan">
            <summary>
            Gets a color with an ARGB value of #ff008b8b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkGoldenrod">
            <summary>
            Gets a color with an ARGB value of #ffb8860b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkGray">
            <summary>
            Gets a color with an ARGB value of #ffa9a9a9.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkGreen">
            <summary>
            Gets a color with an ARGB value of #ff006400.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkKhaki">
            <summary>
            Gets a color with an ARGB value of #ffbdb76b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkMagenta">
            <summary>
            Gets a color with an ARGB value of #ff8b008b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkOliveGreen">
            <summary>
            Gets a color with an ARGB value of #ff556b2f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkOrange">
            <summary>
            Gets a color with an ARGB value of #ffff8c00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkOrchid">
            <summary>
            Gets a color with an ARGB value of #ff9932cc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkRed">
            <summary>
            Gets a color with an ARGB value of #ff8b0000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSalmon">
            <summary>
            Gets a color with an ARGB value of #ffe9967a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff8fbc8f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSlateBlue">
            <summary>
            Gets a color with an ARGB value of #ff483d8b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSlateGray">
            <summary>
            Gets a color with an ARGB value of #ff2f4f4f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkTurquoise">
            <summary>
            Gets a color with an ARGB value of #ff00ced1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkViolet">
            <summary>
            Gets a color with an ARGB value of #ff9400d3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DeepPink">
            <summary>
            Gets a color with an ARGB value of #ffff1493.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DeepSkyBlue">
            <summary>
            Gets a color with an ARGB value of #ff00bfff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DimGray">
            <summary>
            Gets a color with an ARGB value of #ff696969.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DodgerBlue">
            <summary>
            Gets a color with an ARGB value of #ff1e90ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Firebrick">
            <summary>
            Gets a color with an ARGB value of #ffb22222.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.FloralWhite">
            <summary>
            Gets a color with an ARGB value of #fffffaf0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.ForestGreen">
            <summary>
            Gets a color with an ARGB value of #ff228b22.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Fuchsia">
            <summary>
            Gets a color with an ARGB value of #ffff00ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Gainsboro">
            <summary>
            Gets a color with an ARGB value of #ffdcdcdc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.GhostWhite">
            <summary>
            Gets a color with an ARGB value of #fff8f8ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Gold">
            <summary>
            Gets a color with an ARGB value of #ffffd700.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Goldenrod">
            <summary>
            Gets a color with an ARGB value of #ffdaa520.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Gray">
            <summary>
            Gets a color with an ARGB value of #ff808080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Green">
            <summary>
            Gets a color with an ARGB value of #ff008000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.GreenYellow">
            <summary>
            Gets a color with an ARGB value of #ffadff2f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Honeydew">
            <summary>
            Gets a color with an ARGB value of #fff0fff0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.HotPink">
            <summary>
            Gets a color with an ARGB value of #ffff69b4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.IndianRed">
            <summary>
            Gets a color with an ARGB value of #ffcd5c5c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Indigo">
            <summary>
            Gets a color with an ARGB value of #ff4b0082.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Ivory">
            <summary>
            Gets a color with an ARGB value of #fffffff0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Khaki">
            <summary>
            Gets a color with an ARGB value of #fff0e68c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Lavender">
            <summary>
            Gets a color with an ARGB value of #ffe6e6fa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LavenderBlush">
            <summary>
            Gets a color with an ARGB value of #fffff0f5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LawnGreen">
            <summary>
            Gets a color with an ARGB value of #ff7cfc00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LemonChiffon">
            <summary>
            Gets a color with an ARGB value of #fffffacd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightBlue">
            <summary>
            Gets a color with an ARGB value of #ffadd8e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightCoral">
            <summary>
            Gets a color with an ARGB value of #fff08080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightCyan">
            <summary>
            Gets a color with an ARGB value of #ffe0ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightGoldenrodYellow">
            <summary>
            Gets a color with an ARGB value of #fffafad2.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightGray">
            <summary>
            Gets a color with an ARGB value of #ffd3d3d3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightGreen">
            <summary>
            Gets a color with an ARGB value of #ff90ee90.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightPink">
            <summary>
            Gets a color with an ARGB value of #ffffb6c1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSalmon">
            <summary>
            Gets a color with an ARGB value of #ffffa07a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff20b2aa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSkyBlue">
            <summary>
            Gets a color with an ARGB value of #ff87cefa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSlateGray">
            <summary>
            Gets a color with an ARGB value of #ff778899.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSteelBlue">
            <summary>
            Gets a color with an ARGB value of #ffb0c4de.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightYellow">
            <summary>
            Gets a color with an ARGB value of #ffffffe0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Lime">
            <summary>
            Gets a color with an ARGB value of #ff00ff00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LimeGreen">
            <summary>
            Gets a color with an ARGB value of #ff32cd32.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Linen">
            <summary>
            Gets a color with an ARGB value of #fffaf0e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Magenta">
            <summary>
            Gets a color with an ARGB value of #ffff00ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Maroon">
            <summary>
            Gets a color with an ARGB value of #ff800000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumAquamarine">
            <summary>
            Gets a color with an ARGB value of #ff66cdaa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumBlue">
            <summary>
            Gets a color with an ARGB value of #ff0000cd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumOrchid">
            <summary>
            Gets a color with an ARGB value of #ffba55d3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumPurple">
            <summary>
            Gets a color with an ARGB value of #ff9370db.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumSeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff3cb371.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumSlateBlue">
            <summary>
            Gets a color with an ARGB value of #ff7b68ee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumSpringGreen">
            <summary>
            Gets a color with an ARGB value of #ff00fa9a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumTurquoise">
            <summary>
            Gets a color with an ARGB value of #ff48d1cc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumVioletRed">
            <summary>
            Gets a color with an ARGB value of #ffc71585.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MidnightBlue">
            <summary>
            Gets a color with an ARGB value of #ff191970.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MintCream">
            <summary>
            Gets a color with an ARGB value of #fff5fffa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MistyRose">
            <summary>
            Gets a color with an ARGB value of #ffffe4e1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Moccasin">
            <summary>
            Gets a color with an ARGB value of #ffffe4b5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.NavajoWhite">
            <summary>
            Gets a color with an ARGB value of #ffffdead.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Navy">
            <summary>
            Gets a color with an ARGB value of #ff000080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.OldLace">
            <summary>
            Gets a color with an ARGB value of #fffdf5e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Olive">
            <summary>
            Gets a color with an ARGB value of #ff808000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.OliveDrab">
            <summary>
            Gets a color with an ARGB value of #ff6b8e23.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Orange">
            <summary>
            Gets a color with an ARGB value of #ffffa500.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.OrangeRed">
            <summary>
            Gets a color with an ARGB value of #ffff4500.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Orchid">
            <summary>
            Gets a color with an ARGB value of #ffda70d6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleGoldenrod">
            <summary>
            Gets a color with an ARGB value of #ffeee8aa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleGreen">
            <summary>
            Gets a color with an ARGB value of #ff98fb98.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleTurquoise">
            <summary>
            Gets a color with an ARGB value of #ffafeeee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleVioletRed">
            <summary>
            Gets a color with an ARGB value of #ffdb7093.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PapayaWhip">
            <summary>
            Gets a color with an ARGB value of #ffffefd5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PeachPuff">
            <summary>
            Gets a color with an ARGB value of #ffffdab9.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Peru">
            <summary>
            Gets a color with an ARGB value of #ffcd853f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Pink">
            <summary>
            Gets a color with an ARGB value of #ffffc0cb.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Plum">
            <summary>
            Gets a color with an ARGB value of #ffdda0dd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PowderBlue">
            <summary>
            Gets a color with an ARGB value of #ffb0e0e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Purple">
            <summary>
            Gets a color with an ARGB value of #ff800080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Red">
            <summary>
            Gets a color with an ARGB value of #ffff0000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.RosyBrown">
            <summary>
            Gets a color with an ARGB value of #ffbc8f8f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.RoyalBlue">
            <summary>
            Gets a color with an ARGB value of #ff4169e1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SaddleBrown">
            <summary>
            Gets a color with an ARGB value of #ff8b4513.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Salmon">
            <summary>
            Gets a color with an ARGB value of #fffa8072.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SandyBrown">
            <summary>
            Gets a color with an ARGB value of #fff4a460.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff2e8b57.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SeaShell">
            <summary>
            Gets a color with an ARGB value of #fffff5ee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Sienna">
            <summary>
            Gets a color with an ARGB value of #ffa0522d.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Silver">
            <summary>
            Gets a color with an ARGB value of #ffc0c0c0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SkyBlue">
            <summary>
            Gets a color with an ARGB value of #ff87ceeb.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SlateBlue">
            <summary>
            Gets a color with an ARGB value of #ff6a5acd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SlateGray">
            <summary>
            Gets a color with an ARGB value of #ff708090.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Snow">
            <summary>
            Gets a color with an ARGB value of #fffffafa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SpringGreen">
            <summary>
            Gets a color with an ARGB value of #ff00ff7f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SteelBlue">
            <summary>
            Gets a color with an ARGB value of #ff4682b4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Tan">
            <summary>
            Gets a color with an ARGB value of #ffd2b48c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Teal">
            <summary>
            Gets a color with an ARGB value of #ff008080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Thistle">
            <summary>
            Gets a color with an ARGB value of #ffd8bfd8.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Tomato">
            <summary>
            Gets a color with an ARGB value of #ffff6347.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Transparent">
            <summary>
            Gets a color with an ARGB value of #00ffffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Turquoise">
            <summary>
            Gets a color with an ARGB value of #ff40e0d0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Violet">
            <summary>
            Gets a color with an ARGB value of #ffee82ee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Wheat">
            <summary>
            Gets a color with an ARGB value of #fff5deb3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.White">
            <summary>
            Gets a color with an ARGB value of #ffffffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.WhiteSmoke">
            <summary>
            Gets a color with an ARGB value of #fff5f5f5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Yellow">
            <summary>
            Gets a color with an ARGB value of #ffffff00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.YellowGreen">
            <summary>
            Gets a color with an ARGB value of #ff9acd32.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ConicGradientBrush">
            <summary>
            Paints an area with a swept circular gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ConicGradientBrush.CenterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ConicGradientBrush.Center"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ConicGradientBrush.AngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ConicGradientBrush.Angle"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ConicGradientBrush.Center">
            <summary>
            Gets or sets the center point of the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ConicGradientBrush.Angle">
            <summary>
            Gets or sets the angle of the start and end of the sweep, measured from above the center point.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ConicGradientBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.DashStyle">
            <summary>
            Represents the sequence of dashes and gaps that will be applied by a <see cref="T:Avalonia.Media.Pen"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DashStyle.DashesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DashStyle.Dashes"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DashStyle.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DashStyle.Offset"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DashStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.DashStyle"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DashStyle.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.DashStyle"/> class.
            </summary>
            <param name="dashes">The dashes collection.</param>
            <param name="offset">The dash sequence offset.</param>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Dash">
            <summary>
            Represents a dashed <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Dot">
            <summary>
            Represents a dotted <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.DashDot">
            <summary>
            Represents a dashed dotted <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.DashDotDot">
            <summary>
            Represents a dashed double dotted <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Dashes">
            <summary>
            Gets or sets the length of alternating dashes and gaps.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Offset">
            <summary>
            Gets or sets how far in the dash sequence the stroke will start.
            </summary>
        </member>
        <member name="E:Avalonia.Media.DashStyle.Invalidated">
            <summary>
            Raised when the dash style changes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DashStyle.ToImmutable">
            <summary>
            Returns an immutable clone of the <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.Drawing">
            <summary>
            Abstract class that describes a 2-D drawing.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Drawing.Draw(Avalonia.Media.DrawingContext)">
            <summary>
            Draws this drawing to the given <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Media.Drawing.GetBounds">
            <summary>
            Gets the drawing's bounding rectangle.
            </summary>
        </member>
        <member name="T:Avalonia.Media.DrawingBrush">
            <summary>
            Paints an area with an <see cref="P:Avalonia.Media.DrawingBrush.Drawing"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DrawingBrush.DrawingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DrawingBrush.Drawing"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.DrawingBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingBrush.#ctor(Avalonia.Media.Drawing)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.DrawingBrush"/> class.
            </summary>
            <param name="visual">The visual to draw.</param>
        </member>
        <member name="P:Avalonia.Media.DrawingBrush.Drawing">
            <summary>
            Gets or sets the visual to draw.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawImage(Avalonia.Media.IImage,Avalonia.Rect)">
            <summary>
            Draws an image.
            </summary>
            <param name="source">The image.</param>
            <param name="rect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawImage(Avalonia.Media.IImage,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws an image.
            </summary>
            <param name="source">The image.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws a platform-specific bitmap impl.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacity">The opacity to draw with.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Media.Geometry)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Rect,System.Double,System.Double,Avalonia.Media.BoxShadows)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the rectangle, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the rectangle, or <c>null</c> for no stroke.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="radiusX">The radius in the X dimension of the rounded corners.
                This value will be clamped to the range of 0 to Width/2
            </param>
            <param name="radiusY">The radius in the Y dimension of the rounded corners.
                This value will be clamped to the range of 0 to Height/2
            </param>
            <param name="boxShadows">Box shadow effect parameters</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the rectangle, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the rectangle, or <c>null</c> for no stroke.</param>
            <param name="rrect">The rectangle bounds.</param>
            <param name="boxShadows">Box shadow effect parameters</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawRectangle(Avalonia.Media.IPen,Avalonia.Rect,System.Single)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.FillRectangle(Avalonia.Media.IBrush,Avalonia.Rect,System.Single)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawEllipse(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Point,System.Double,System.Double)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the ellipse, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the ellipse, or <c>null</c> for no stroke.</param>
            <param name="center">The location of the center of the ellipse.</param>
            <param name="radiusX">The horizontal radius of the ellipse.</param>
            <param name="radiusY">The vertical radius of the ellipse.</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawEllipse(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Rect)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the ellipse, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the ellipse, or <c>null</c> for no stroke.</param>
            <param name="rect">The bounding rect.</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.Custom(Avalonia.Rendering.SceneGraph.ICustomDrawOperation)">
            <summary>
            Draws a custom drawing operation
            </summary>
            <param name="custom">custom operation</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawText(Avalonia.Media.FormattedText,Avalonia.Point)">
            <summary>
            Draws text.
            </summary>
            <param name="origin">The upper-left corner of the text.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawGlyphRun(Avalonia.Media.IBrush,Avalonia.Media.GlyphRun)">
            <summary>
            Draws a glyph run.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="glyphRun">The glyph run.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushClip(Avalonia.RoundedRect)">
            <summary>
            Pushes a clip rectangle.
            </summary>
            <param name="clip">The clip rectangle.</param>
            <returns>A disposable used to undo the clip rectangle.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushClip(Avalonia.Rect)">
            <summary>
            Pushes a clip rectangle.
            </summary>
            <param name="clip">The clip rectangle.</param>
            <returns>A disposable used to undo the clip rectangle.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushGeometryClip(Avalonia.Media.Geometry)">
            <summary>
            Pushes a clip geometry.
            </summary>
            <param name="clip">The clip geometry.</param>
            <returns>A disposable used to undo the clip geometry.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushOpacity(System.Double)">
            <summary>
            Pushes an opacity value.
            </summary>
            <param name="opacity">The opacity.</param>
            <returns>A disposable used to undo the opacity.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushOpacityMask(Avalonia.Media.IBrush,Avalonia.Rect)">
            <summary>
            Pushes an opacity mask.
            </summary>
            <param name="mask">The opacity mask.</param>
            <param name="bounds">
            The size of the brush's target area. TODO: Are we sure this is needed?
            </param>
            <returns>A disposable to undo the opacity mask.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushTransform(Avalonia.Matrix)">
            <summary>
            Pushes a matrix transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="P:Avalonia.Media.DrawingGroup.Children">
            <summary>
            Gets or sets the collection that contains the child geometries.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingGroup.DrawingGroupDrawingContext.Pop">
            <summary>
            Pop
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingGroup.DrawingGroupDrawingContext.PushTransformCore(Avalonia.Matrix)">
            <summary>
                PushTransform -
                Push a Transform which will apply to all drawing operations until the corresponding
                Pop.
            </summary>
            <param name="matrix"> The transform to push. </param>
        </member>
        <member name="M:Avalonia.Media.DrawingGroup.DrawingGroupDrawingContext.PushNewDrawingGroup">
            <summary>
            Creates a new DrawingGroup for a Push* call by setting the
            _currentDrawingGroup to a newly instantiated DrawingGroup,
            and saving the previous _currentDrawingGroup value on the
            _previousDrawingGroupStack.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingGroup.DrawingGroupDrawingContext.AddNewGeometryDrawing(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Media.Geometry)">
            <summary>
            Contains the functionality common to GeometryDrawing operations of
            instantiating the GeometryDrawing, setting it's Freezable state,
            and Adding it to the Drawing Graph.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingGroup.DrawingGroupDrawingContext.AddDrawing(Avalonia.Media.Drawing)">
             <summary>
             Adds a new Drawing to the DrawingGraph.
            
             This method avoids creating a DrawingGroup for the common case
             where only a single child exists in the root DrawingGroup.
             </summary>
        </member>
        <member name="T:Avalonia.Media.DrawingImage">
            <summary>
            An <see cref="T:Avalonia.Media.IImage"/> that uses a <see cref="P:Avalonia.Media.DrawingImage.Drawing"/> for content.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DrawingImage.DrawingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DrawingImage.Drawing"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.DrawingImage.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.DrawingImage.Drawing">
            <summary>
            Gets or sets the drawing content.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DrawingImage.Size">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.DrawingImage.Avalonia#Media#IImage#Draw(Avalonia.Media.DrawingContext,Avalonia.Rect,Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.DrawingImage.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.DrawingImage.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.DrawingImage.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Media.DropShadowDirectionEffect">
            <summary>
            This class is compatible with WPF's DropShadowEffect and provides Direction and ShadowDepth properties instead of OffsetX/OffsetY
            </summary>
        </member>
        <member name="M:Avalonia.Media.Effect.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the brush's visual representation.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a brush's static constructor, any change to the
            property will cause the <see cref="E:Avalonia.Media.Effect.Invalidated"/> event to be raised on the brush.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.Effect.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.Effect.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="E:Avalonia.Media.Effect.Invalidated">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Media.EffectExtensions.ToImmutable(Avalonia.Media.IEffect)">
            <summary>
            Converts a effect to an immutable effect.
            </summary>
            <param name="effect">The effect.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.IMutableEffect.ToImmutable"/> if the effect is mutable,
            otherwise <paramref name="effect"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IMutableEffect.ToImmutable">
            <summary>
            Creates an immutable clone of the effect.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="T:Avalonia.Media.EllipseGeometry">
            <summary>
            Represents the geometry of an ellipse or circle.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.RectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.Rect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.RadiusXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.RadiusX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.RadiusYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.RadiusY"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.CenterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.Center"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.EllipseGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.EllipseGeometry"/> class.
            </summary>
            <param name="rect">The rectangle that the ellipse should fill.</param>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.Rect">
            <summary>
            Gets or sets a rect that defines the bounds of the ellipse.
            </summary>
            <remarks>
            When set, this takes priority over the other properties that define an
            ellipse using a center point and X/Y-axis radii.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.RadiusX">
            <summary>
            Gets or sets a double that defines the radius in the X-axis of the ellipse.
            </summary>
            <remarks>
            In order for this property to be used, <see cref="P:Avalonia.Media.EllipseGeometry.Rect"/> must not be set
            (equal to the default <see cref="T:Avalonia.Rect"/> value).
            </remarks>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.RadiusY">
            <summary>
            Gets or sets a double that defines the radius in the Y-axis of the ellipse.
            </summary>
            <remarks>
            In order for this property to be used, <see cref="P:Avalonia.Media.EllipseGeometry.Rect"/> must not be set
            (equal to the default <see cref="T:Avalonia.Rect"/> value).
            </remarks>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.Center">
            <summary>
            Gets or sets a point that defines the center of the ellipse.
            </summary>
            <remarks>
            In order for this property to be used, <see cref="P:Avalonia.Media.EllipseGeometry.Rect"/> must not be set
            (equal to the default <see cref="T:Avalonia.Rect"/> value).
            </remarks>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintColor"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSource"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColor"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.ExperimentalAcrylicMaterial.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSource">
            <summary>
            Gets or Sets the BackgroundSource <seealso cref="T:Avalonia.Media.AcrylicBackgroundSource"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintColor">
            <summary>
            Gets or Sets the TintColor.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacity">
            <summary>
            Gets or Sets the Tint Opacity.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColor">
            <summary>
            Gets or Sets the Fallback Color.
            This is used on rendering plaforms that dont support acrylic.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacity">
            <summary>
            Gets or Sets the MaterialOpacity.
            This makes the material more or less opaque.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevel">
            <summary>
            Gets or Sets the PlatformTransparencyCompensationLevel.
            This value defines the minimum <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacity"/> that can be used.
            It means material opacity is re-scaled from this value to 1.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ExperimentalAcrylicMaterial.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the brush's visual representation.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a brush's static constructor, any change to the
            property will cause the <see cref="E:Avalonia.Media.ExperimentalAcrylicMaterial.Invalidated"/> event to be raised on the brush.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.ExperimentalAcrylicMaterial.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.ExperimentalAcrylicMaterial.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Media.FlowDirection">
            <summary>
            The 'flow-direction' property specifies whether the primary text advance
            direction shall be left-to-right or right-to-left.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FlowDirection.LeftToRight">
            <internalonly>
            Sets the primary text advance direction to left-to-right, and the line
            progression direction to top-to-bottom as is common in most Roman-based
            documents. For most characters, the current text position is advanced
            from left to right after each glyph is rendered. The 'direction' property
            is set to 'ltr'.
            </internalonly>
        </member>
        <member name="F:Avalonia.Media.FlowDirection.RightToLeft">
            <internalonly>
            Sets the primary text advance direction to right-to-left, and the line
            progression direction to top-to-bottom as is common in Arabic or Hebrew
            scripts. The direction property is set to 'rtl'.
            </internalonly>
        </member>
        <member name="T:Avalonia.Media.FontFallback">
            <summary>
            Font fallback definition that is used to override the default fallback lookup of the current <see cref="T:Avalonia.Media.FontManager"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontFallback.FontFamily">
            <summary>
            Get or set the fallback <see cref="P:Avalonia.Media.FontFallback.FontFamily"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontFallback.UnicodeRange">
            <summary>
            Get or set the <see cref="P:Avalonia.Media.FontFallback.UnicodeRange"/> that is covered by the fallback.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FontFamily.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FontFamily" /> class.
            </summary>
            <param name="name">The name of the <see cref="T:Avalonia.Media.FontFamily" />.</param>
        </member>
        <member name="M:Avalonia.Media.FontFamily.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FontFamily" /> class.
            </summary>
            <param name="baseUri">Specifies the base uri that is used to resolve font family assets.</param>
            <param name="name">The name of the <see cref="T:Avalonia.Media.FontFamily" />.</param>
            <exception cref="T:System.ArgumentException">Base uri must be an absolute uri.</exception>
        </member>
        <member name="P:Avalonia.Media.FontFamily.Default">
            <summary>
            Represents the default font family
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontFamily.Name">
            <summary>
            Gets the primary family name of the font family.
            </summary>
            <value>
            The primary name of the font family.
            </value>
        </member>
        <member name="P:Avalonia.Media.FontFamily.FamilyNames">
            <summary>
            Gets the family names.
            </summary>
            <value>
            The family familyNames.
            </value>
        </member>
        <member name="P:Avalonia.Media.FontFamily.Key">
            <summary>
            Gets the key for associated assets.
            </summary>
            <value>
            The family key.
            </value>
            <remarks>Key is only used for custom fonts.</remarks>
        </member>
        <member name="M:Avalonia.Media.FontFamily.op_Implicit(System.String)~Avalonia.Media.FontFamily">
            <summary>
            Implicit conversion of string to FontFamily
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Avalonia.Media.FontFamily.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.FontFamily"/> string.
            </summary>
            <param name="s">The <see cref="T:Avalonia.Media.FontFamily"/> string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Specified family is not supported.
            </exception>
        </member>
        <member name="M:Avalonia.Media.FontFamily.Parse(System.String,System.Uri)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.FontFamily"/> string.
            </summary>
            <param name="s">The <see cref="T:Avalonia.Media.FontFamily"/> string.</param>
            <param name="baseUri">Specifies the base uri that is used to resolve font family assets.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Specified family is not supported.
            </exception>
        </member>
        <member name="M:Avalonia.Media.FontFamily.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.FontFamily.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Avalonia.Media.FontManager">
            <summary>
                The font manager is used to query the system's installed fonts and is responsible for caching loaded fonts.
                It is also responsible for the font fallback.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontManager.Current">
            <summary>
            Get the current font manager instance.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontManager.DefaultFontFamily">
            <summary>
                Gets the system's default font family.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontManager.SystemFonts">
            <summary>
                Get all system fonts.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FontManager.TryGetGlyphTypeface(Avalonia.Media.Typeface,Avalonia.Media.IGlyphTypeface@)">
            <summary>
                Tries to get a glyph typeface for specified typeface.
            </summary>
            <param name="typeface">The typeface.</param>
            <param name="glyphTypeface">The created glyphTypeface</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Media.FontManager"/> could create the glyph typeface, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.FontManager.AddFontCollection(Avalonia.Media.Fonts.IFontCollection)">
            <summary>
            Add a font collection to the manager.
            </summary>
            <param name="fontCollection">The font collection.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>If a font collection's key is already present the collection is replaced.</remarks>
        </member>
        <member name="M:Avalonia.Media.FontManager.RemoveFontCollection(System.Uri)">
            <summary>
            Removes the font collection that corresponds to specified key.
            </summary>
            <param name="key">The font collection's key.</param>
        </member>
        <member name="M:Avalonia.Media.FontManager.TryMatchCharacter(System.Int32,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch,Avalonia.Media.FontFamily,System.Globalization.CultureInfo,Avalonia.Media.Typeface@)">
            <summary>
                Tries to match a specified character to a <see cref="T:Avalonia.Media.Typeface"/> that supports specified font properties.
            </summary>
            <param name="codepoint">The codepoint to match against.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="fontStretch">The font stretch.</param>
            <param name="fontFamily">The font family. This is optional and used for fallback lookup.</param>
            <param name="culture">The culture.</param>
            <param name="typeface">The matching <see cref="T:Avalonia.Media.Typeface"/>.</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Media.FontManager"/> could match the character to specified parameters, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="T:Avalonia.Media.FontMetrics">
            <summary>
            The font metrics is holding information about a font's ascent, descent, etc. in design em units.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.DesignEmHeight">
            <summary>
                Gets the font design units per em.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.IsFixedPitch">
            <summary>
                A <see cref="T:System.Boolean"/> value indicating whether all glyphs in the font have the same advancement. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.Ascent">
            <summary>
                Gets the recommended distance above the baseline in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.Descent">
            <summary>
                Gets the recommended distance under the baseline in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.LineGap">
            <summary>
                 Gets the recommended additional space between two lines of text in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.LineSpacing">
            <summary>
                Gets the recommended line spacing of a formed text line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.UnderlinePosition">
            <summary>
                Gets a value that indicates the distance of the underline from the baseline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.UnderlineThickness">
            <summary>
                Gets a value that indicates the thickness of the underline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.StrikethroughPosition">
            <summary>
                Gets a value that indicates the distance of the strikethrough from the baseline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontMetrics.StrikethroughThickness">
            <summary>
                Gets a value that indicates the thickness of the underline in design em size.
            </summary>
        </member>
        <member name="T:Avalonia.Media.FontSimulations">
            <summary>
                Specifies algorithmic style simulations to be applied to the typeface.
                Bold and oblique simulations can be combined via bitwise OR operation.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontSimulations.None">
            <summary>
            No simulations are performed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontSimulations.Bold">
            <summary>
            Algorithmic emboldening is performed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontSimulations.Oblique">
            <summary>
            Algorithmic italicization is performed.
            </summary>
        </member>
        <member name="T:Avalonia.Media.FontStretch">
            <summary>
            FontStretch describes relative change from the normal aspect ratio
            as specified by a font designer for the glyphs in a font.
            </summary>
        </member>
        <member name="T:Avalonia.Media.FontStyle">
            <summary>
            Defines the available font styles.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontStyle.Normal">
            <summary>
            A normal font.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontStyle.Italic">
            <summary>
            An italic font.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontStyle.Oblique">
            <summary>
            An oblique font.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Fonts.FamilyNameCollection"/> class.
            </summary>
            <param name="familyNames">The family names.</param>
            <exception cref="T:System.ArgumentException">familyNames</exception>
        </member>
        <member name="P:Avalonia.Media.Fonts.FamilyNameCollection.PrimaryFamilyName">
            <summary>
            Gets the primary family name.
            </summary>
            <value>
            The primary family name.
            </value>
        </member>
        <member name="P:Avalonia.Media.Fonts.FamilyNameCollection.HasFallbacks">
            <summary>
            Gets a value indicating whether fallbacks are defined.
            </summary>
            <value>
              <c>true</c> if fallbacks are defined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the name collection.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Avalonia.Media.Fonts.FontFamilyKey">
            <summary>
            Represents an identifier for a <see cref="T:Avalonia.Media.FontFamily"/>
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.#ctor(System.Uri,System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:Avalonia.Media.Fonts.FontFamilyKey"/>
            </summary>
            <param name="source"></param>
            <param name="baseUri"></param>
        </member>
        <member name="P:Avalonia.Media.Fonts.FontFamilyKey.Source">
            <summary>
            Source of stored font asset that belongs to a <see cref="T:Avalonia.Media.FontFamily"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.Fonts.FontFamilyKey.BaseUri">
            <summary>
            A base URI to use if <see cref="P:Avalonia.Media.Fonts.FontFamilyKey.Source"/> is relative
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyLoader.LoadFontAssets(System.Uri)">
            <summary>
            Loads all font assets that belong to the specified <see cref="T:Avalonia.Media.Fonts.FontFamilyKey"/>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyLoader.GetFontAssetsBySource(System.Uri)">
            <summary>
            Searches for font assets at a given location and returns a quantity of found assets
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyLoader.GetFontAssetsByExpression(System.Uri)">
            <summary>
            Searches for font assets at a given location and only accepts assets that fit to a given filename expression.
            <para>File names can target multiple files with * wildcard. For example "FontFile*.ttf"</para>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Media.Fonts.IFontCollection.Key">
            <summary>
            Get the font collection's key.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.IFontCollection.Initialize(Avalonia.Platform.IFontManagerImpl)">
            <summary>
            Initializes the font collection.
            </summary>
            <param name="fontManager">The font manager the collection is registered with.</param>
        </member>
        <member name="M:Avalonia.Media.Fonts.IFontCollection.TryGetGlyphTypeface(System.String,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch,Avalonia.Media.IGlyphTypeface@)">
            <summary>
            Try to get a glyph typeface for given parameters.
            </summary>
            <param name="familyName">The family name.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
            <param name="stretch">The font stretch.</param>
            <param name="glyphTypeface">The glyph typeface.</param>
            <returns>Returns <c>true</c> if a glyph typface can be found; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.IFontCollection.TryMatchCharacter(System.Int32,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch,System.String,System.Globalization.CultureInfo,Avalonia.Media.Typeface@)">
            <summary>
                Tries to match a specified character to a <see cref="T:Avalonia.Media.Typeface"/> that supports specified font properties.
            </summary>
            <param name="codepoint">The codepoint to match against.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="fontStretch">The font stretch.</param>
            <param name="familyName">The family name. This is optional and used for fallback lookup.</param>
            <param name="culture">The culture.</param>
            <param name="typeface">The matching <see cref="T:Avalonia.Media.Typeface"/>.</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Media.FontManager"/> could match the character to specified parameters, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="T:Avalonia.Media.FontWeight">
            <summary>
            Defines a set of predefined font weights.
            </summary>
            <remarks>
            As well as the values defined by this enumeration you can also pass any integer value by
            casting it to <see cref="T:Avalonia.Media.FontWeight"/>, e.g. <code>(FontWeight)550</code>.
            </remarks>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Thin">
            <summary>
            Specifies a "thin" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.ExtraLight">
            <summary>
            Specifies an "extra light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.UltraLight">
            <summary>
            Specifies an "ultra light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Light">
            <summary>
            Specifies a "light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.SemiLight">
            <summary>
            Specifies a "semi light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Normal">
            <summary>
            Specifies a "normal" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Regular">
            <summary>
            Specifies a "regular" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Medium">
            <summary>
            Specifies a "medium" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.DemiBold">
            <summary>
            Specifies a "demi-bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.SemiBold">
            <summary>
            Specifies a "semi-bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Bold">
            <summary>
            Specifies a "bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.ExtraBold">
            <summary>
            Specifies an "extra bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.UltraBold">
            <summary>
            Specifies an "ultra bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Black">
            <summary>
            Specifies a "black" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Heavy">
            <summary>
            Specifies a "heavy" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.ExtraBlack">
            <summary>
            Specifies an "extra black" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.UltraBlack">
            <summary>
            Specifies an "ultra black" font weight.
            </summary>
        </member>
        <member name="T:Avalonia.Media.FormattedText">
            <summary>
            The FormattedText class is targeted at programmers needing to add some simple text to a MIL visual.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.#ctor(System.String,System.Globalization.CultureInfo,Avalonia.Media.FlowDirection,Avalonia.Media.Typeface,System.Double,Avalonia.Media.IBrush)">
            <summary>
            Construct a FormattedText object.
            </summary>
            <param name="textToFormat">String of text to be displayed.</param>
            <param name="culture">Culture of text.</param>
            <param name="flowDirection">Flow direction of text.</param>
            <param name="typeface">Type face used to display text.</param>
            <param name="emSize">Font em size in visual units (1/96 of an inch).</param>
            <param name="foreground">Foreground brush used to render text.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetForegroundBrush(Avalonia.Media.IBrush)">
            <summary>
            Sets foreground brush used for drawing text
            </summary>
            <param name="foregroundBrush">Foreground brush</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetForegroundBrush(Avalonia.Media.IBrush,System.Int32,System.Int32)">
            <summary>
            Sets foreground brush used for drawing text
            </summary>
            <param name="foregroundBrush">Foreground brush</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontFamily(System.String)">
            <summary>
            Sets or changes the font family for the text object 
            </summary>
            <param name="fontFamily">Font family name</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontFamily(System.String,System.Int32,System.Int32)">
            <summary>
            Sets or changes the font family for the text object 
            </summary>
            <param name="fontFamily">Font family name</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontFamily(Avalonia.Media.FontFamily)">
            <summary>
            Sets or changes the font family for the text object 
            </summary>
            <param name="fontFamily">Font family</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontFamily(Avalonia.Media.FontFamily,System.Int32,System.Int32)">
            <summary>
            Sets or changes the font family for the text object 
            </summary>
            <param name="fontFamily">Font family</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontSize(System.Double)">
            <summary>
            Sets or changes the font em size measured in MIL units
            </summary>
            <param name="emSize">Font em size</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontSize(System.Double,System.Int32,System.Int32)">
            <summary>
            Sets or changes the font em size measured in MIL units
            </summary>
            <param name="emSize">Font em size</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets or changes the culture for the text object.
            </summary>
            <param name="culture">The new culture for the text object.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetCulture(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Sets or changes the culture for the text object.
            </summary>
            <param name="culture">The new culture for the text object.</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontWeight(Avalonia.Media.FontWeight)">
            <summary>
            Sets or changes the font weight
            </summary>
            <param name="weight">Font weight</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontWeight(Avalonia.Media.FontWeight,System.Int32,System.Int32)">
            <summary>
            Sets or changes the font weight
            </summary>
            <param name="weight">Font weight</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontStyle(Avalonia.Media.FontStyle)">
            <summary>
            Sets or changes the font style
            </summary>
            <param name="style">Font style</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontStyle(Avalonia.Media.FontStyle,System.Int32,System.Int32)">
            <summary>
            Sets or changes the font style
            </summary>
            <param name="style">Font style</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontTypeface(Avalonia.Media.Typeface)">
            <summary>
            Sets or changes the type face
            </summary>
            <param name="typeface">Typeface</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetFontTypeface(Avalonia.Media.Typeface,System.Int32,System.Int32)">
            <summary>
            Sets or changes the type face
            </summary>
            <param name="typeface">Typeface</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetTextDecorations(Avalonia.Media.TextDecorationCollection)">
            <summary>
            Sets or changes the text decorations
            </summary>
            <param name="textDecorations">Text decorations</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetTextDecorations(Avalonia.Media.TextDecorationCollection,System.Int32,System.Int32)">
            <summary>
            Sets or changes the text decorations
            </summary>
            <param name="textDecorations">Text decorations</param>
            <param name="startIndex">The start index of initial character to apply the change to.</param>
            <param name="count">The number of characters the change should be applied to.</param>
        </member>
        <member name="T:Avalonia.Media.FormattedText.LineEnumerator">
            Note: enumeration is temporarily made private
            because of PS #828532
            
            <summary>
            Strongly typed enumerator used for enumerating text lines
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.LineEnumerator.Current">
            <summary>
            Gets the current text line in the collection
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.LineEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current text line in the collection
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.LineEnumerator.CurrentParagraphWidth">
            <summary>
            Gets the paragraph width used to format the current text line
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.LineEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next text line of the collection
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.LineEnumerator.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)">
            <summary>
            Wrapper of TextFormatter.FormatLine that auto-collapses the line if needed.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.LineEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the text line collection
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.FlowDirection">
            <summary>
            Defines the flow direction
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.TextAlignment">
            <summary>
            Defines the alignment of text within the column
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.LineHeight">
            <summary>
            Gets or sets the height of, or the spacing between, each line where
            zero represents the default line height.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.MaxTextWidth">
            <summary>
            The MaxTextWidth property defines the alignment edges for the FormattedText.
            For example, left aligned text is wrapped such that the leftmost glyph alignment point
            on each line falls exactly on the left edge of the rectangle.
            Note that for many fonts, especially in italic style, some glyph strokes may extend beyond the edges of the alignment rectangle.
            For this reason, it is recommended that clients draw text with at least 1/6 em (i.e of the font size) unused margin space either side.
            Zero value of MaxTextWidth is equivalent to the maximum possible paragraph width.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.SetMaxTextWidths(System.Double[])">
            <summary>
            Sets the array of lengths,
            which will be applied to each line of text in turn.
            If the text covers more lines than there are entries in the length array,
            the last entry is reused as many times as required.
            The maxTextWidths array overrides the MaxTextWidth property.
            </summary>
            <param name="maxTextWidths">The max text width array</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.GetMaxTextWidths">
            <summary>
            Obtains a copy of the array of lengths,
            which will be applied to each line of text in turn.
            If the text covers more lines than there are entries in the length array,
            the last entry is reused as many times as required.
            The maxTextWidths array overrides the MaxTextWidth property.
            </summary>
            <returns>The copy of max text width array</returns>
        </member>
        <member name="P:Avalonia.Media.FormattedText.MaxTextHeight">
            <summary>
            Sets the maximum length of a column of text.
            The last line of text displayed is the last whole line that will fit within this limit,
            or the nth line as specified by MaxLineCount, whichever occurs first.
            Use the Trimming property to control how the omission of text is indicated.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.MaxLineCount">
            <summary>
            Defines the maximum number of lines to display.
            The last line of text displayed is the lineCount-1'th line,
            or the last whole line that will fit within the count set by MaxTextHeight,
            whichever occurs first.
            Use the Trimming property to control how the omission of text is indicated
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Trimming">
            <summary>
            Defines how omission of text is indicated.
            CharacterEllipsis trimming allows partial words to be displayed,
            while WordEllipsis removes whole words to fit.
            Both guarantee to include an ellipsis ('...') at the end of the lines
            where text has been trimmed as a result of line and column limits.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Metrics">
            <summary>
            Lazily initializes the cached metrics EXCEPT for black box metrics and
            returns the CachedMetrics structure.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.BlackBoxMetrics">
            <summary>
            Lazily initializes the cached metrics INCLUDING black box metrics and
            returns the CachedMetrics structure.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Height">
            <summary>
            The distance from the top of the first line to the bottom of the last line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Extent">
            <summary>
            The distance from the topmost black pixel of the first line
            to the bottommost black pixel of the last line. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Baseline">
            <summary>
            The distance from the top of the first line to the baseline of the first line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.OverhangAfter">
            <summary>
            The distance from the bottom of the last line to the extent bottom.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.OverhangLeading">
            <summary>
            The maximum distance from the leading black pixel to the leading alignment point of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.OverhangTrailing">
            <summary>
            The maximum distance from the trailing black pixel to the trailing alignment point of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Width">
            <summary>
            The maximum advance width between the leading and trailing alignment points of a line,
            excluding the width of whitespace characters at the end of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.WidthIncludingTrailingWhitespace">
            <summary>
            The maximum advance width between the leading and trailing alignment points of a line,
            including the width of whitespace characters at the end of the line.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.BuildGeometry(Avalonia.Point)">
            <summary>
            Obtains geometry for the text, including underlines and strikethroughs. 
            </summary>
            <param name="origin">The left top origin of the resulting geometry.</param>
            <returns>The geometry returned contains the combined geometry
            of all of the glyphs, underlines and strikeThroughs that represent the formatted text.
            Overlapping contours are merged by performing a Boolean union operation.</returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.BuildHighlightGeometry(Avalonia.Point)">
            <summary>
            Builds a highlight geometry object.
            </summary>
            <param name="origin">The origin of the highlight region</param>
            <returns>Geometry that surrounds the text.</returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.BuildHighlightGeometry(Avalonia.Point,System.Int32,System.Int32)">
            <summary>
            Builds a highlight geometry object for a given character range.
            </summary>
            <param name="origin">The origin of the highlight region.</param>
            <param name="startIndex">The start index of initial character the bounds should be obtained for.</param>
            <param name="count">The number of characters the bounds should be obtained for.</param>
            <returns>Geometry that surrounds the specified character range.</returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.Draw(Avalonia.Media.DrawingContext,Avalonia.Point)">
            <summary>
            Draws the text object
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.TextSourceImplementation.GetTextRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Geometry">
            <summary>
            Defines a geometric shape.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Geometry.TransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Geometry.Transform"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.Geometry.Changed">
            <summary>
            Raised when the geometry changes.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.Bounds">
            <summary>
            Gets the geometry's bounding rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.PlatformImpl">
            <summary>
            Gets the platform-specific implementation of the geometry.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.Transform">
            <summary>
            Gets or sets a transform to apply to the geometry.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Geometry.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Geometry"/> from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>A <see cref="T:Avalonia.Media.StreamGeometry"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.Clone">
            <summary>
            Clones the geometry.
            </summary>
            <returns>A cloned geometry.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.GetRenderBounds(Avalonia.Media.IPen)">
            <summary>
            Gets the geometry's bounding rectangle with the specified pen.
            </summary>
            <param name="pen">The stroke thickness.</param>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.FillContains(Avalonia.Point)">
            <summary>
            Indicates whether the geometry's fill contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.StrokeContains(Avalonia.Media.IPen,Avalonia.Point)">
            <summary>
            Indicates whether the geometry's stroke contains the specified point.
            </summary>
            <param name="pen">The pen to use.</param>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.AffectsGeometry(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the geometry's <see cref="P:Avalonia.Media.Geometry.PlatformImpl"/>.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Media.Geometry.InvalidateGeometry"/> to be called on the element.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.Geometry.CreateDefiningGeometry">
            <summary>
            Creates the platform implementation of the geometry, without the transform applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.InvalidateGeometry">
            <summary>
            Invalidates the platform implementation of the geometry.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.ContourLength">
            <summary>
            Gets the geometry's total length as if all its contours are placed
            in a straight line.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Geometry.Combine(Avalonia.Media.Geometry,Avalonia.Media.RectangleGeometry,Avalonia.Media.GeometryCombineMode,Avalonia.Media.Transform)">
            <summary>
            Combines the two geometries using the specified <see cref="T:Avalonia.Media.GeometryCombineMode"/> and applies the specified transform to the resulting geometry.
            </summary>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
            <param name="combineMode">One of the enumeration values that specifies how the geometries are combined.</param>
            <param name="transform">A transformation to apply to the combined geometry, or <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.TryGetPointAtDistance(System.Double,Avalonia.Point@)">
            <summary>
            Attempts to get the corresponding point at the
            specified distance
            </summary>
            <param name="distance">The contour distance to get from.</param>
            <param name="point">The point in the specified distance.</param>
            <returns>If there's valid point at the specified distance.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.TryGetPointAndTangentAtDistance(System.Double,Avalonia.Point@,Avalonia.Point@)">
            <summary>
            Attempts to get the corresponding point and
            tangent from the specified distance along the
            contour of the geometry.
            </summary>
            <param name="distance">The contour distance to get from.</param>
            <param name="point">The point in the specified distance.</param>
            <param name="tangent">The tangent in the specified distance.</param>
            <returns>If there's valid point and tangent at the specified distance.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.TryGetSegment(System.Double,System.Double,System.Boolean,Avalonia.Media.Geometry@)">
            <summary>
            Attempts to get the corresponding path segment
            given by the two distances specified.
            Imagine it like snipping a part of the current
            geometry.
            </summary>
            <param name="startDistance">The contour distance to start snipping from.</param>
            <param name="stopDistance">The contour distance to stop snipping to.</param>
            <param name="startOnBeginFigure">If ture, the resulting snipped path will start with a BeginFigure call.</param>
            <param name="segmentGeometry">The resulting snipped path.</param>
            <returns>If the snipping operation is successful.</returns>
        </member>
        <member name="T:Avalonia.Media.GeometryDrawing">
            <summary>
            Represents a drawing operation that combines 
            a geometry with and brush and/or pen to produce rendered content.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryDrawing.GeometryProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GeometryDrawing.Geometry"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryDrawing.BrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GeometryDrawing.Brush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryDrawing.PenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GeometryDrawing.Pen"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryDrawing.Geometry">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.Geometry"/> that describes the shape of this <see cref="T:Avalonia.Media.GeometryDrawing"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryDrawing.Brush">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> used to fill the interior of the shape described by this <see cref="T:Avalonia.Media.GeometryDrawing"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryDrawing.Pen">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IPen"/> used to stroke this <see cref="T:Avalonia.Media.GeometryDrawing"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.GeometryGroup">
            <summary>
            Represents a composite geometry, composed of other <see cref="T:Avalonia.Media.Geometry"/> objects.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryGroup.Children">
            <summary>
            Gets or sets the collection that contains the child geometries.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryGroup.FillRule">
            <summary>
            Gets or sets how the intersecting areas of the objects contained in this
            <see cref="T:Avalonia.Media.GeometryGroup"/> are combined. The default is <see cref="F:Avalonia.Media.FillRule.EvenOdd"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphMetrics.XBearing">
            <summary>
            Distance from the x-origin to the left extremum of the glyph.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphMetrics.YBearing">
            <summary>
            Distance from the top extremum of the glyph to the y-origin.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphMetrics.Width">
            <summary>
            Distance from the left extremum of the glyph to the right extremum.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphMetrics.Height">
            <summary>
            Distance from the top extremum of the glyph to the bottom extremum.
            </summary>
        </member>
        <member name="T:Avalonia.Media.GlyphRun">
            <summary>
                Represents a sequence of glyphs from a single face of a single font at a single size, and with a single rendering style.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.#ctor(Avalonia.Media.IGlyphTypeface,System.Double,System.ReadOnlyMemory{System.Char},System.Collections.Generic.IReadOnlyList{System.UInt16},System.Nullable{Avalonia.Point},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GlyphRun"/> class by specifying properties of the class.
            </summary>
            <param name="glyphTypeface">The glyph typeface.</param>
            <param name="fontRenderingEmSize">The rendering em size.</param>
            <param name="characters">The characters.</param>
            <param name="glyphIndices">The glyph indices.</param>
            <param name="baselineOrigin">The baseline origin of the run.</param>
            <param name="biDiLevel">The bidi level.</param>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.#ctor(Avalonia.Media.IGlyphTypeface,System.Double,System.ReadOnlyMemory{System.Char},System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.GlyphInfo},System.Nullable{Avalonia.Point},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GlyphRun"/> class by specifying properties of the class.
            </summary>
            <param name="glyphTypeface">The glyph typeface.</param>
            <param name="fontRenderingEmSize">The rendering em size.</param>
            <param name="characters">The characters.</param>
            <param name="glyphInfos">The list of glyphs used.</param>
            <param name="baselineOrigin">The baseline origin of the run.</param>
            <param name="biDiLevel">The bidi level.</param>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphTypeface">
            <summary>
                Gets the <see cref="T:Avalonia.Media.IGlyphTypeface"/> for the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.FontRenderingEmSize">
            <summary>
                Gets or sets the em size used for rendering the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Bounds">
            <summary>
                Gets the conservative bounding box of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Metrics">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.BaselineOrigin">
            <summary>
                Gets or sets the baseline origin of the<see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Characters">
            <summary>
                Gets or sets the list of UTF16 code points that represent the Unicode content of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphInfos">
            <summary>
            Gets or sets the list of glyphs to use to render this run.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.BiDiLevel">
            <summary>
                Gets or sets the bidirectional nesting level of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Scale">
            <summary>
            Gets the scale of the current <see cref="T:Avalonia.Media.IGlyphTypeface"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.IsLeftToRight">
            <summary>
            Returns <c>true</c> if the text direction is left-to-right. Otherwise, returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.PlatformImpl">
            <summary>
            The platform implementation of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.BuildGeometry">
            <summary>
            Obtains geometry for the glyph run.
            </summary>
            <returns>The geometry returned contains the combined geometry of all glyphs in the glyph run.</returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Retrieves the offset from the leading edge of the <see cref="T:Avalonia.Media.GlyphRun"/>
            to the leading or trailing edge of a caret stop containing the specified character hit.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> to use for computing the offset.</param>
            <returns>
            A <see cref="T:System.Double"/> that represents the offset from the leading edge of the <see cref="T:Avalonia.Media.GlyphRun"/>
            to the leading or trailing edge of a caret stop containing the character hit.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetCharacterHitFromDistance(System.Double,System.Boolean@)">
            <summary>
            Retrieves the <see cref="T:Avalonia.Media.CharacterHit"/> value that represents the character hit of the caret of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <param name="distance">Offset to use for computing the caret character hit.</param>
            <param name="isInside">Determines whether the character hit is inside the <see cref="T:Avalonia.Media.GlyphRun"/>.</param>
            <returns>
            A <see cref="T:Avalonia.Media.CharacterHit"/> value that represents the character hit that is closest to the distance value.
            The out parameter <c>isInside</c> returns <c>true</c> if the character hit is inside the <see cref="T:Avalonia.Media.GlyphRun"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetNextCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Retrieves the next valid caret character hit in the logical direction in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> to use for computing the next hit value.</param>
            <returns>
            A <see cref="T:Avalonia.Media.CharacterHit"/> that represents the next valid caret character hit in the logical direction.
            If the return value is equal to <c>characterHit</c>, no further navigation is possible in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Retrieves the previous valid caret character hit in the logical direction in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> to use for computing the previous hit value.</param>
            <returns>
            A cref="CharacterHit"/> that represents the previous valid caret character hit in the logical direction.
            If the return value is equal to <c>characterHit</c>, no further navigation is possible in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.FindGlyphIndex(System.Int32)">
            <summary>
            Finds a glyph index for given character index.
            </summary>
            <param name="characterIndex">The character index.</param>
            <returns>
            The glyph index.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.FindNearestCharacterHit(System.Int32,System.Double@)">
            <summary>
            Finds the nearest <see cref="T:Avalonia.Media.CharacterHit"/> at given index.
            </summary>
            <param name="index">The index.</param>
            <param name="width">The width of found cluster.</param>
            <returns>
            The nearest <see cref="T:Avalonia.Media.CharacterHit"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetIntersections(System.Single,System.Single)">
            <summary>
            Gets the intersections of specified upper and lower limit.
            </summary>
            <param name="lowerLimit">Upper limit.</param>
            <param name="upperLimit">Lower limit.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.GradientBrush">
            <summary>
            Base class for brushes that draw with a gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientBrush.SpreadMethodProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GradientBrush.SpreadMethod"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientBrush.GradientStopsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GradientBrush.GradientStops"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GradientBrush"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GradientBrush.SpreadMethod">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.GradientBrush.GradientStops">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.GradientBrush.Avalonia#Media#IGradientBrush#GradientStops">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.GradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientStop.OffsetProperty">
            <summary>
            Describes the <see cref="P:Avalonia.Media.GradientStop.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientStop.ColorProperty">
            <summary>
            Describes the <see cref="P:Avalonia.Media.GradientStop.Color"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GradientStop"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GradientStop.#ctor(Avalonia.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GradientStop"/> class.
            </summary>
            <param name="color">The color</param>
            <param name="offset">The offset</param>
        </member>
        <member name="P:Avalonia.Media.GradientStop.Offset">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.GradientStop.Color">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.GradientStops">
            <summary>
            A collection of <see cref="T:Avalonia.Media.GradientStop"/>s.
            </summary>
        </member>
        <member name="T:Avalonia.Media.HslColor">
            <summary>
            Defines a color using the hue/saturation/lightness (HSL) model.
            This uses a cylindrical-coordinate representation of a color.
            </summary>
        </member>
        <member name="M:Avalonia.Media.HslColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.HslColor"/> struct.
            </summary>
            <param name="alpha">The Alpha (transparency) component in the range from 0..1.</param>
            <param name="hue">The Hue component in the range from 0..360.
            Note that 360 is equivalent to 0 and will be adjusted automatically.</param>
            <param name="saturation">The Saturation component in the range from 0..1.</param>
            <param name="lightness">The Lightness component in the range from 0..1.</param>
        </member>
        <member name="M:Avalonia.Media.HslColor.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.HslColor"/> struct.
            </summary>
            <remarks>
            This constructor exists only for internal use where performance is critical.
            Whether or not the component values are in the correct ranges must be known.
            </remarks>
            <param name="alpha">The Alpha (transparency) component in the range from 0..1.</param>
            <param name="hue">The Hue component in the range from 0..360.
            Note that 360 is equivalent to 0 and will be adjusted automatically.</param>
            <param name="saturation">The Saturation component in the range from 0..1.</param>
            <param name="lightness">The Lightness component in the range from 0..1.</param>
            <param name="clampValues">Whether to clamp component values to their required ranges.</param>
        </member>
        <member name="M:Avalonia.Media.HslColor.#ctor(Avalonia.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.HslColor"/> struct.
            </summary>
            <param name="color">The RGB color to convert to HSL.</param>
        </member>
        <member name="P:Avalonia.Media.HslColor.A">
            <inheritdoc cref="P:Avalonia.Media.HsvColor.A"/>
        </member>
        <member name="P:Avalonia.Media.HslColor.H">
            <inheritdoc cref="P:Avalonia.Media.HsvColor.H"/>
        </member>
        <member name="P:Avalonia.Media.HslColor.S">
            <inheritdoc cref="P:Avalonia.Media.HsvColor.S"/>
        </member>
        <member name="P:Avalonia.Media.HslColor.L">
            <summary>
            Gets the Lightness component in the range from 0..1 (percentage).
            </summary>
            <remarks>
            <list type="bullet">
              <item>0 is fully black.</item>
              <item>1 is fully white.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Avalonia.Media.HslColor.Equals(Avalonia.Media.HslColor)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.HslColor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.HslColor.GetHashCode">
            <summary>
            Gets a hashcode for this object.
            Hashcode is not guaranteed to be unique.
            </summary>
            <returns>The hashcode for this object.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.ToRgb">
            <summary>
            Returns the RGB color model equivalent of this HSL color.
            </summary>
            <returns>The RGB equivalent color.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.ToHsv">
            <summary>
            Returns the HSV color model equivalent of this HSL color.
            </summary>
            <returns>The HSV equivalent color.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.HslColor.Parse(System.String)">
            <summary>
            Parses an HSL color string.
            </summary>
            <param name="s">The HSL color string to parse.</param>
            <returns>The parsed <see cref="T:Avalonia.Media.HslColor"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.TryParse(System.String,Avalonia.Media.HslColor@)">
            <summary>
            Parses an HSL color string.
            </summary>
            <param name="s">The HSL color string to parse.</param>
            <param name="hslColor">The parsed <see cref="T:Avalonia.Media.HslColor"/>.</param>
            <returns>True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.FromAhsl(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Avalonia.Media.HslColor"/> from individual color component values.
            </summary>
            <remarks>
            This exists for symmetry with the <see cref="T:Avalonia.Media.Color"/> struct; however, the
            appropriate constructor should commonly be used instead.
            </remarks>
            <param name="a">The Alpha (transparency) component in the range from 0..1.</param>
            <param name="h">The Hue component in the range from 0..360.</param>
            <param name="s">The Saturation component in the range from 0..1.</param>
            <param name="l">The Lightness component in the range from 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HslColor"/> built from the individual color component values.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Avalonia.Media.HslColor"/> from individual color component values.
            </summary>
            <remarks>
            This exists for symmetry with the <see cref="T:Avalonia.Media.Color"/> struct; however, the
            appropriate constructor should commonly be used instead.
            </remarks>
            <param name="h">The Hue component in the range from 0..360.</param>
            <param name="s">The Saturation component in the range from 0..1.</param>
            <param name="l">The Lightness component in the range from 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HslColor"/> built from the individual color component values.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.ToRgb(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given HSLA color component values to their RGB color equivalent.
            </summary>
            <param name="hue">The Hue component in the HSL color model in the range from 0..360.</param>
            <param name="saturation">The Saturation component in the HSL color model in the range from 0..1.</param>
            <param name="lightness">The Lightness component in the HSL color model in the range from 0..1.</param>
            <param name="alpha">The Alpha component in the range from 0..1.</param>
            <returns>A new RGB <see cref="T:Avalonia.Media.Color"/> equivalent to the given HSLA values.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.ToHsv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given HSLA color component values to their HSV color equivalent.
            </summary>
            <param name="hue">The Hue component in the HSL color model in the range from 0..360.</param>
            <param name="saturation">The Saturation component in the HSL color model in the range from 0..1.</param>
            <param name="lightness">The Lightness component in the HSL color model in the range from 0..1.</param>
            <param name="alpha">The Alpha component in the range from 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HsvColor"/> equivalent to the given HSLA values.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.op_Equality(Avalonia.Media.HslColor,Avalonia.Media.HslColor)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Avalonia.Media.HslColor"/> objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.op_Inequality(Avalonia.Media.HslColor,Avalonia.Media.HslColor)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Avalonia.Media.HslColor"/> objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left and right are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.HslColor.op_Explicit(Avalonia.Media.HslColor)~Avalonia.Media.Color">
            <summary>
            Explicit conversion from an <see cref="T:Avalonia.Media.HslColor"/> to a <see cref="T:Avalonia.Media.Color"/>.
            </summary>
            <param name="hslColor">The <see cref="T:Avalonia.Media.HslColor"/> to convert.</param>
        </member>
        <member name="T:Avalonia.Media.HsvColor">
            <summary>
            Defines a color using the hue/saturation/value (HSV) model.
            This uses a cylindrical-coordinate representation of a color.
            </summary>
        </member>
        <member name="M:Avalonia.Media.HsvColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.HsvColor"/> struct.
            </summary>
            <param name="alpha">The Alpha (transparency) component in the range from 0..1.</param>
            <param name="hue">The Hue component in the range from 0..360.
            Note that 360 is equivalent to 0 and will be adjusted automatically.</param>
            <param name="saturation">The Saturation component in the range from 0..1.</param>
            <param name="value">The Value component in the range from 0..1.</param>
        </member>
        <member name="M:Avalonia.Media.HsvColor.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.HsvColor"/> struct.
            </summary>
            <remarks>
            This constructor exists only for internal use where performance is critical.
            Whether or not the component values are in the correct ranges must be known.
            </remarks>
            <param name="alpha">The Alpha (transparency) component in the range from 0..1.</param>
            <param name="hue">The Hue component in the range from 0..360.
            Note that 360 is equivalent to 0 and will be adjusted automatically.</param>
            <param name="saturation">The Saturation component in the range from 0..1.</param>
            <param name="value">The Value component in the range from 0..1.</param>
            <param name="clampValues">Whether to clamp component values to their required ranges.</param>
        </member>
        <member name="M:Avalonia.Media.HsvColor.#ctor(Avalonia.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.HsvColor"/> struct.
            </summary>
            <param name="color">The RGB color to convert to HSV.</param>
        </member>
        <member name="P:Avalonia.Media.HsvColor.A">
            <summary>
            Gets the Alpha (transparency) component in the range from 0..1 (percentage).
            </summary>
            <remarks>
            <list type="bullet">
              <item>0 is fully transparent.</item>
              <item>1 is fully opaque.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Avalonia.Media.HsvColor.H">
            <summary>
            Gets the Hue component in the range from 0..360 (degrees).
            This is the color's location, in degrees, on a color wheel/circle from 0 to 360.
            Note that 360 is equivalent to 0 and will be adjusted automatically.
            </summary>
            <remarks>
            <list type="bullet">
              <item>0/360 degrees is Red.</item>
              <item>60 degrees is Yellow.</item>
              <item>120 degrees is Green.</item>
              <item>180 degrees is Cyan.</item>
              <item>240 degrees is Blue.</item>
              <item>300 degrees is Magenta.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Avalonia.Media.HsvColor.S">
            <summary>
            Gets the Saturation component in the range from 0..1 (percentage).
            </summary>
            <remarks>
            <list type="bullet">
              <item>0 is fully white (or a shade of gray) and shows no color.</item>
              <item>1 is the full color.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Avalonia.Media.HsvColor.V">
            <summary>
            Gets the Value (or Brightness/Intensity) component in the range from 0..1 (percentage).
            </summary>
            <remarks>
            <list type="bullet">
              <item>0 is fully black and shows no color.</item>
              <item>1 is the brightest and shows full color.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Avalonia.Media.HsvColor.Equals(Avalonia.Media.HsvColor)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.HsvColor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.HsvColor.GetHashCode">
            <summary>
            Gets a hashcode for this object.
            Hashcode is not guaranteed to be unique.
            </summary>
            <returns>The hashcode for this object.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.ToRgb">
            <summary>
            Returns the RGB color model equivalent of this HSV color.
            </summary>
            <returns>The RGB equivalent color.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.ToHsl">
            <summary>
            Returns the HSL color model equivalent of this HSV color.
            </summary>
            <returns>The HSL equivalent color.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.HsvColor.Parse(System.String)">
            <summary>
            Parses an HSV color string.
            </summary>
            <param name="s">The HSV color string to parse.</param>
            <returns>The parsed <see cref="T:Avalonia.Media.HsvColor"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.TryParse(System.String,Avalonia.Media.HsvColor@)">
            <summary>
            Parses an HSV color string.
            </summary>
            <param name="s">The HSV color string to parse.</param>
            <param name="hsvColor">The parsed <see cref="T:Avalonia.Media.HsvColor"/>.</param>
            <returns>True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.FromAhsv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Avalonia.Media.HsvColor"/> from individual color component values.
            </summary>
            <remarks>
            This exists for symmetry with the <see cref="T:Avalonia.Media.Color"/> struct; however, the
            appropriate constructor should commonly be used instead.
            </remarks>
            <param name="a">The Alpha (transparency) component in the range from 0..1.</param>
            <param name="h">The Hue component in the range from 0..360.</param>
            <param name="s">The Saturation component in the range from 0..1.</param>
            <param name="v">The Value component in the range from 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HsvColor"/> built from the individual color component values.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.FromHsv(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Avalonia.Media.HsvColor"/> from individual color component values.
            </summary>
            <remarks>
            This exists for symmetry with the <see cref="T:Avalonia.Media.Color"/> struct; however, the
            appropriate constructor should commonly be used instead.
            </remarks>
            <param name="h">The Hue component in the range from 0..360.</param>
            <param name="s">The Saturation component in the range from 0..1.</param>
            <param name="v">The Value component in the range from 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HsvColor"/> built from the individual color component values.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.ToRgb(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given HSVA color component values to their RGB color equivalent.
            </summary>
            <param name="hue">The Hue component in the HSV color model in the range from 0..360.</param>
            <param name="saturation">The Saturation component in the HSV color model in the range from 0..1.</param>
            <param name="value">The Value component in the HSV color model in the range from 0..1.</param>
            <param name="alpha">The Alpha component in the range from 0..1.</param>
            <returns>A new RGB <see cref="T:Avalonia.Media.Color"/> equivalent to the given HSVA values.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.ToHsl(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts the given HSVA color component values to their HSL color equivalent.
            </summary>
            <param name="hue">The Hue component in the HSV color model in the range from 0..360.</param>
            <param name="saturation">The Saturation component in the HSV color model in the range from 0..1.</param>
            <param name="value">The Value component in the HSV color model in the range from 0..1.</param>
            <param name="alpha">The Alpha component in the range from 0..1.</param>
            <returns>A new <see cref="T:Avalonia.Media.HslColor"/> equivalent to the given HSVA values.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.op_Equality(Avalonia.Media.HsvColor,Avalonia.Media.HsvColor)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Avalonia.Media.HsvColor"/> objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.op_Inequality(Avalonia.Media.HsvColor,Avalonia.Media.HsvColor)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Avalonia.Media.HsvColor"/> objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left and right are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Media.HsvColor.op_Explicit(Avalonia.Media.HsvColor)~Avalonia.Media.Color">
            <summary>
            Explicit conversion from an <see cref="T:Avalonia.Media.HsvColor"/> to a <see cref="T:Avalonia.Media.Color"/>.
            </summary>
            <param name="hsvColor">The <see cref="T:Avalonia.Media.HsvColor"/> to convert.</param>
        </member>
        <member name="T:Avalonia.Media.IAffectsRender">
            <summary>
            Signals to a self-rendering control that changes to the resource should invoke
            <see cref="M:Avalonia.Visual.InvalidateVisual"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Media.IAffectsRender.Invalidated">
            <summary>
            Raised when the resource changes visually.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IBrush">
            <summary>
            Describes how an area is painted.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IBrush.Opacity">
            <summary>
            Gets the opacity of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IBrush.Transform">
            <summary>
            Gets the transform of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IBrush.TransformOrigin">
            <summary>
            Gets the origin of the brushes <see cref="P:Avalonia.Media.IBrush.Transform"/>
            </summary>
        </member>
        <member name="T:Avalonia.Media.IConicGradientBrush">
            <summary>
            Paints an area with a conic gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IConicGradientBrush.Center">
            <summary>
            Gets the center point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IConicGradientBrush.Angle">
            <summary>
            Gets the starting angle for the gradient in degrees, measured from
            the point above the center point.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IDashStyle">
            <summary>
            Represents the sequence of dashes and gaps that will be applied by a <see cref="T:Avalonia.Media.Pen"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IDashStyle.Dashes">
            <summary>
            Gets or sets the length of alternating dashes and gaps.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IDashStyle.Offset">
            <summary>
            Gets or sets how far in the dash sequence the stroke will start.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IExperimentalAcrylicMaterial">
            <summary>
            Experimental Interface for producing Acrylic-like materials.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.BackgroundSource">
            <summary>
            Gets the <see cref="T:Avalonia.Media.AcrylicBackgroundSource"/> of the material.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.TintColor">
            <summary>
            Gets the TintColor of the material.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.TintOpacity">
            <summary>
            Gets the TintOpacity of the material.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.MaterialColor">
            <summary>
            Gets the effective material color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.FallbackColor">
            <summary>
            Gets the fallback color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.FamilyName">
            <summary>
            Gets the family name for the <see cref="T:Avalonia.Media.IGlyphTypeface"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.Weight">
            <summary>
            Gets the designed weight of the font represented by the <see cref="T:Avalonia.Media.IGlyphTypeface"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.Style">
            <summary>
            Gets the style for the <see cref="T:Avalonia.Media.IGlyphTypeface"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.Stretch">
            <summary>
            Gets the <see cref="T:Avalonia.Media.FontStretch"/> value for the <see cref="T:Avalonia.Media.IGlyphTypeface"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.GlyphCount">
            <summary>
                Gets the number of glyphs held by this glyph typeface. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.Metrics">
            <summary>
                Gets the font metrics.
            </summary>
            <returns>
                The font metrics.
            </returns>
        </member>
        <member name="P:Avalonia.Media.IGlyphTypeface.FontSimulations">
            <summary>
                Gets the algorithmic style simulations applied to this glyph typeface.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.TryGetGlyphMetrics(System.UInt16,Avalonia.Media.GlyphMetrics@)">
            <summary>
                Tries to get a glyph's metrics in em units.
            </summary>
            <param name="glyph">The glyph id.</param>
            <param name="metrics">The glyph metrics.</param>
            <returns>
              <c>true</c> if an glyph's metrics was found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.GetGlyph(System.UInt32)">
            <summary>
                Returns an glyph index for the specified codepoint.
            </summary>
            <remarks>
                Returns <c>0</c> if a glyph isn't found.
            </remarks>
            <param name="codepoint">The codepoint.</param>
            <returns>
                A glyph index.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.TryGetGlyph(System.UInt32,System.UInt16@)">
            <summary>
                Tries to get an glyph index for specified codepoint.
            </summary>
            <param name="codepoint">The codepoint.</param>
            <param name="glyph">A glyph index.</param>
            <returns>
                <c>true</c> if an glyph index was found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.GetGlyphs(System.ReadOnlySpan{System.UInt32})">
            <summary>
                Returns an array of glyph indices. Codepoints that are not represented by the font are returned as <code>0</code>.
            </summary>
            <param name="codepoints">The codepoints to map.</param>
            <returns>
                An array of glyph indices.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.GetGlyphAdvance(System.UInt16)">
            <summary>
                Returns the glyph advance for the specified glyph.
            </summary>
            <param name="glyph">The glyph.</param>
            <returns>
                The advance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.GetGlyphAdvances(System.ReadOnlySpan{System.UInt16})">
            <summary>
                Returns an array of glyph advances in design em size.
            </summary>
            <param name="glyphs">The glyph indices.</param>
            <returns>
                An array of glyph advances.
            </returns>
        </member>
        <member name="M:Avalonia.Media.IGlyphTypeface.TryGetTable(System.UInt32,System.Byte[]@)">
            <summary>
                Returns the contents of the table data for the specified tag.
            </summary>
            <param name="tag">The table tag to get the data for.</param>
            <param name="table">The contents of the table data for the specified tag.</param>
            <returns>Returns <c>true</c> if the content exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Avalonia.Media.IGradientBrush">
            <summary>
            A brush that draws with a gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientBrush.GradientStops">
            <summary>
            Gets the brush's gradient stops.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientBrush.SpreadMethod">
            <summary>
            Gets the brush's spread method that defines how to draw a gradient that doesn't fill
            the bounds of the destination control.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IGradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientStop.Color">
            <summary>
            Gets the gradient stop color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientStop.Offset">
            <summary>
            Gets the gradient stop offset.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IImage">
            <summary>
            Represents a raster or vector image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IImage.Size">
            <summary>
            Gets the size of the image, in device independent pixels.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IImage.Draw(Avalonia.Media.DrawingContext,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws the image to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="T:Avalonia.Media.IImageBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.Media.Imaging.IBitmap"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IImageBrush.Source">
            <summary>
            Gets the image to draw.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IImmutableBrush">
            <summary>
            Represents an immutable brush which can be safely used with various threading contexts
            </summary>
        </member>
        <member name="T:Avalonia.Media.ILinearGradientBrush">
            <summary>
            A brush that draws with a linear gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ILinearGradientBrush.StartPoint">
            <summary>
            Gets or sets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ILinearGradientBrush.EndPoint">
            <summary>
            Gets or sets the end point for the gradient.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ImageBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.Media.Imaging.IBitmap"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ImageBrush.SourceProperty">
            <summary>
            Defines the <see cref="T:Avalonia.Visual"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImageBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImageBrush.#ctor(Avalonia.Media.IImageBrushSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
            <param name="source">The image to draw.</param>
        </member>
        <member name="P:Avalonia.Media.ImageBrush.Source">
            <summary>
            Gets or sets the image to draw.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImageBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.ImageDrawing">
            <summary>
            Draws an image within a region defined by a <see cref="P:Avalonia.Media.ImageDrawing.Rect"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ImageDrawing.ImageSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ImageDrawing.ImageSource"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ImageDrawing.RectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ImageDrawing.Rect"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ImageDrawing.ImageSource">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ImageDrawing.Rect">
            <summary>
            Gets or sets region in which the image is drawn.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Imaging.Bitmap">
            <summary>
            Holds a bitmap image.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.DecodeToWidth(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a Bitmap from a stream and decodes at the desired width. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.DecodeToHeight(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a Bitmap from a stream and decodes at the desired height. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.CreateScaledBitmap(Avalonia.PixelSize,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Creates a Bitmap scaled to a specified size from the current bitmap.
            </summary>        
            <param name="destinationSize">The destination size.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="fileName">The filename of the bitmap.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="impl">A platform-specific bitmap implementation.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Platform.IBitmapImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="impl">A platform-specific bitmap implementation. Bitmap class takes the ownership.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="format">The pixel format.</param>
            <param name="alphaFormat">The alpha format.</param>
            <param name="data">The pointer to the source bytes.</param>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="stride">The number of bytes per row.</param>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.Dpi">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.Size">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.PixelSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.PlatformImpl">
            <summary>
            Gets the platform-specific bitmap implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Save(System.String,System.Nullable{System.Int32})">
            <summary>
            Saves the bitmap to a file.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="quality">
            The optional quality for compression. 
            The quality value is interpreted from 0 - 100. If quality is null the default quality 
            setting is applied.
            </param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Save(System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Saves the bitmap to a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="quality">
            The optional quality for compression. 
            The quality value is interpreted from 0 - 100. If quality is null the default quality 
            setting is applied.
            </param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Avalonia#Media#IImage#Draw(Avalonia.Media.DrawingContext,Avalonia.Rect,Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Imaging.BitmapBlendingMode">
            <summary>
            Controls the way the bitmaps are drawn together.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.SourceOver">
            <summary>
            Source is placed over the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.Source">
            <summary>
            Only the source will be present.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.Destination">
            <summary>
            Only the destination will be present.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.DestinationOver">
            <summary>
            Destination is placed over the source.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.SourceIn">
            <summary>
            The source that overlaps the destination, replaces the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.DestinationIn">
            <summary>
            Destination which overlaps the source, replaces the source.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.SourceOut">
            <summary>
            Source is placed, where it falls outside of the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.DestinationOut">
            <summary>
            Destination is placed, where it falls outside of the source.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.SourceAtop">
            <summary>
            Source which overlaps the destination, replaces the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.DestinationAtop">
            <summary>
            Destination which overlaps the source replaces the source.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.Xor">
            <summary>
            The non-overlapping regions of source and destination are combined.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapBlendingMode.Plus">
            <summary>
            Display the sum of the source image and destination image.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Imaging.BitmapInterpolationMode">
            <summary>
            Controls the performance and quality of bitmap scaling.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapInterpolationMode.None">
            <summary>
            Disable interpolation.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapInterpolationMode.LowQuality">
            <summary>
            The best performance but worst image quality.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapInterpolationMode.MediumQuality">
            <summary>
            Good performance and decent image quality.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.BitmapInterpolationMode.HighQuality">
            <summary>
            Highest quality but worst performance.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Imaging.CroppedBitmap">
            <summary>
            Crops a Bitmap.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.CroppedBitmap.SourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Imaging.CroppedBitmap.Source"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.CroppedBitmap.SourceRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Imaging.CroppedBitmap.SourceRect"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.CroppedBitmap.Source">
            <summary>
            Gets or sets the source for the bitmap.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.CroppedBitmap.SourceRect">
            <summary>
            Gets or sets the rectangular area that the bitmap is cropped to.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Imaging.IBitmap">
            <summary>
            Represents a bitmap image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.IBitmap.Dpi">
            <summary>
            Gets the dots per inch (DPI) of the image.
            </summary>
            <remarks>
            Note that Skia does not currently support reading the DPI of an image so this value
            will always be 96dpi on Skia.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.Imaging.IBitmap.PixelSize">
            <summary>
            Gets the size of the bitmap, in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.IBitmap.PlatformImpl">
            <summary>
            Gets the platform-specific bitmap implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.IBitmap.Save(System.String,System.Nullable{System.Int32})">
            <summary>
            Saves the bitmap to a file.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="quality">
            The optional quality for compression if supported by the specific backend. 
            The quality value is interpreted from 0 - 100. If quality is null the default quality 
            setting of the backend is applied.
            </param>
        </member>
        <member name="M:Avalonia.Media.Imaging.IBitmap.Save(System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Saves the bitmap to a stream in png format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="quality">
            The optional quality for compression if supported by the specific backend. 
            The quality value is interpreted from 0 - 100. If quality is null the default quality 
            setting of the backend is applied.
            </param>
        </member>
        <member name="T:Avalonia.Media.Imaging.RenderTargetBitmap">
            <summary>
            A bitmap that holds the rendering of a <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.#ctor(Avalonia.PixelSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/> class.
            </summary>
            <param name="pixelSize">The size of the bitmap.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.#ctor(Avalonia.PixelSize,Avalonia.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/> class.
            </summary>
            <param name="pixelSize">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
        </member>
        <member name="P:Avalonia.Media.Imaging.RenderTargetBitmap.PlatformImpl">
            <summary>
            Gets the platform-specific bitmap implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.Render(Avalonia.Visual)">
            <summary>
            Renders a visual to the <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/>.
            </summary>
            <param name="visual">The visual to render.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.CreateImpl(Avalonia.PixelSize,Avalonia.Vector)">
            <summary>
            Creates a platform-specific implementation for a <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/>.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <returns>The platform-specific implementation.</returns>
        </member>
        <member name="T:Avalonia.Media.Imaging.WriteableBitmap">
            <summary>
            Holds a writeable bitmap image.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.#ctor(Avalonia.PixelSize,Avalonia.Vector,System.Nullable{Avalonia.Platform.PixelFormat},System.Nullable{Avalonia.Platform.AlphaFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="format">The pixel format (optional).</param>
            <param name="alphaFormat">The alpha format (optional).</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.#ctor(Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class with existing pixel data
            The data is copied to the bitmap
            </summary>
            <param name="format">The pixel format.</param>
            <param name="alphaFormat">The alpha format.</param>
            <param name="data">The pointer to the source bytes.</param>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="stride">The number of bytes per row.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.DecodeToWidth(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a WriteableBitmap from a stream and decodes at the desired width. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.DecodeToHeight(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a Bitmap from a stream and decodes at the desired height. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.</returns>
        </member>
        <member name="P:Avalonia.Media.ImmediateDrawingContext.CurrentTransform">
            <summary>
            Gets the current transform of the drawing context.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawBitmap(Avalonia.Media.Imaging.Bitmap,Avalonia.Rect)">
            <summary>
            Draws an bitmap.
            </summary>
            <param name="source">The bitmap.</param>
            <param name="rect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawBitmap(Avalonia.Media.Imaging.Bitmap,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws an image.
            </summary>
            <param name="source">The bitmap.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawLine(Avalonia.Media.Immutable.ImmutablePen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawRectangle(Avalonia.Media.IImmutableBrush,Avalonia.Media.Immutable.ImmutablePen,Avalonia.Rect,System.Double,System.Double,Avalonia.Media.BoxShadows)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the rectangle, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the rectangle, or <c>null</c> for no stroke.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="radiusX">The radius in the X dimension of the rounded corners.
                This value will be clamped to the range of 0 to Width/2
            </param>
            <param name="radiusY">The radius in the Y dimension of the rounded corners.
                This value will be clamped to the range of 0 to Height/2
            </param>
            <param name="boxShadows">Box shadow effect parameters</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawRectangle(Avalonia.Media.Immutable.ImmutablePen,Avalonia.Rect,System.Single)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawEllipse(Avalonia.Media.IImmutableBrush,Avalonia.Media.Immutable.ImmutablePen,Avalonia.Point,System.Double,System.Double)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the ellipse, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the ellipse, or <c>null</c> for no stroke.</param>
            <param name="center">The location of the center of the ellipse.</param>
            <param name="radiusX">The horizontal radius of the ellipse.</param>
            <param name="radiusY">The vertical radius of the ellipse.</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.DrawGlyphRun(Avalonia.Media.IImmutableBrush,Avalonia.Media.IImmutableGlyphRunReference)">
            <summary>
            Draws a glyph run.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="glyphRun">The glyph run.</param>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.FillRectangle(Avalonia.Media.IImmutableBrush,Avalonia.Rect,System.Single)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushClip(Avalonia.Rect)">
            <summary>
            Pushes a clip rectangle.
            </summary>
            <param name="clip">The clip rectangle.</param>
            <returns>A disposable used to undo the clip rectangle.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushOpacity(System.Double,Avalonia.Rect)">
            <summary>
            Pushes an opacity value.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="bounds">The bounds.</param>
            <returns>A disposable used to undo the opacity.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushOpacityMask(Avalonia.Media.IImmutableBrush,Avalonia.Rect)">
            <summary>
            Pushes an opacity mask.
            </summary>
            <param name="mask">The opacity mask.</param>
            <param name="bounds">
            The size of the brush's target area. TODO: Are we sure this is needed?
            </param>
            <returns>A disposable to undo the opacity mask.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushPostTransform(Avalonia.Matrix)">
            <summary>
            Pushes a matrix post-transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushPreTransform(Avalonia.Matrix)">
            <summary>
            Pushes a matrix pre-transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushSetTransform(Avalonia.Matrix)">
            <summary>
            Sets the current matrix transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.PushTransformContainer">
            <summary>
            Pushes a new transform context.
            </summary>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.ImmediateDrawingContext.Dispose">
            <summary>
            Disposes of any resources held by the <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableConicGradientBrush">
            <summary>
            A brush that draws with a sweep gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableConicGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.Immutable.ImmutableTransform,System.Nullable{Avalonia.RelativePoint},Avalonia.Media.GradientSpreadMethod,System.Nullable{Avalonia.RelativePoint},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableConicGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
            <param name="transformOrigin">The transform origin of the brush</param>
            <param name="spreadMethod">The spread method.</param>
            <param name="center">The center point for the gradient.</param>
            <param name="angle">The starting angle for the gradient.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableConicGradientBrush.#ctor(Avalonia.Media.ConicGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableConicGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableConicGradientBrush.Center">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableConicGradientBrush.Angle">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableDashStyle">
            <summary>
            Represents the sequence of dashes and gaps that will be applied by an
            <see cref="T:Avalonia.Media.Immutable.ImmutablePen"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableDashStyle"/> class.
            </summary>
            <param name="dashes">The dashes collection.</param>
            <param name="offset">The dash sequence offset.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableDashStyle.Dashes">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableDashStyle.Offset">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.Equals(Avalonia.Media.IDashStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableGradientBrush">
            <summary>
            A brush that draws with a gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.Immutable.ImmutableTransform,System.Nullable{Avalonia.RelativePoint},Avalonia.Media.GradientSpreadMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
            <param name="transformOrigin">The transform origin of the brush</param>
            <param name="spreadMethod">The spread method.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableGradientBrush.#ctor(Avalonia.Media.GradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.GradientStops">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.Opacity">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.Transform">
            <summary>
            Gets the transform of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.TransformOrigin">
            <summary>
            Gets the transform origin of the brush
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.SpreadMethod">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableGradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientStop.Offset">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientStop.Color">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableImageBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.Media.Imaging.IBitmap"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableImageBrush.#ctor(Avalonia.Media.Imaging.Bitmap,Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,System.Nullable{Avalonia.RelativeRect},System.Double,Avalonia.Media.Immutable.ImmutableTransform,Avalonia.RelativePoint,System.Nullable{Avalonia.RelativeRect},Avalonia.Media.Stretch,Avalonia.Media.TileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableImageBrush"/> class.
            </summary>
            <param name="source">The image to draw.</param>
            <param name="alignmentX">The horizontal alignment of a tile in the destination.</param>
            <param name="alignmentY">The vertical alignment of a tile in the destination.</param>
            <param name="destinationRect">The rectangle on the destination in which to paint a tile.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
            <param name="transformOrigin">The transform origin of the brush</param>
            <param name="sourceRect">The rectangle of the source image that will be displayed.</param>
            <param name="stretch">
            How the source rectangle will be stretched to fill the destination rect.
            </param>
            <param name="tileMode">The tile mode.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableImageBrush.#ctor(Avalonia.Media.IImageBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableImageBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableImageBrush.Source">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableLinearGradientBrush">
            <summary>
            A brush that draws with a linear gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.Immutable.ImmutableTransform,System.Nullable{Avalonia.RelativePoint},Avalonia.Media.GradientSpreadMethod,System.Nullable{Avalonia.RelativePoint},System.Nullable{Avalonia.RelativePoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableLinearGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
            <param name="transformOrigin">The transform origin of the brush</param>
            <param name="spreadMethod">The spread method.</param>
            <param name="startPoint">The start point for the gradient.</param>
            <param name="endPoint">The end point for the gradient.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.#ctor(Avalonia.Media.LinearGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableLinearGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.StartPoint">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.EndPoint">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutablePen">
            <summary>
            Describes how a stroke is drawn.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.#ctor(System.UInt32,System.Double,Avalonia.Media.Immutable.ImmutableDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="color">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">Specifies the type of graphic shape to use on both ends of a line.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.#ctor(Avalonia.Media.IImmutableBrush,System.Double,Avalonia.Media.Immutable.ImmutableDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="brush">The brush used to draw.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">The line cap.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.Brush">
            <summary>
            Gets the brush used to draw the stroke.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.Thickness">
            <summary>
            Gets the stroke thickness.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.DashStyle">
            <summary>
            Specifies the style of dashed lines drawn with a <see cref="T:Avalonia.Media.Pen"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.LineCap">
            <summary>
            Specifies the type of graphic shape to use on both ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.LineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in a <see cref="T:Avalonia.Media.PathFigure"/>
            (subpaths) contained in a <see cref="T:Avalonia.Media.PathGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.MiterLimit">
            <summary>
            The limit on the ratio of the miter length to half this pen's Thickness.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.Equals(Avalonia.Media.IPen)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableRadialGradientBrush">
            <summary>
            A brush that draws with a radial gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.Immutable.ImmutableTransform,System.Nullable{Avalonia.RelativePoint},Avalonia.Media.GradientSpreadMethod,System.Nullable{Avalonia.RelativePoint},System.Nullable{Avalonia.RelativePoint},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableRadialGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
            <param name="transformOrigin">The transform origin of the brush</param>
            <param name="spreadMethod">The spread method.</param>
            <param name="center">The start point for the gradient.</param>
            <param name="gradientOrigin">
            The location of the two-dimensional focal point that defines the beginning of the gradient.
            </param>
            <param name="radius">
            The horizontal and vertical radius of the outermost circle of the radial gradient.
            </param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.#ctor(Avalonia.Media.RadialGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableRadialGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.Center">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.GradientOrigin">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.Radius">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.#ctor(Avalonia.Media.Color,System.Double,Avalonia.Media.Immutable.ImmutableTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.#ctor(Avalonia.Media.ISolidColorBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableSolidColorBrush.Color">
            <summary>
            Gets the color of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableSolidColorBrush.Opacity">
            <summary>
            Gets the opacity of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableSolidColorBrush.Transform">
            <summary>
            Gets the transform of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableSolidColorBrush.TransformOrigin">
            <summary>
            Gets the transform origin of the brush
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.ToString">
            <summary>
            Returns a string representation of the brush.
            </summary>
            <returns>A string representation of the brush.</returns>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableTextDecoration">
            <summary>
            An immutable representation of a <see cref="T:Avalonia.Media.TextDecoration"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.Pen">
            <summary>
            Gets or sets the pen.
            </summary>
            <value>
            The pen.
            </value>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenThicknessUnit">
            <summary>
            Gets the units in which the Thickness of the text decoration's <see cref="P:Avalonia.Media.Immutable.ImmutableTextDecoration.Pen"/> is expressed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenOffset">
            <summary>
            Gets or sets the pen offset.
            </summary>
            <value>
            The pen offset.
            </value>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenOffsetUnit">
            <summary>
            Gets the units in which the <see cref="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenOffset"/> value is expressed.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableTileBrush">
            <summary>
            A brush which displays a repeating image.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableTileBrush.#ctor(Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,Avalonia.RelativeRect,System.Double,Avalonia.Media.Immutable.ImmutableTransform,Avalonia.RelativePoint,Avalonia.RelativeRect,Avalonia.Media.Stretch,Avalonia.Media.TileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
            <param name="alignmentX">The horizontal alignment of a tile in the destination.</param>
            <param name="alignmentY">The vertical alignment of a tile in the destination.</param>
            <param name="destinationRect">The rectangle on the destination in which to paint a tile.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="transform">The transform of the brush.</param>
            <param name="transformOrigin">The transform origin of the brush</param>
            <param name="sourceRect">The rectangle of the source image that will be displayed.</param>
            <param name="stretch">
            How the source rectangle will be stretched to fill the destination rect.
            </param>
            <param name="tileMode">The tile mode.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableTileBrush.#ctor(Avalonia.Media.ITileBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.AlignmentX">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.AlignmentY">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.DestinationRect">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.Opacity">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.Transform">
            <summary>
            Gets the transform of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.TransformOrigin">
            <summary>
            Gets the transform origin of the brush
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.SourceRect">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.Stretch">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.TileMode">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableTransform">
            <summary>
            Represents a transform on an <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableTransform.#ctor(Avalonia.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableTransform"/> class.
            </summary>
            <param name="matrix">The transform matrix.</param>
        </member>
        <member name="T:Avalonia.Media.IMutableBrush">
            <summary>
            Represents a mutable brush which can return an immutable clone of itself.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IMutableBrush.ToImmutable">
            <summary>
            Creates an immutable clone of the brush.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="T:Avalonia.Media.IMutableExperimentalAcrylicMaterial">
            <summary>
            Represents a mutable brush which can return an immutable clone of itself.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IMutableExperimentalAcrylicMaterial.ToImmutable">
            <summary>
            Creates an immutable clone of the brush.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="E:Avalonia.Media.IMutableTransform.Changed">
            <summary>
            Raised when the transform changes.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IPen">
            <summary>
            Describes how a stroke is drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.Brush">
            <summary>
            Gets the brush used to draw the stroke.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.DashStyle">
            <summary>
            Gets the style of dashed lines drawn with a <see cref="T:Avalonia.Media.Pen"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.LineCap">
            <summary>
            Gets the type of shape to use on both ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.LineJoin">
            <summary>
            Gets a value describing how to join consecutive line or curve segments in a 
            <see cref="T:Avalonia.Media.PathFigure"/> contained in a <see cref="T:Avalonia.Media.PathGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.MiterLimit">
            <summary>
            Gets the limit of the thickness of the join on a mitered corner.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.Thickness">
            <summary>
            Gets the stroke thickness.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IRadialGradientBrush">
            <summary>
            Paints an area with a radial gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IRadialGradientBrush.Center">
            <summary>
            Gets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IRadialGradientBrush.GradientOrigin">
            <summary>
            Gets the location of the two-dimensional focal point that defines the beginning of the
            gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IRadialGradientBrush.Radius">
            <summary>
            Gets the horizontal and vertical radius of the outermost circle of the radial gradient.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ISolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ISolidColorBrush.Color">
            <summary>
            Gets the color of the brush.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IImmutableSolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ITileBrush">
            <summary>
            A brush which displays a repeating image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.AlignmentX">
            <summary>
            Gets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.AlignmentY">
            <summary>
            Gets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.DestinationRect">
            <summary>
            Gets the rectangle on the destination in which to paint a tile.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.SourceRect">
            <summary>
            Gets the rectangle of the source image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.Stretch">
            <summary>
            Gets a value indicating how the source rectangle will be stretched to fill the
            destination rect.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.TileMode">
            <summary>
            Gets the brush's tile mode.
            </summary>
        </member>
        <member name="T:Avalonia.Media.LinearGradientBrush">
            <summary>
            A brush that draws with a linear gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LinearGradientBrush.StartPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LinearGradientBrush.StartPoint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LinearGradientBrush.EndPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LinearGradientBrush.EndPoint"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LinearGradientBrush.StartPoint">
            <summary>
            Gets or sets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LinearGradientBrush.EndPoint">
            <summary>
            Gets or sets the end point for the gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LinearGradientBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.LineGeometry">
            <summary>
            Represents the geometry of a line.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LineGeometry.StartPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LineGeometry.StartPoint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LineGeometry.EndPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LineGeometry.EndPoint"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.LineGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.#ctor(Avalonia.Point,Avalonia.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.LineGeometry"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="P:Avalonia.Media.LineGeometry.StartPoint">
            <summary>
            Gets or sets the start point of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LineGeometry.EndPoint">
            <summary>
            Gets or sets the end point of the line.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Media.LineSegment.PointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LineSegment.Point"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LineSegment.Point">
            <summary>
            Gets or sets the point.
            </summary>
            <value>
            The point.
            </value>
        </member>
        <member name="M:Avalonia.Media.MaterialExtensions.ToImmutable(Avalonia.Media.IExperimentalAcrylicMaterial)">
            <summary>
            Converts a brush to an immutable brush.
            </summary>
            <param name="material">The brush.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.IMutableBrush.ToImmutable"/> if the brush is mutable,
            otherwise <paramref name="material"/>.
            </returns>
        </member>
        <member name="T:Avalonia.Media.MatrixTransform">
            <summary>
            Transforms an <see cref="T:Avalonia.Visual"/> according to a <see cref="P:Avalonia.Media.MatrixTransform.Matrix"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.MatrixTransform.MatrixProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.MatrixTransform.Matrix"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MatrixTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.MatrixTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MatrixTransform.#ctor(Avalonia.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.MatrixTransform"/> class.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="P:Avalonia.Media.MatrixTransform.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Media.MatrixTransform.Value">
            <summary>
            Gets the matrix.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.CommitCompositor(Avalonia.Rendering.Composition.Compositor)">
            <summary>
            Actually sends the current batch to the compositor and does the required housekeeping
            This is the only place that should be allowed to call Commit
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.CompositionBatchFinished(Avalonia.Rendering.Composition.Compositor,Avalonia.Rendering.Composition.Transport.Batch)">
            <summary>
            Handles batch completion, required to re-schedule a render pass if one was skipped due to compositor throttling
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.CommitCompositorsWithThrottling">
            <summary>
            Triggers a composition commit if any batches are waiting to be sent,
            handles throttling
            </summary>
            <returns>true if there are pending commits in-flight and there will be a "all-done" callback later</returns>
        </member>
        <member name="M:Avalonia.Media.MediaContext.SyncCommit(Avalonia.Rendering.Composition.Compositor,System.Boolean)">
            <summary>
            Executes a synchronous commit when we need to wait for composition jobs to be done
            Is used in resize and TopLevel destruction scenarios
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.ImmediateRenderRequested(Avalonia.Rendering.Composition.CompositionTarget)">
            <summary>
            This method handles synchronous rendering of a surface when requested by the OS (typically during the resize)
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.SyncDisposeCompositionTarget(Avalonia.Rendering.Composition.CompositionTarget)">
            <summary>
            This method handles synchronous destruction of the composition target, so we are guaranteed
            to release all resources when a TopLevel is being destroyed 
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.Avalonia#Rendering#Composition#ICompositorScheduler#CommitRequested(Avalonia.Rendering.Composition.Compositor)">
            <summary>
            This method schedules a render when something has called RequestCommitAsync
            This can be triggered by user code outside of our normal layout and rendering
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.ScheduleRender(System.Boolean)">
            <summary>
            Schedules the next render operation, handles render throttling for input processing
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.InputMarkerHandler">
            <summary>
            This handles the _inputMarkerOp message.  We're using
            _inputMarkerOp to determine if input priority dispatcher ops
            have been processes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.FireInvokeOnRenderCallbacks">
            <summary>
            Calls all _invokeOnRenderCallbacks until no more are added
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaContext.BeginInvokeOnRender(System.Action)">
            <summary>
            Executes the <paramref name="callback">callback</paramref> in the next iteration of the current UI-thread
            render loop / layout pass that.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Avalonia.Media.MediaExtensions">
            <summary>
            Provides extension methods for Avalonia media.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaExtensions.CalculateScaling(Avalonia.Media.Stretch,Avalonia.Size,Avalonia.Size,Avalonia.Media.StretchDirection)">
            <summary>
            Calculates scaling based on a <see cref="T:Avalonia.Media.Stretch"/> value.
            </summary>
            <param name="stretch">The stretch mode.</param>
            <param name="destinationSize">The size of the destination viewport.</param>
            <param name="sourceSize">The size of the source.</param>
            <param name="stretchDirection">The stretch direction.</param>
            <returns>A vector with the X and Y scaling factors.</returns>
        </member>
        <member name="M:Avalonia.Media.MediaExtensions.CalculateSize(Avalonia.Media.Stretch,Avalonia.Size,Avalonia.Size,Avalonia.Media.StretchDirection)">
            <summary>
            Calculates a scaled size based on a <see cref="T:Avalonia.Media.Stretch"/> value.
            </summary>
            <param name="stretch">The stretch mode.</param>
            <param name="destinationSize">The size of the destination viewport.</param>
            <param name="sourceSize">The size of the source.</param>
            <param name="stretchDirection">The stretch direction.</param>
            <returns>The size of the stretched source.</returns>
        </member>
        <member name="F:Avalonia.Media.PathFigure.IsClosedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.IsClosed"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathFigure.IsFilledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.IsFilled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathFigure.SegmentsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.Segments"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathFigure.StartPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.StartPoint"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PathFigure"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.PathFigure.IsClosed">
            <summary>
            Gets or sets a value indicating whether this instance is closed.
            </summary>
            <value>
              <c>true</c> if this instance is closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathFigure.IsFilled">
            <summary>
            Gets or sets a value indicating whether this instance is filled.
            </summary>
            <value>
              <c>true</c> if this instance is filled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathFigure.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathFigure.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="F:Avalonia.Media.PathGeometry.FiguresProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathGeometry.Figures"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathGeometry.FillRuleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathGeometry.FillRule"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PathGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathGeometry.Parse(System.String)">
            <summary>
            Parses the specified path data to a <see cref="T:Avalonia.Media.PathGeometry"/>.
            </summary>
            <param name="pathData">The s.</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Media.PathGeometry.Figures">
            <summary>
            Gets or sets the figures.
            </summary>
            <value>
            The figures.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathGeometry.FillRule">
            <summary>
            Gets or sets the fill rule.
            </summary>
            <value>
            The fill rule.
            </value>
        </member>
        <member name="M:Avalonia.Media.PathFigures.Parse(System.String)">
            <summary>
            Parses the specified path data to a <see cref="T:Avalonia.Media.PathFigures"/>.
            </summary>
            <param name="pathData">The s.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.PathMarkupParser">
            <summary>
            Parses a path markup string.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathMarkupParser.#ctor(Avalonia.Platform.IGeometryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PathMarkupParser"/> class.
            </summary>
            <param name="geometryContext">The geometry context.</param>
            <exception cref="T:System.ArgumentNullException">geometryContext</exception>
        </member>
        <member name="M:Avalonia.Media.PathMarkupParser.Parse(System.String)">
            <summary>
            Parses the specified path data and writes the result to the geometryContext of this instance.
            </summary>
            <param name="pathData">The path data.</param>
        </member>
        <member name="T:Avalonia.Media.Pen">
            <summary>
            Describes how a stroke is drawn.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.BrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.Brush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.ThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.Thickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.DashStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.DashStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.LineCapProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.LineCap"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.LineJoinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.LineJoin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.MiterLimitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.MiterLimit"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Pen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Pen.#ctor(System.UInt32,System.Double,Avalonia.Media.IDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="color">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">Specifies the type of graphic shape to use on both ends of a line.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="M:Avalonia.Media.Pen.#ctor(Avalonia.Media.IBrush,System.Double,Avalonia.Media.IDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="brush">The brush used to draw.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">The line cap.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="P:Avalonia.Media.Pen.Brush">
            <summary>
            Gets or sets the brush used to draw the stroke.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.Thickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.DashStyle">
            <summary>
            Gets or sets the style of dashed lines drawn with a <see cref="T:Avalonia.Media.Pen"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.LineCap">
            <summary>
            Gets or sets the type of shape to use on both ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.LineJoin">
            <summary>
            Gets or sets the join style for the ends of two consecutive lines drawn with this
            <see cref="T:Avalonia.Media.Pen"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Pen.ToImmutable">
            <summary>
            Creates an immutable clone of the brush.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="T:Avalonia.Media.PolylineGeometry">
            <summary>
            Represents the geometry of an polyline or polygon.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PolylineGeometry.PointsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PolylineGeometry.Points"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PolylineGeometry.IsFilledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PolylineGeometry.IsFilled"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PolylineGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolylineGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PolylineGeometry.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Point},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolylineGeometry"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.PolylineGeometry.Points">
            <summary>
            Gets or sets the figures.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="M:Avalonia.Media.PolylineGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.PolyLineSegment">
            <summary>
            Represents a set of line segments defined by a points collection with each Point specifying the end point of a line segment.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PolyLineSegment.PointsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PolyLineSegment.Points"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.PolyLineSegment.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="M:Avalonia.Media.PolyLineSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolyLineSegment"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PolyLineSegment.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolyLineSegment"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="T:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc">
            <summary>
            This class represents an elliptical arc on a 2D plane.
            
            This class is adapted for use with WPF StreamGeometryContext, and needs to be created explicitly
            for each particular arc.
            
            Some helpers
            
            It can handle ellipses which are not aligned with the x and y reference axes of the plane,
            as well as their parts.
            
            Another improvement is that this class can handle degenerated cases like for example very 
            flat ellipses(semi-minor axis much smaller than semi-major axis) and drawing of very small 
            parts of such ellipses at very high magnification scales.This imply monitoring the drawing 
            approximation error for extremely small values.Such cases occur for example while drawing 
            orbits of comets near the perihelion.
            
            When the arc does not cover the complete ellipse, the lines joining the center of the 
            ellipse to the endpoints can optionally be included or not in the outline, hence allowing 
            to use it for pie-charts rendering. If these lines are not included, the curve is not 
            naturally closed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs2Low">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0 ≤ b/a ≤ 0.25
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs2High">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Safety2">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs3Low">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs3High">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Safety3">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Cx">
            <summary>
            Abscissa of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Cy">
            <summary>
            Ordinate of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.A">
            <summary>
            Semi-major axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.B">
            <summary>
            Semi-minor axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Theta">
            <summary>
            Orientation of the major axis with respect to the x axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._cosTheta">
            <summary>
            Pre-calculated cosine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._sinTheta">
            <summary>
            Pre-calculated sine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Eta1">
            <summary>
            Start angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Eta2">
            <summary>
            End angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.X1">
            <summary>
            Abscissa of the start point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Y1">
            <summary>
            Ordinate of the start point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.X2">
            <summary>
            Abscissa of the end point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Y2">
            <summary>
            Ordinate of the end point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.FirstFocusX">
            <summary>
            Abscissa of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.FirstFocusY">
            <summary>
            Ordinate of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SecondFocusX">
            <summary>
            Abscissa of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SecondFocusY">
            <summary>
            Ordinate of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._xLeft">
            <summary>
            Abscissa of the leftmost point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._yUp">
            <summary>
            Ordinate of the highest point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._width">
            <summary>
            Horizontal width of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._height">
            <summary>
            Vertical height of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.IsPieSlice">
            <summary>
            Indicator for center to endpoints line inclusion
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._maxDegree">
            <summary>
            Maximal degree for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._defaultFlatness">
            <summary>
            Default flatness for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.F">
            <summary>
            Indicator for semi-major axis significance (compared to semi-minor one).
            Computed by dividing the (A-B) difference by the value of A.
            This indicator is used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.E2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.G">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.G2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor">
            <summary>
            Builds an elliptical arc composed of the full unit circle around (0,0)
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SetMaxDegree(System.Int32)">
            <summary>
            Sets the maximal degree allowed for Bezier curve approximation.
            </summary>
            <param name="maxDegree">Maximal allowed degree (must be between 1 and 3)</param>
            <exception cref="T:System.ArgumentException">Thrown if maxDegree is not between 1 and 3</exception>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SetDefaultFlatness(System.Double)">
            <summary>
            Sets the default flatness for Bezier curve approximation
            </summary>
            <param name="defaultFlatness">default flatness (must be greater than 1e-10)</param>
            <exception cref="T:System.ArgumentException">Thrown if defaultFlatness is lower than 1e-10</exception>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeFocii">
            <summary>
            Computes the locations of the focii
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeEndPoints">
            <summary>
            Computes the locations of the endpoints
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeBounds">
            <summary>
            Computes the bounding box
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeDerivedFlatnessParameters">
            <summary>
            Computes the flatness parameters used in intersection tests
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.RationalFunction(System.Double,System.Double[])">
            <summary>
            Computes the value of a rational function.
            This method handles rational functions where the numerator is quadratic
            and the denominator is linear
            </summary>
            <param name="x">Abscissa for which the value should be computed</param>
            <param name="c">Coefficients array of the rational function</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.EstimateError(System.Int32,System.Double,System.Double)">
            <summary>
            Estimate the approximation error for a sub-arc of the instance
            </summary>
            <param name="degree">Degree of the Bezier curve to use (1, 2 or 3)</param>
            <param name="etaA">Start angle of the sub-arc</param>
            <param name="etaB">End angle of the sub-arc</param>
            <returns>Upper bound of the approximation error between the Bezier curve and the real ellipse</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.PointAt(System.Double)">
            <summary>
            Get the elliptical arc point for a given angular parameter
            </summary>
            <param name="lambda">Angular parameter for which point is desired</param> 
            <returns>The desired elliptical arc point location</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(System.Double,System.Double)">
            <summary>
            Tests if the specified coordinates are inside the closed shape formed by this arc.
            If this is not a pie, then a shape derived by adding a closing chord is considered.
            </summary>
            <param name="x">Abscissa of the test point</param>
            <param name="y">Ordinate of the test point</param>
            <returns>True if the specified coordinates are inside the closed shape of this arc</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.IntersectArc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the arc
            </summary>
            <param name="xA">abscissa of the first point of the line segment</param>
            <param name="yA">ordinate of the first point of the line segment</param>
            <param name="xB">abscissa of the second point of the line segment</param>
            <param name="yB">ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Intersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if two line segments intersect
            </summary>
            <param name="x1">Abscissa of the first point of the first line segment</param>
            <param name="y1">Ordinate of the first point of the first line segment</param>
            <param name="x2">Abscissa of the second point of the first line segment</param>
            <param name="y2">Ordinate of the second point of the first line segment</param>
            <param name="xA">Abscissa of the first point of the second line segment</param>
            <param name="yA">Ordinate of the first point of the second line segment</param>
            <param name="xB">Abscissa of the second point of the second line segment</param>
            <param name="yB">Ordinate of the second point of the second line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.IntersectOutline(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the outline
            </summary>
            <param name="xA">Abscissa of the first point of the line segment</param>
            <param name="yA">Ordinate of the first point of the line segment</param>
            <param name="xB">Abscissa of the second point of the line segment</param>
            <param name="yB">Ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="x">Abscissa of the upper-left corner of the test rectangle</param>
            <param name="y">Ordinate of the upper-left corner of the test rectangle</param>
            <param name="w">Width of the test rectangle</param>
            <param name="h">Height of the test rectangle</param>
            <returns>true if the interior of a closed path derived from this arc entirely contains the specified rectangular area; false otherwise</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(Avalonia.Point)">
            <summary>
            Tests if a specified Point2D is inside the boundary of a closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="p">Test point</param>
            <returns>true if the specified point is inside a closed path derived from this arc</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(Avalonia.Rect)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="r">Test rectangle</param>
            <returns>True if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D; false otherwise</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.GetBounds">
            <summary>
            Returns an integer Rectangle that completely encloses the closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary> 
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.BuildArc(Avalonia.Media.StreamGeometryContext)">
            <summary>
            Builds the arc outline using given StreamGeometryContext and default (max) Bezier curve degree and acceptable error of half a pixel (0.5)
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.BuildArc(Avalonia.Media.StreamGeometryContext,System.Int32,System.Double,System.Boolean)">
            <summary>
            Builds the arc outline using given StreamGeometryContext
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
            <param name="degree">degree of the Bezier curve to use</param>
            <param name="threshold">acceptable error</param>
            <param name="openNewFigure">if true, a new figure will be started in the specified StreamGeometryContext</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.GetAngle(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Calculates the angle between two vectors
            </summary>
            <param name="v1">Vector V1</param>
            <param name="v2">Vector V2</param>
            <returns>The signed angle between v2 and v1</returns>
        </member>
        <member name="T:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SimpleMatrix">
            <summary>
            Simple matrix used for rotate transforms. 
            At some point I did not trust the WPF Matrix struct, and wrote my own simple one -_-
            This is supposed to be replaced with proper WPF Matrices everywhere
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.BuildArc(Avalonia.Media.StreamGeometryContext,Avalonia.Point,Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,System.Boolean)">
            <summary>
            ArcTo Helper for StreamGeometryContext
            </summary>
            <param name="path">Target path</param>
            <param name="p1">Start point</param>
            <param name="p2">End point</param>
            <param name="size">Ellipse radii</param>
            <param name="theta">Ellipse theta (angle measured from the abscissa)</param>
            <param name="isLargeArc">Large Arc Indicator</param>
            <param name="clockwise">Clockwise direction flag</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Intersects(Avalonia.Rect)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
        <member name="F:Avalonia.Media.QuadraticBezierSegment.Point1Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.QuadraticBezierSegment.Point1"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.QuadraticBezierSegment.Point2Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.QuadraticBezierSegment.Point2"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.QuadraticBezierSegment.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>
            The point1.
            </value>
        </member>
        <member name="P:Avalonia.Media.QuadraticBezierSegment.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>
            The point2.
            </value>
        </member>
        <member name="T:Avalonia.Media.RadialGradientBrush">
            <summary>
            Paints an area with a radial gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RadialGradientBrush.CenterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RadialGradientBrush.Center"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RadialGradientBrush.GradientOriginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RadialGradientBrush.GradientOrigin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RadialGradientBrush.RadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RadialGradientBrush.Radius"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RadialGradientBrush.Center">
            <summary>
            Gets or sets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RadialGradientBrush.GradientOrigin">
            <summary>
            Gets or sets the location of the two-dimensional focal point that defines the beginning
            of the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RadialGradientBrush.Radius">
            <summary>
            Gets or sets the horizontal and vertical radius of the outermost circle of the radial
            gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RadialGradientBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.RectangleGeometry">
            <summary>
            Represents the geometry of a rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RectangleGeometry.RectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RectangleGeometry.Rect"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RectangleGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RectangleGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RectangleGeometry.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RectangleGeometry"/> class.
            </summary>
            <param name="rect">The rectangle bounds.</param>
        </member>
        <member name="P:Avalonia.Media.RectangleGeometry.Rect">
            <summary>
            Gets or sets the bounds of the rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RectangleGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.GetBitmapInterpolationMode(Avalonia.Visual)">
            <summary>
            Gets the value of the BitmapInterpolationMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.SetBitmapInterpolationMode(Avalonia.Visual,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Sets the value of the BitmapInterpolationMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.GetBitmapBlendingMode(Avalonia.Visual)">
            <summary>
            Gets the value of the BitmapBlendingMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.SetBitmapBlendingMode(Avalonia.Visual,Avalonia.Media.Imaging.BitmapBlendingMode)">
            <summary>
            Sets the value of the BitmapBlendingMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.GetEdgeMode(Avalonia.Visual)">
            <summary>
            Gets the value of the EdgeMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.SetEdgeMode(Avalonia.Visual,Avalonia.Media.EdgeMode)">
            <summary>
            Sets the value of the EdgeMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.GetTextRenderingMode(Avalonia.Visual)">
            <summary>
            Gets the value of the TextRenderingMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.SetTextRenderingMode(Avalonia.Visual,Avalonia.Media.TextRenderingMode)">
            <summary>
            Sets the value of the TextRenderingMode attached property for a visual.
            </summary>
            <param name="visual">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="T:Avalonia.Media.RotateTransform">
            <summary>
            Rotates an <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RotateTransform.AngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RotateTransform.Angle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RotateTransform.CenterXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RotateTransform.CenterX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RotateTransform.CenterYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RotateTransform.CenterY"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RotateTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RotateTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RotateTransform.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RotateTransform"/> class.
            </summary>
            <param name="angle">The angle, in degrees.</param>
        </member>
        <member name="M:Avalonia.Media.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RotateTransform"/> class.
            </summary>
            <param name="angle">The angle, in degrees.</param>
            <param name="centerX">The x-coordinate of the center point for the rotation.</param>
            <param name="centerY">The y-coordinate of the center point for the rotation.</param>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.Angle">
            <summary>
            Gets or sets the angle of rotation, in degrees.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.CenterX">
            <summary>
            Gets or sets the x-coordinate of the rotation center point. The default is 0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.CenterY">
            <summary>
            Gets or sets the y-coordinate of the rotation center point. The default is 0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ScaleTransform">
            <summary>
            Scale an <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ScaleTransform.ScaleXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ScaleTransform.ScaleX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ScaleTransform.ScaleYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ScaleTransform.ScaleY"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ScaleTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ScaleTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ScaleTransform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ScaleTransform"/> class.
            </summary>
            <param name="scaleX">ScaleX</param>
            <param name="scaleY">ScaleY</param>
        </member>
        <member name="P:Avalonia.Media.ScaleTransform.ScaleX">
            <summary>
            Gets or sets the ScaleX property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ScaleTransform.ScaleY">
            <summary>
            Gets or sets the ScaleY property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ScaleTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.SkewTransform">
            <summary>
            Skews an <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SkewTransform.AngleXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.SkewTransform.AngleX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SkewTransform.AngleYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.SkewTransform.AngleY"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SkewTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SkewTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SkewTransform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SkewTransform"/> class.
            </summary>
            <param name="angleX">The skew angle of X-axis, in degrees.</param>
            <param name="angleY">The skew angle of Y-axis, in degrees.</param>
        </member>
        <member name="P:Avalonia.Media.SkewTransform.AngleX">
            <summary>
            Gets or sets the AngleX property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.SkewTransform.AngleY">
            <summary>
            Gets or sets the AngleY property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.SkewTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.SolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SolidColorBrush.ColorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.SolidColorBrush.Color"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SolidColorBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.#ctor(Avalonia.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
        </member>
        <member name="P:Avalonia.Media.SolidColorBrush.Color">
            <summary>
            Gets or sets the color of the brush.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.Parse(System.String)">
            <summary>
            Parses a brush string.
            </summary>
            <param name="s">The brush string.</param>
            <returns>The <see cref="P:Avalonia.Media.SolidColorBrush.Color"/>.</returns>
            <remarks>
            Whereas <see cref="M:Avalonia.Media.Brush.Parse(System.String)"/> may return an immutable solid color brush,
            this method always returns a mutable <see cref="T:Avalonia.Media.SolidColorBrush"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.ToString">
            <summary>
            Returns a string representation of the brush.
            </summary>
            <returns>A string representation of the brush.</returns>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.StreamGeometry">
            <summary>
            Represents the geometry of an arbitrarily complex shape.
            </summary>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.StreamGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.#ctor(Avalonia.Platform.IStreamGeometryImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.StreamGeometry"/> class.
            </summary>
            <param name="impl">The platform-specific implementation.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.StreamGeometry"/> from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>A <see cref="T:Avalonia.Media.StreamGeometry"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.Open">
            <summary>
            Opens the geometry to start defining it.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Media.StreamGeometryContext"/> which can be used to define the geometry.
            </returns>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.StreamGeometryContext">
            <summary>
            Describes a geometry using drawing commands.
            </summary>
            <remarks>
            This class is used to define the geometry of a <see cref="T:Avalonia.Media.StreamGeometry"/>. An instance
            of <see cref="T:Avalonia.Media.StreamGeometryContext"/> is obtained by calling
            <see cref="M:Avalonia.Media.StreamGeometry.Open"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.#ctor(Avalonia.Platform.IStreamGeometryContextImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.StreamGeometryContext"/> class.
            </summary>
            <param name="impl">The platform-specific implementation.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.SetFillRule(Avalonia.Media.FillRule)">
            <summary>
            Sets path's winding rule (default is EvenOdd). You should call this method before any calls to BeginFigure. If you wonder why, ask Direct2D guys about their design decisions.
            </summary>
            <param name="fillRule"></param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.ArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <summary>
            Draws an arc to the specified point.
            </summary>
            <param name="point">The destination point.</param>
            <param name="size">The radii of an oval whose perimeter is used to draw the angle.</param>
            <param name="rotationAngle">The rotation angle (in radians) of the oval that specifies the curve.</param>
            <param name="isLargeArc">true to draw the arc greater than 180 degrees; otherwise, false.</param>
            <param name="sweepDirection">
            A value that indicates whether the arc is drawn in the Clockwise or Counterclockwise direction.
            </param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.PreciseArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <summary>
            Draws an arc to the specified point using polylines, quadratic or cubic Bezier curves
            Significantly more precise when drawing elliptic arcs with extreme width:height ratios.        
            </summary>         
            <param name="point">The destination point.</param>
            <param name="size">The radii of an oval whose perimeter is used to draw the angle.</param>
            <param name="rotationAngle">The rotation angle (in radians) of the oval that specifies the curve.</param>
            <param name="isLargeArc">true to draw the arc greater than 180 degrees; otherwise, false.</param>
            <param name="sweepDirection">
            A value that indicates whether the arc is drawn in the Clockwise or Counterclockwise direction.
            </param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)">
            <summary>
            Begins a new figure.
            </summary>
            <param name="startPoint">The starting point for the figure.</param>
            <param name="isFilled">Whether the figure is filled.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.CubicBezierTo(Avalonia.Point,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a Bezier curve to the specified point.
            </summary>
            <param name="point1">The first control point used to specify the shape of the curve.</param>
            <param name="point2">The second control point used to specify the shape of the curve.</param>
            <param name="point3">The destination point for the end of the curve.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.QuadraticBezierTo(Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a quadratic Bezier curve to the specified point
            </summary>
            <param name="control">The control point used to specify the shape of the curve.</param>
            <param name="endPoint">The destination point for the end of the curve.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.LineTo(Avalonia.Point)">
            <summary>
            Draws a line to the specified point.
            </summary>
            <param name="point">The destination point.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.EndFigure(System.Boolean)">
            <summary>
            Ends the figure started by <see cref="M:Avalonia.Media.StreamGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)"/>.
            </summary>
            <param name="isClosed">Whether the figure is closed.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.Dispose">
            <summary>
            Finishes the drawing session.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Stretch">
            <summary>
            Describes how content is resized to fill its allocated space.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.None">
            <summary>
            The content preserves its original size.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.Fill">
            <summary>
            The content is resized to fill the destination dimensions. The aspect ratio is not
            preserved.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while preserving its
            native aspect ratio.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.UniformToFill">
            <summary>
            The content is resized to completely fill the destination rectangle while preserving
            its native aspect ratio. A portion of the content may not be visible if the aspect
            ratio of the content does not match the aspect ratio of the allocated space.
            </summary>
        </member>
        <member name="T:Avalonia.Media.StretchDirection">
            <summary>
            Describes the type of scaling that can be used when scaling content.
            </summary>
        </member>
        <member name="F:Avalonia.Media.StretchDirection.UpOnly">
            <summary>
            Only scales the content upwards when the content is smaller than the available space.
            If the content is larger, no scaling downwards is done.
            </summary>
        </member>
        <member name="F:Avalonia.Media.StretchDirection.DownOnly">
            <summary>
            Only scales the content downwards when the content is larger than the available space.
            If the content is smaller, no scaling upwards is done.
            </summary>
        </member>
        <member name="F:Avalonia.Media.StretchDirection.Both">
            <summary>
            Always stretches to fit the available space according to the stretch mode.
            </summary>
        </member>
        <member name="T:Avalonia.Media.SweepDirection">
            <summary>
            Defines the direction an which elliptical arc is drawn.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SweepDirection.CounterClockwise">
            <summary>
            Specifies that arcs are drawn in a counter clockwise (negative-angle) direction.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SweepDirection.Clockwise">
            <summary>
            Specifies that arcs are drawn in a clockwise (positive-angle) direction.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextAlignment">
            <summary>
            Defines how text is aligned.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Left">
            <summary>
            The text is left-aligned.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Center">
            <summary>
            The text is centered.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Right">
            <summary>
            The text is right-aligned.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Start">
            <summary>
            The beginning of the text is aligned to the edge of the available space.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.End">
            <summary>
            The end of the text is aligned to the edge of the available space.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.DetectFromContent">
            <summary>
            Text alignment is inferred from the text content.
            </summary>
            <remarks>
            When the TextAlignment property is set to DetectFromContent, alignment is inferred from the text content of the control. For example, English text is left aligned, and Arabic text is right aligned.
            </remarks>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Justify">
            <summary>
            Text is justified within the available space.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextDecoration">
            <summary>
            Represents a text decoration, which is a visual ornamentation that is added to text (such as an underline).
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.LocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.Location"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.Stroke"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeThicknessUnit"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeDashArrayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeDashArray"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeDashOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeDashOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeLineCapProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeLineCap"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeOffsetUnit"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.Stroke">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> that specifies how the <see cref="T:Avalonia.Media.TextDecoration"/> is painted.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeThicknessUnit">
            <summary>
            Gets the units in which the thickness of the <see cref="T:Avalonia.Media.TextDecoration"/> is expressed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeDashArray">
            <summary>
            Gets or sets a collection of <see cref="T:System.Double"/> values that indicate the pattern of dashes and gaps
            that is used to draw the <see cref="T:Avalonia.Media.TextDecoration"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeDashOffset">
            <summary>
            Gets or sets a value that specifies the distance within the dash pattern where a dash begins.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeThickness">
            <summary>
            Gets or sets the thickness of the <see cref="T:Avalonia.Media.TextDecoration"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeLineCap">
            <summary>
            Gets or sets a <see cref="T:Avalonia.Media.PenLineCap"/> enumeration value that describes the shape at the ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeOffset">
            <summary>
            The stroke's offset.
            </summary>
            <value>
            The pen offset.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeOffsetUnit">
            <summary>
            Gets the units in which the <see cref="P:Avalonia.Media.TextDecoration.StrokeOffset"/> value is expressed.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextDecoration.Draw(Avalonia.Media.DrawingContext,Avalonia.Media.GlyphRun,Avalonia.Media.TextFormatting.TextMetrics,Avalonia.Media.IBrush)">
            <summary>
            Draws the <see cref="T:Avalonia.Media.TextDecoration"/> at given origin.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="glyphRun">The decorated run.</param>
            <param name="textMetrics">The font metrics of the decorated run.</param>
            <param name="defaultBrush">The default brush that is used to draw the decoration.</param>
        </member>
        <member name="T:Avalonia.Media.TextDecorationCollection">
            <summary>
            A collection that holds <see cref="T:Avalonia.Media.TextDecoration"/> objects.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextDecorationCollection.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.TextDecorationCollection"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Media.TextDecorationCollection"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextDecorationCollection.GetTextDecorationLocation(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.TextDecorationLocation"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Media.TextDecorationLocation"/>.</returns>
        </member>
        <member name="T:Avalonia.Media.TextDecorationLocation">
            <summary>
            Specifies the vertical position of a <see cref="T:Avalonia.Media.TextDecoration"/> object.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Underline">
            <summary>
            The underline position.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Overline">
            <summary>
            The over line position.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Strikethrough">
            <summary>
            The strikethrough position.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Baseline">
            <summary>
            The baseline position.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextDecorations">
            <summary>
            Defines a set of commonly used text decorations.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Underline">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing an underline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Strikethrough">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing a strikethrough.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Overline">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing an overline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Baseline">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing a baseline.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextDecorationUnit">
            <summary>
            Specifies the unit type of either a <see cref="P:Avalonia.Media.TextDecoration.StrokeOffset"/> or a <see cref="P:Avalonia.Media.TextDecoration.StrokeThickness"/> value.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationUnit.FontRecommended">
            <summary>
            A unit value that is relative to the font used for the <see cref="T:Avalonia.Media.TextDecoration"/>.
            If the decoration spans multiple fonts, an average recommended value is calculated.
            This is the default value.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationUnit.FontRenderingEmSize">
            <summary>
            A unit value that is relative to the em size of the font.
            The value of the offset or thickness is equal to the offset or thickness value multiplied by the font em size.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationUnit.Pixel">
            <summary>
            A unit value that is expressed in pixels.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.BidiReorderer">
            <summary>
            Reorders text runs according to their bidi level.
            </summary>
            <remarks>To avoid allocations, this class is designed to be reused.</remarks>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.BidiReorderer.LinearReorder">
            <summary>
            Reorders the runs from logical to visual order.
            <see href="https://github.com/fribidi/linear-reorder/blob/f2f872257d4d8b8e137fcf831f254d6d4db79d3c/linear-reorder.c"/>
            </summary>
            <returns>The first run index in visual order.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.DrawableTextRun">
            <summary>
            A text run that supports drawing content.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.DrawableTextRun.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.DrawableTextRun.Baseline">
            <summary>
            Run baseline in ratio relative to run height
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.DrawableTextRun.Draw(Avalonia.Media.DrawingContext,Avalonia.Point)">
            <summary>
            Draws the <see cref="T:Avalonia.Media.TextFormatting.DrawableTextRun"/> at the given origin.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.FormattedTextSource.CreateTextStyleRun(System.ReadOnlySpan{System.Char},System.Int32,Avalonia.Media.TextFormatting.TextRunProperties,System.Collections.Generic.IReadOnlyList{Avalonia.Utilities.ValueSpan{Avalonia.Media.TextFormatting.TextRunProperties}})">
            <summary>
            Creates a span of text run properties that has modifier applied.
            </summary>
            <param name="text">The text to create the properties for.</param>
            <param name="firstTextSourceIndex">The first text source index.</param>
            <param name="defaultProperties">The default text properties.</param>
            <param name="textModifier">The text properties modifier.</param>
            <returns>
            The created text style run.
            </returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.FormattingObjectPool">
            <summary>
            <para>Contains various list pools that are commonly used during text layout.</para>
            <para>
            This class provides an instance per thread.
            In most applications, there'll be only one instance: on the UI thread, which is responsible for layout.
            </para>
            </summary>
            <seealso cref="T:Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList`1"/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FormattingObjectPool.Instance">
            <summary>
            Gets an instance of this class for the current thread.
            </summary>
            <remarks>
            Since this is backed by a thread static field which is slower than a normal static field,
            prefer passing the instance around when possible instead of calling this property each time.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.FormattingObjectPool.ListPool`1.Rent">
            <summary>
            Rents a list.
            See <see cref="T:Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList`1"/> for the intended usages.
            </summary>
            <returns>A rented list instance that must be returned to the pool.</returns>
            <seealso cref="T:Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList`1"/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.FormattingObjectPool.ListPool`1.Return(Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList{`0}@)">
            <summary>
            Returns a rented list to the pool.
            </summary>
            <param name="rentedList">
            On input, the list to return.
            On output, the reference is set to null to avoid misuse.
            </param>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList`1">
            <summary>
            <para>Represents a list that has been rented through <see cref="T:Avalonia.Media.TextFormatting.FormattingObjectPool"/>.</para>
            <para>
            This class can be used when a temporary list is needed to store some items during text layout.
            It can also be used as a reusable array builder by calling <see cref="M:System.Collections.Generic.List`1.ToArray"/> when done.
            </para>
            <list type="bullet">
              <item>NEVER use an instance of this type after it's been returned to the pool.</item>
              <item>AVOID storing an instance of this type into a field or property.</item>
              <item>AVOID casting an instance of this type to another type.</item>
              <item>
                AVOID passing an instance of this type as an argument to a method expecting a standard list,
                unless you're absolutely sure it won't store it.
              </item>
              <item>
                If you call a method returning an instance of this type,
                you're now responsible for returning it to the pool.
              </item>
            </list>
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.GenericTextParagraphProperties">
            <summary>
            Generic implementation of TextParagraphProperties
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.#ctor(Avalonia.Media.TextFormatting.TextRunProperties,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,System.Double,System.Double)">
            <summary>
            Constructing TextParagraphProperties
            </summary>
            <param name="defaultTextRunProperties">default paragraph's default run properties</param>
            <param name="textAlignment">logical horizontal alignment</param>
            <param name="textWrap">text wrap option</param>
            <param name="lineHeight">Paragraph line height</param>
            <param name="letterSpacing">letter spacing</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.#ctor(Avalonia.Media.FlowDirection,Avalonia.Media.TextAlignment,System.Boolean,System.Boolean,Avalonia.Media.TextFormatting.TextRunProperties,Avalonia.Media.TextWrapping,System.Double,System.Double,System.Double)">
            <summary>
            Constructing TextParagraphProperties
            </summary>
            <param name="flowDirection">text flow direction</param>
            <param name="textAlignment">logical horizontal alignment</param>
            <param name="firstLineInParagraph">true if the paragraph is the first line in the paragraph</param>
            <param name="alwaysCollapsible">true if the line is always collapsible</param>
            <param name="defaultTextRunProperties">default paragraph's default run properties</param>
            <param name="textWrap">text wrap option</param>
            <param name="lineHeight">Paragraph line height</param>
            <param name="indent">line indentation</param>
            <param name="letterSpacing">letter spacing</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.#ctor(Avalonia.Media.TextFormatting.TextParagraphProperties)">
            <summary>
            Constructing TextParagraphProperties from another one
            </summary>
            <param name="textParagraphProperties">source line props</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.FlowDirection">
            <summary>
            This property specifies whether the primary text advance
            direction shall be left-to-right, right-to-left, or top-to-bottom.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.TextAlignment">
            <summary>
            This property describes how inline content of a block is aligned.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.LineHeight">
            <summary>
            Paragraph's line height
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.FirstLineInParagraph">
            <summary>
            Indicates the first line of the paragraph.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.AlwaysCollapsible">
            <summary>
            If true, the formatted line may always be collapsed. If false (the default),
            only lines that overflow the paragraph width are collapsed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.DefaultTextRunProperties">
            <summary>
            Paragraph's default run properties
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.TextWrapping">
            <summary>
            This property controls whether or not text wraps when it reaches the flow edge
            of its containing block box
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.Indent">
            <summary>
            Line indentation
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.LetterSpacing">
            <summary>
            The letter spacing
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetFlowDirection(Avalonia.Media.FlowDirection)">
            <summary>
            Set text flow direction
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetTextAlignment(Avalonia.Media.TextAlignment)">
            <summary>
            Set text alignment
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetLineHeight(System.Double)">
            <summary>
            Set line height
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetTextWrapping(Avalonia.Media.TextWrapping)">
            <summary>
            Set text wrap
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.GenericTextRunProperties">
            <summary>
            Generic implementation of TextRunProperties
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.Typeface">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.FontRenderingEmSize">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.TextDecorations">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.ForegroundBrush">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.BackgroundBrush">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.BaselineAlignment">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.CultureInfo">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Media.TextFormatting.GlyphInfo">
            <summary>
            Represents a single glyph.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GlyphInfo.#ctor(System.UInt16,System.Int32,System.Double,Avalonia.Vector)">
            <summary>
            Represents a single glyph.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GlyphInfo.GlyphIndex">
            <summary>
            Get the glyph index.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GlyphInfo.GlyphCluster">
            <summary>
            Get the glyph cluster.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GlyphInfo.GlyphAdvance">
            <summary>
            Get the glyph advance.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GlyphInfo.GlyphOffset">
            <summary>
            Get the glyph offset.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.ITextSource">
            <summary>
            Produces <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> objects that are used by the <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ITextSource.GetTextRun(System.Int32)">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> for specified text source index.
            </summary>
            <param name="textSourceIndex">The text source index.</param>
            <returns>The text run.</returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.JustificationProperties.Width">
            <summary>
            Gets the width in which the range is justified.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.JustificationProperties.Justify(Avalonia.Media.TextFormatting.TextLine)">
            <summary>
            Justifies given text line.
            </summary>
            <param name="textLine">Text line to collapse.</param>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.LogicalDirection.Backward">
            <summary>
            Backward, or from right to left.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.LogicalDirection.Forward">
            <summary>
            Forward, or from left to right.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedBuffer.Length">
            <summary>
            The buffer's length.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedBuffer.GlyphTypeface">
            <summary>
            The buffer's glyph typeface.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedBuffer.FontRenderingEmSize">
            <summary>
            The buffers font rendering em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedBuffer.BidiLevel">
            <summary>
            The buffer's bidi level.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedBuffer.IsLeftToRight">
            <summary>
            The buffer's reading direction.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedBuffer.Text">
            <summary>
            The text that is represended by this buffer.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedBuffer.Reverse">
            <summary>
            Reverses the buffer.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedBuffer.FindGlyphIndex(System.Int32)">
            <summary>
            Finds a glyph index for given character index.
            </summary>
            <param name="characterIndex">The character index.</param>
            <returns>
            The glyph index.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedBuffer.Split(System.Int32)">
            <summary>
            Splits the <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> at specified length.
            </summary>
            <param name="length">The length.</param>
            <returns>The split result.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.ShapedTextRun">
            <summary>
            A text run that holds shaped characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextRun.Text">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextRun.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextRun.Length">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedTextRun.Draw(Avalonia.Media.DrawingContext,Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedTextRun.TryMeasureCharacters(System.Double,System.Int32@)">
            <summary>
            Measures the number of characters that fit into available width.
            </summary>
            <param name="availableWidth">The available width.</param>
            <param name="length">The count of fitting characters.</param>
            <returns>
            <c>true</c> if characters fit into the available width; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.SplitResult`1.First">
            <summary>
            Gets the first part.
            </summary>
            <value>
            The first part.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.SplitResult`1.Second">
            <summary>
            Gets the second part.
            </summary>
            <value>
            The second part.
            </value>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.SplitResult`1.Deconstruct(`0@,`0@)">
            <summary>
            Deconstructs the split results into its components.
            </summary>
            <param name="first">On return, contains the first part.</param>
            <param name="second">On return, contains the second part.</param>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextBounds">
            <summary>
            The bounding rectangle of a range of characters
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextBounds.#ctor(Avalonia.Rect,Avalonia.Media.FlowDirection,System.Collections.Generic.IList{Avalonia.Media.TextFormatting.TextRunBounds})">
            <summary>
            Constructing TextBounds object
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextBounds.Rectangle">
            <summary>
            Bounds rectangle
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextBounds.FlowDirection">
            <summary>
            Text flow direction inside the boundary rectangle
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextBounds.TextRunBounds">
            <summary>
            Get a list of run bounding rectangles
            </summary>
            <returns>Array of text run bounds</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextCharacters">
            <summary>
            A text run that holds text characters.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.#ctor(System.String,Avalonia.Media.TextFormatting.TextRunProperties)">
            <summary>
            Constructs a run for text content from a string.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.#ctor(System.ReadOnlyMemory{System.Char},Avalonia.Media.TextFormatting.TextRunProperties)">
            <summary>
            Constructs a run for text content from a memory region.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCharacters.Length">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCharacters.Text">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCharacters.Properties">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.GetShapeableCharacters(System.ReadOnlyMemory{System.Char},System.SByte,Avalonia.Media.FontManager,Avalonia.Media.TextFormatting.TextRunProperties@,Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList{Avalonia.Media.TextFormatting.TextRun})">
            <summary>
            Gets a list of <see cref="T:Avalonia.Media.TextFormatting.UnshapedTextRun"/>.
            </summary>
            <returns>The shapeable text characters.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.CreateShapeableRun(System.ReadOnlyMemory{System.Char},Avalonia.Media.TextFormatting.TextRunProperties,System.SByte,Avalonia.Media.FontManager,Avalonia.Media.TextFormatting.TextRunProperties@)">
            <summary>
            Creates a shapeable text run with unique properties.
            </summary>
            <param name="text">The characters to create text runs from.</param>
            <param name="defaultProperties">The default text run properties.</param>
            <param name="biDiLevel">The bidi level of the run.</param>
            <param name="fontManager">The font manager to use.</param>
            <param name="previousProperties"></param>
            <returns>A list of shapeable text runs.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.TryGetShapeableLength(System.ReadOnlySpan{System.Char},Avalonia.Media.IGlyphTypeface,Avalonia.Media.IGlyphTypeface,System.Int32@)">
            <summary>
            Tries to get a shapeable length that is supported by the specified typeface.
            </summary>
            <param name="text">The characters to shape.</param>
            <param name="glyphTypeface">The typeface that is used to find matching characters.</param>
            <param name="defaultGlyphTypeface">The default typeface.</param>
            <param name="length">The shapeable length.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextCollapsingProperties">
            <summary>
            Properties of text collapsing.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCollapsingProperties.Width">
            <summary>
            Gets the width in which the collapsible range is constrained to.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCollapsingProperties.Symbol">
            <summary>
            Gets the text run that is used as collapsing symbol.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCollapsingProperties.FlowDirection">
            <summary>
            Gets the flow direction that is used for collapsing.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCollapsingProperties.Collapse(Avalonia.Media.TextFormatting.TextLine)">
            <summary>
            Collapses given text line.
            </summary>
            <param name="textLine">Text line to collapse.</param>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextEndOfLine">
            <summary>
            A text run that indicates the end of a line.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextEndOfParagraph">
            <summary>
             A text run that indicates the end of a paragraph.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextFormatter">
            <summary>
            Represents a base class for text formatting.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextFormatter.Current">
            <summary>
            Gets the current <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/> that is used for non complex text formatting.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatter.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)">
            <summary>
            Formats a text line.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="firstTextSourceIndex">The first character index to start the text line from.</param>
            <param name="paragraphWidth">A <see cref="T:System.Double"/> value that specifies the width of the paragraph that the line fills.</param>
            <param name="paragraphProperties">A <see cref="T:Avalonia.Media.TextFormatting.TextParagraphProperties"/> value that represents paragraph properties,
            such as TextWrapping, TextAlignment, or TextStyle.</param>
            <param name="previousLineBreak">A <see cref="T:Avalonia.Media.TextFormatting.TextLineBreak"/> value that specifies the text formatter state,
            in terms of where the previous line in the paragraph was broken by the text formatting process.</param>
            <returns>The formatted line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)">
            <inheritdoc cref="M:Avalonia.Media.TextFormatting.TextFormatter.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)"/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.SplitTextRuns(System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.TextRun},System.Int32,Avalonia.Media.TextFormatting.FormattingObjectPool)">
            <summary>
            Split a sequence of runs into two segments at specified length.
            </summary>
            <param name="textRuns">The text run's.</param>
            <param name="length">The length to split at.</param>
            <param name="objectPool">A pool used to get reusable formatting objects.</param>
            <returns>The split text runs.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.ShapeTextRuns(System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.TextRun},Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.FormattingObjectPool,Avalonia.Media.FontManager,Avalonia.Media.FlowDirection@)">
            <summary>
            Shape specified text runs with specified paragraph embedding.
            </summary>
            <param name="textRuns">The text runs to shape.</param>
            <param name="paragraphProperties">The default paragraph properties.</param>
            <param name="resolvedFlowDirection">The resolved flow direction.</param>
            <param name="objectPool">A pool used to get reusable formatting objects.</param>
            <param name="fontManager">The font manager to use.</param>
            <returns>
            A list of shaped text characters.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.TryJoinContiguousMemories(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Tries to join two potnetially contiguous memory regions.
            </summary>
            <param name="x">The first memory region.</param>
            <param name="y">The second memory region.</param>
            <param name="joinedMemory">On success, a memory region representing the union of the two regions.</param>
            <returns>true if the two regions were contigous; false otherwise.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.CoalesceLevels(System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.TextRun},System.ReadOnlySpan{System.SByte},Avalonia.Media.FontManager,Avalonia.Media.TextFormatting.FormattingObjectPool.RentedList{Avalonia.Media.TextFormatting.TextRun})">
            <summary>
            Coalesces ranges of the same bidi level to form <see cref="T:Avalonia.Media.TextFormatting.UnshapedTextRun"/>
            </summary>
            <param name="textCharacters">The text characters to form <see cref="T:Avalonia.Media.TextFormatting.UnshapedTextRun"/> from.</param>
            <param name="levels">The bidi levels.</param>
            <param name="fontManager">The font manager to use.</param>
            <param name="processedRuns">A list that will be filled with the processed runs.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.FetchTextRuns(Avalonia.Media.TextFormatting.ITextSource,System.Int32,Avalonia.Media.TextFormatting.FormattingObjectPool,Avalonia.Media.TextFormatting.TextEndOfLine@,System.Int32@)">
            <summary>
            Fetches text runs.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="firstTextSourceIndex">The first text source index.</param>
            <param name="objectPool">A pool used to get reusable formatting objects.</param>
            <param name="endOfLine">On return, the end of line, if any.</param>
            <param name="textSourceLength">On return, the processed text source length.</param>
            <returns>
            The formatted text runs.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.CreateEmptyTextLine(System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties)">
            <summary>
            Creates an empty text line.
            </summary>
            <returns>The empty text line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.PerformTextWrapping(System.Collections.Generic.List{Avalonia.Media.TextFormatting.TextRun},System.Boolean,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.FlowDirection,Avalonia.Media.TextFormatting.TextLineBreak,Avalonia.Media.TextFormatting.FormattingObjectPool)">
            <summary>
            Performs text wrapping returns a list of text lines.
            </summary>
            <param name="textRuns"></param>
            <param name="canReuseTextRunList">Whether <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> can be reused to store the split runs.</param>
            <param name="firstTextSourceIndex">The first text source index.</param>
            <param name="paragraphWidth">The paragraph width.</param>
            <param name="paragraphProperties">The text paragraph properties.</param>
            <param name="resolvedFlowDirection"></param>
            <param name="currentLineBreak">The current line break if the line was explicitly broken.</param>
            <param name="objectPool">A pool used to get reusable formatting objects.</param>
            <returns>The wrapped text line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.CreateSymbol(Avalonia.Media.TextFormatting.TextRun,Avalonia.Media.FlowDirection)">
            <summary>
            Creates a shaped symbol.
            </summary>
            <param name="textRun">The symbol run to shape.</param>
            <param name="flowDirection">The flow direction.</param>
            <returns>
            The shaped symbol.
            </returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLayout">
            <summary>
            Represents a multi line text layout.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.#ctor(System.String,Avalonia.Media.Typeface,System.Double,Avalonia.Media.IBrush,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Media.TextTrimming,Avalonia.Media.TextDecorationCollection,Avalonia.Media.FlowDirection,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Collections.Generic.IReadOnlyList{Avalonia.Utilities.ValueSpan{Avalonia.Media.TextFormatting.TextRunProperties}})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.TextLayout" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="typeface">The typeface.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="foreground">The foreground.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="textWrapping">The text wrapping.</param>
            <param name="textTrimming">The text trimming.</param>
            <param name="textDecorations">The text decorations.</param>
            <param name="flowDirection">The text flow direction.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="lineHeight">The height of each line of text.</param>
            <param name="letterSpacing">The letter spacing that is applied to rendered glyphs.</param>
            <param name="maxLines">The maximum number of text lines.</param>
            <param name="textStyleOverrides">The text style overrides.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.#ctor(Avalonia.Media.TextFormatting.ITextSource,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextTrimming,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.TextLayout" /> class.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="paragraphProperties">The default text paragraph properties.</param>
            <param name="textTrimming">The text trimming.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="maxLines">The maximum number of text lines.</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.LineHeight">
            <summary>
            Gets or sets the height of each line of text.
            </summary>
            <remarks>
            A value of NaN (equivalent to an attribute value of "Auto") indicates that the line height
            is determined automatically from the current font characteristics. The default is NaN.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.MaxWidth">
            <summary>
            Gets the maximum width.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.MaxHeight">
            <summary>
            Gets the maximum height.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.MaxLines">
            <summary>
            Gets the maximum number of text lines.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.LetterSpacing">
            <summary>
            Gets the text spacing.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.TextLines">
            <summary>
            Gets the text lines.
            </summary>
            <value>
            The text lines.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.Height">
            <summary>
            The distance from the top of the first line to the bottom of the last line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.Extent">
            <summary>
            The distance from the topmost black pixel of the first line
            to the bottommost black pixel of the last line. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.Baseline">
            <summary>
            The distance from the top of the first line to the baseline of the first line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.OverhangAfter">
            <summary>
            The distance from the bottom of the last line to the extent bottom.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.OverhangLeading">
            <summary>
            The maximum distance from the leading black pixel to the leading alignment point of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.OverhangTrailing">
            <summary>
            The maximum distance from the trailing black pixel to the trailing alignment point of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.Width">
            <summary>
            The maximum advance width between the leading and trailing alignment points of a line,
            excluding the width of whitespace characters at the end of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.WidthIncludingTrailingWhitespace">
            <summary>
            The maximum advance width between the leading and trailing alignment points of a line,
            including the width of whitespace characters at the end of the line.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.Draw(Avalonia.Media.DrawingContext,Avalonia.Point)">
            <summary>
            Draws the text layout.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.HitTestTextPosition(System.Int32)">
            <summary>
            Get the pixel location relative to the top-left of the layout box given the text position.
            </summary>
            <param name="textPosition">The text position.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.CreateTextParagraphProperties(Avalonia.Media.Typeface,System.Double,Avalonia.Media.IBrush,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Media.TextDecorationCollection,Avalonia.Media.FlowDirection,System.Double,System.Double)">
            <summary>
            Creates the default <see cref="T:Avalonia.Media.TextFormatting.TextParagraphProperties"/> that are used by the <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/>.
            </summary>
            <param name="typeface">The typeface.</param>
            <param name="fontSize">The font size.</param>
            <param name="foreground">The foreground.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="textWrapping">The text wrapping.</param>
            <param name="textDecorations">The text decorations.</param>
            <param name="flowDirection">The text flow direction.</param>
            <param name="lineHeight">The height of each line of text.</param>
            <param name="letterSpacing">The letter spacing that is applied to rendered glyphs.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.GetCollapsingProperties(System.Double)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.TextCollapsingProperties"/> for current text trimming mode.
            </summary>
            <param name="width">The collapsing width.</param>
            <returns>The <see cref="T:Avalonia.Media.TextFormatting.TextCollapsingProperties"/>.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLeadingPrefixCharacterEllipsis">
            <summary>
            Ellipsis based on a fixed length leading prefix and suffix growing from the end at character granularity.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLeadingPrefixCharacterEllipsis.#ctor(System.String,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextRunProperties,Avalonia.Media.FlowDirection)">
            <summary>
            Construct a text trailing word ellipsis collapsing properties.
            </summary>
            <param name="ellipsis">Text used as collapsing symbol.</param>
            <param name="prefixLength">Length of leading prefix.</param>
            <param name="width">width in which collapsing is constrained to</param>
            <param name="textRunProperties">text run properties of ellipsis symbol</param>
            <param name="flowDirection">the flow direction of the collapes line.</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLeadingPrefixCharacterEllipsis.Width">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLeadingPrefixCharacterEllipsis.Symbol">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLeadingPrefixCharacterEllipsis.Collapse(Avalonia.Media.TextFormatting.TextLine)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLine">
            <summary>
            Represents a line of text that is used for text rendering.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.TextRuns">
            <summary>
            Gets the text runs that are contained within a line.
            </summary>
            <value>
            The contained text runs.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.FirstTextSourceIndex">
            <summary>
            Gets the first TextSource position of the current line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.Length">
            <summary>
            Gets the total number of TextSource positions of the current line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.TextLineBreak">
            <summary>
            Gets the state of the line when broken by line breaking process.
            </summary>
            <returns>
            A <see cref="P:Avalonia.Media.TextFormatting.TextLine.TextLineBreak"/> value that represents the line break.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.Baseline">
            <summary>
            Gets the distance from the top to the baseline of the current TextLine object.
            </summary>
            <returns>
            A <see cref="T:System.Double"/> that represents the baseline distance.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.Extent">
            <summary>
            Gets the distance from the top-most to bottom-most black pixel in a line.
            </summary>
            <returns>
            A value that represents the extent distance.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.HasCollapsed">
            <summary>
            Gets a value that indicates whether the line is collapsed.
            </summary>
            <returns>
            <c>true</c>, if the line is collapsed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.HasOverflowed">
            <summary>
            Gets a value that indicates whether content of the line overflows the specified paragraph width.
            </summary>
            <returns>
            <c>true</c>, the line overflows the specified paragraph width; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.Height">
            <summary>
            Gets the height of a line of text.
            </summary>
            <returns>
            The text line height.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.NewLineLength">
            <summary>
            Gets the number of newline characters at the end of a line.
            </summary>
            <returns>
            The number of newline characters.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.OverhangAfter">
            <summary>
            Gets the distance that black pixels extend beyond the bottom alignment edge of a line.
            </summary>
            <returns>
            The overhang after distance.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.OverhangLeading">
            <summary>
            Gets the distance that black pixels extend prior to the left leading alignment edge of the line.
            </summary>
            <returns>
            The overhang leading distance.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.OverhangTrailing">
            <summary>
            Gets the distance that black pixels extend following the right trailing alignment edge of the line.
            </summary>
            <returns>
            The overhang trailing distance.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.Start">
            <summary>
            Gets the distance from the start of a paragraph to the starting point of a line.
            </summary>
            <returns>
            The distance from the start of a paragraph to the starting point of a line.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.TrailingWhitespaceLength">
            <summary>
            Gets the number of whitespace code points beyond the last non-blank character in a line.
            </summary>
            <returns>
            The number of whitespace code points beyond the last non-blank character in a line.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.Width">
            <summary>
            Gets the width of a line of text, excluding trailing whitespace characters.
            </summary>
            <returns>
            The text line width, excluding trailing whitespace characters.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.WidthIncludingTrailingWhitespace">
            <summary>
            Gets the width of a line of text, including trailing whitespace characters.
            </summary>
            <returns>
            The text line width, including trailing whitespace characters.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.Draw(Avalonia.Media.DrawingContext,Avalonia.Point)">
            <summary>
            Draws the <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> at the given origin.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="lineOrigin"></param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.Collapse(Avalonia.Media.TextFormatting.TextCollapsingProperties[])">
            <summary>
            Create a collapsed line based on collapsed text properties.
            </summary>
            <param name="collapsingPropertiesList">A list of <see cref="T:Avalonia.Media.TextFormatting.TextCollapsingProperties"/>
            objects that represent the collapsed text properties.</param>
            <returns>
            A <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> value that represents a collapsed line that can be displayed.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.Justify(Avalonia.Media.TextFormatting.JustificationProperties)">
            <summary>
            Create a justified line based on justification text properties.
            </summary>
            <param name="justificationProperties">An object that represent the justification text properties.</param>
            <returns>
            A <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> value that represents a justified line that can be displayed.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetCharacterHitFromDistance(System.Double)">
            <summary>
            Gets the character hit corresponding to the specified distance from the beginning of the line.
            </summary>
            <param name="distance">A <see cref="T:System.Double"/> value that represents the distance from the beginning of the line.</param>
            <returns>The <see cref="T:Avalonia.Media.CharacterHit"/> object at the specified distance from the beginning of the line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the distance from the beginning of the line to the specified character hit.
            <see cref="T:Avalonia.Media.CharacterHit"/>.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> object whose distance you want to query.</param>
            <returns>A <see cref="T:System.Double"/> that represents the distance from the beginning of the line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetNextCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the next character hit for caret navigation.
            </summary>
            <param name="characterHit">The current <see cref="T:Avalonia.Media.CharacterHit"/>.</param>
            <returns>The next <see cref="T:Avalonia.Media.CharacterHit"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the previous character hit for caret navigation.
            </summary>
            <param name="characterHit">The current <see cref="T:Avalonia.Media.CharacterHit"/>.</param>
            <returns>The previous <see cref="T:Avalonia.Media.CharacterHit"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetBackspaceCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the previous character hit after backspacing.
            </summary>
            <param name="characterHit">The current <see cref="T:Avalonia.Media.CharacterHit"/>.</param>
            <returns>The <see cref="T:Avalonia.Media.CharacterHit"/> after backspacing.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetTextBounds(System.Int32,System.Int32)">
            <summary>
            Get an array of bounding rectangles of a range of characters within a text line.
            </summary>
            <param name="firstTextSourceCharacterIndex">index of first character of specified range</param>
            <param name="textLength">number of characters of the specified range</param>
            <returns>an array of bounding rectangles.</returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineBreak.TextEndOfLine">
            <summary>
            Get the end of line run.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineBreak.FlowDirection">
            <summary>
            Get the flow direction for remaining characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineBreak.IsSplit">
            <summary>
            Gets whether there were remaining runs after this line break,
            that were split up by the <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/> during the formatting process.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.TextRuns">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.FirstTextSourceIndex">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.Length">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.TextLineBreak">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.HasCollapsed">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.HasOverflowed">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.Baseline">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.Extent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.Height">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.NewLineLength">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.OverhangAfter">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.OverhangLeading">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.OverhangTrailing">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.TrailingWhitespaceLength">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.Start">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.Width">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.WidthIncludingTrailingWhitespace">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.Draw(Avalonia.Media.DrawingContext,Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.Collapse(Avalonia.Media.TextFormatting.TextCollapsingProperties[])">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.Justify(Avalonia.Media.TextFormatting.JustificationProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetCharacterHitFromDistance(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetNextCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetBackspaceCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.TryFindNextCharacterHit(Avalonia.Media.CharacterHit,Avalonia.Media.CharacterHit@)">
            <summary>
            Tries to find the next character hit.
            </summary>
            <param name="characterHit">The current character hit.</param>
            <param name="nextCharacterHit">The next character hit.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.TryFindPreviousCharacterHit(Avalonia.Media.CharacterHit,Avalonia.Media.CharacterHit@)">
            <summary>
            Tries to find the previous character hit.
            </summary>
            <param name="characterHit">The current character hit.</param>
            <param name="previousCharacterHit">The previous character hit.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetRunIndexAtCharacterIndex(System.Int32,Avalonia.Media.TextFormatting.LogicalDirection,System.Int32@)">
            <summary>
            Gets the run index of the specified codepoint index.
            </summary>
            <param name="codepointIndex">The codepoint index.</param>
            <param name="direction">The logical direction.</param>
            <param name="textPosition">The text position of the found run index.</param>
            <returns>The text run index.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetParagraphOffsetX(System.Double,System.Double)">
            <summary>
            Gets the text line offset x.
            </summary>
            <param name="width">The line width.</param>
            <param name="widthIncludingTrailingWhitespace">The paragraph width including whitespace.</param>
            <returns>The paragraph offset.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLineMetrics">
            <summary>
            Represents a metric for a <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> objects,
            that holds information about ascent, descent, line gap, size and origin of the text line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.HasOverflowed">
            <summary>
            Gets a value that indicates whether content of the line overflows the specified paragraph width.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.Height">
            <summary>
            Gets the height of a line of text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.NewlineLength">
            <summary>
            Gets the number of newline characters at the end of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.Start">
            <summary>
            Gets the distance from the start of a paragraph to the starting point of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.TextBaseline">
            <summary>
            Gets the distance from the top to the baseline of the line of text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.TrailingWhitespaceLength">
            <summary>
            Gets the number of whitespace code points beyond the last non-blank character in a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.Width">
            <summary>
            Gets the width of a line of text, excluding trailing whitespace characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.WidthIncludingTrailingWhitespace">
            <summary>
            Gets the width of a line of text, including trailing whitespace characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.Extent">
            <summary>
            Gets the distance from the top-most to bottom-most black pixel in a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.OverhangAfter">
            <summary>
            Gets the distance that black pixels extend beyond the bottom alignment edge of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.OverhangLeading">
            <summary>
            Gets the distance that black pixels extend prior to the left leading alignment edge of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.OverhangTrailing">
            <summary>
            Gets the distance that black pixels extend following the right trailing alignment edge of the line.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextMetrics">
            <summary>
            A metric that holds information about text specific measurements.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.FontRenderingEmSize">
            <summary>
            Em size of font used to format and display text
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.Ascent">
            <summary>
            Gets the recommended distance above the baseline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.Descent">
            <summary>
            Gets the recommended distance under the baseline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.LineGap">
            <summary>
            Gets the recommended additional space between two lines of text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.LineHeight">
            <summary>
            Gets the estimated line height.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.UnderlineThickness">
            <summary>
            Gets a value that indicates the thickness of the underline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.UnderlinePosition">
            <summary>
            Gets a value that indicates the distance of the underline from the baseline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.StrikethroughThickness">
            <summary>
            Gets a value that indicates the thickness of the underline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextMetrics.StrikethroughPosition">
            <summary>
            Gets a value that indicates the distance of the strikethrough from the baseline.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextParagraphProperties">
            <summary>
            Provides a set of properties that are used during the paragraph layout.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.FlowDirection">
            <summary>
            This property specifies whether the primary text advance 
            direction shall be left-to-right, right-to-left.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.TextAlignment">
            <summary>
            Gets the text alignment.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.LineHeight">
            <summary>
            Paragraph's line height
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.FirstLineInParagraph">
            <summary>
            Indicates the first line of the paragraph.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.AlwaysCollapsible">
            <summary>
            If true, the formatted line may always be collapsed. If false (the default),
            only lines that overflow the paragraph width are collapsed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.DefaultTextRunProperties">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.TextDecorations">
            <summary>
            If not null, text decorations to apply to all runs in the line. This is in addition
            to any text decorations specified by the TextRunProperties for individual text runs.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.TextWrapping">
            <summary>
            Gets the text wrapping.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.Indent">
            <summary>
            Line indentation
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.ParagraphIndent">
            <summary>
            Get the paragraph indentation.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.DefaultIncrementalTab">
            <summary>
            Gets the default incremental tab width.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.LetterSpacing">
            <summary>
            Gets the letter spacing.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRange">
            <summary>
            References a portion of a text buffer.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRange.Start">
            <summary>
            Gets the start.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRange.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRange.End">
            <summary>
            Gets the end.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextRange.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of the slice.
            </summary>
            <param name="length">The number of elements to return.</param>
            <returns>A <see cref="T:Avalonia.Media.TextFormatting.TextRange"/> that contains the specified number of elements from the start of this slice.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextRange.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in the slice and then returns the remaining elements.
            </summary>
            <param name="length">The number of elements to skip before returning the remaining elements.</param>
            <returns>A <see cref="T:Avalonia.Media.TextFormatting.TextRange"/> that contains the elements that occur after the specified index in this slice.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRun">
            <summary>
            Represents a portion of a <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRun.Length">
            <summary>
             Gets the text source length.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRun.Text">
            <summary>
            Gets the text run's text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRun.Properties">
            <summary>
            A set of properties shared by every characters in the run
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRunBounds">
            <summary>
            The bounding rectangle of text run
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextRunBounds.#ctor(Avalonia.Rect,System.Int32,System.Int32,Avalonia.Media.TextFormatting.TextRun)">
            <summary>
            Constructing TextRunBounds
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunBounds.TextSourceCharacterIndex">
            <summary>
            First text source character index of text run
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunBounds.Length">
            <summary>
            character length of bounded text run
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunBounds.Rectangle">
            <summary>
            Text run bounding rectangle
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunBounds.TextRun">
            <summary>
            text run
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRunProperties">
            <summary>
            Provides a set of properties, such as typeface or foreground brush, that can be applied to a TextRun object. This is an abstract class.
            </summary>
            <remarks>
            The text layout client provides a concrete implementation of this abstract class.
            This enables the client to implement text run properties in a way that corresponds with the associated formatting store.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.Typeface">
            <summary>
            Run typeface
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.FontRenderingEmSize">
            <summary>
            Em size of font used to format and display text
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.TextDecorations">
            <summary>
             Run TextDecorations. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.ForegroundBrush">
            <summary>
            Brush used to fill text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.BackgroundBrush">
            <summary>
            Brush used to paint background of run.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.CultureInfo">
            <summary>
            Run text culture.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.BaselineAlignment">
            <summary>
            Run vertical box alignment
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextShaper">
            <summary>
            A class that is responsible for text shaping.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaper.Current">
            <summary>
            Gets the current text shaper.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextShaper.ShapeText(System.ReadOnlyMemory{System.Char},Avalonia.Media.TextFormatting.TextShaperOptions)">
            <inheritdoc cref="M:Avalonia.Platform.ITextShaperImpl.ShapeText(System.ReadOnlyMemory{System.Char},Avalonia.Media.TextFormatting.TextShaperOptions)"/>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextShaperOptions">
            <summary>
            Options to customize text shaping.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaperOptions.Typeface">
            <summary>
            Get the typeface.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaperOptions.FontRenderingEmSize">
            <summary>
            Get the font rendering em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaperOptions.BidiLevel">
            <summary>
            Get the bidi level of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaperOptions.Culture">
            <summary>
            Get the culture.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaperOptions.IncrementalTabWidth">
            <summary>
            Get the incremental tab width.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaperOptions.LetterSpacing">
            <summary>
            Get the letter spacing.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis">
            <summary>
            A collapsing properties to collapse whole line toward the end
            at character granularity.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.#ctor(System.String,System.Double,Avalonia.Media.TextFormatting.TextRunProperties,Avalonia.Media.FlowDirection)">
            <summary>
            Construct a text trailing character ellipsis collapsing properties
            </summary>
            <param name="ellipsis">Text used as collapsing symbol.</param>
            <param name="width">Width in which collapsing is constrained to.</param>
            <param name="textRunProperties">Text run properties of ellipsis symbol.</param>
            <param name="flowDirection">The flow direction of the collapsed line.</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.Width">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.Symbol">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.Collapse(Avalonia.Media.TextFormatting.TextLine)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis">
            <summary>
            a collapsing properties to collapse whole line toward the end
            at word granularity.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.#ctor(System.String,System.Double,Avalonia.Media.TextFormatting.TextRunProperties,Avalonia.Media.FlowDirection)">
            <summary>
            Construct a text trailing word ellipsis collapsing properties.
            </summary>
            <param name="ellipsis">Text used as collapsing symbol.</param>
            <param name="width">width in which collapsing is constrained to.</param>
            <param name="textRunProperties">text run properties of ellipsis symbol.</param>
            <param name="flowDirection">flow direction of the collapsed line.</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.Width">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.Symbol">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.Collapse(Avalonia.Media.TextFormatting.TextLine)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm">
            <summary>
            Implementation of Unicode bidirectional algorithm (UAX #9)
            https://unicode.org/reports/tr9/
            </summary>
            <remarks>
            <para>
            The Bidi algorithm uses a number of memory arrays for resolved
            types, level information, bracket types, x9 removal maps and
            more...
            </para>
            <para>
            This implementation of the BiDi algorithm has been designed
            to reduce memory pressure on the GC by re-using the same
            work buffers, so instances of this class should be re-used
            as much as possible.
            </para>
            </remarks>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._hasCleanState">
            <summary>
            Whether the state is clean and can be reused without a reset.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._originalClasses">
            <summary>
            The original BiDiClass classes as provided by the caller
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._pairedBracketTypes">
            <summary>
            Paired bracket types as provided by caller
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._pairedBracketValues">
            <summary>
            Paired bracket values as provided by caller
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._hasBrackets">
            <summary>
            Try if the incoming data is known to contain brackets
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._hasEmbeddings">
            <summary>
            True if the incoming data is known to contain embedding runs
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._hasIsolates">
            <summary>
            True if the incoming data is known to contain isolating runs
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._isolatePairs">
            <summary>
            Two directional mapping of isolate start/end pairs
            </summary>
            <remarks>
            The forward mapping maps the start index to the end index.
            The reverse mapping maps the end index to the start index.
            </remarks>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._workingClasses">
            <summary>
            The working BiDi classes
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._workingClassesBuffer">
            <summary>
            The working classes buffer
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._resolvedLevels">
            <summary>
            A slice of the resolved levels
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._resolvedLevelsBuffer">
            <summary>
            The buffer underlying resolvedLevels
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._paragraphEmbeddingLevel">
            <summary>
            The resolve paragraph embedding level
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._statusStack">
            <summary>
            The status stack used during resolution of explicit
            embedding and isolating runs
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._x9Map">
            <summary>
            Mapping used to virtually remove characters for rule X9
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._levelRuns">
            <summary>
            Re-usable list of level runs
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._isolatedRunMapping">
            <summary>
            Mapping for the current isolating sequence, built
            by joining level runs from the x9 map.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._pendingIsolateOpenings">
            <summary>
            A stack of pending isolate openings used by FindIsolatePairs()
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runLevel">
            <summary>
            The level of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runDirection">
            <summary>
            The direction of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runLength">
            <summary>
            The length of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runResolvedClasses">
            <summary>
            A mapped slice of the resolved types for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runOriginalClasses">
            <summary>
            A mapped slice of the original types for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runLevels">
            <summary>
            A mapped slice of the run levels for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runBiDiPairedBracketTypes">
            <summary>
            A mapped slice of the paired bracket types of the isolating
            run currently being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._runPairedBracketValues">
            <summary>
            A mapped slice of the paired bracket values of the isolating
            run currently being processed
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.MaxPairedBracketDepth">
            <summary>
            Maximum pairing depth for paired brackets
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._pendingOpeningBrackets">
            <summary>
            Reusable list of pending opening brackets used by the
            LocatePairedBrackets method
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm._pairedBrackets">
            <summary>
            Resolved list of paired brackets
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ResolvedLevels">
            <summary>
            Gets the resolved levels.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ResolvedParagraphEmbeddingLevel">
            <summary>
            Gets the resolved paragraph embedding level
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.Process(Avalonia.Media.TextFormatting.Unicode.BidiData)">
            <summary>
            Process data from a BiDiData instance
            </summary>
            <param name="data">The BiDi Unicode data.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.Process(Avalonia.Utilities.ArraySlice{Avalonia.Media.TextFormatting.Unicode.BidiClass},Avalonia.Utilities.ArraySlice{Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType},Avalonia.Utilities.ArraySlice{System.Int32},System.SByte,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Avalonia.Utilities.ArraySlice{System.SByte}})">
            <summary>
            Processes Bidi Data
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ResolveEmbeddingLevel(Avalonia.Utilities.ArraySlice{Avalonia.Media.TextFormatting.Unicode.BidiClass})">
            <summary>
            Resolve the paragraph embedding level if not explicitly passed
            by the caller. Also used by rule X5c for FSI isolating sequences.
            </summary>
            <param name="data">The data to be evaluated</param>
            <returns>The resolved embedding level</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.FindIsolatePairs">
            <summary>
            Build a list of matching isolates for a directionality slice
            Implements BD9
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ResolveExplicitEmbeddingLevels">
            <summary>
            Resolve the explicit embedding levels from the original
            data.  Implements rules X1 to X8.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BuildX9RemovalMap">
            <summary>
            Build a map to the original data positions that excludes all
            the types defined by rule X9
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.MapX9(System.Int32)">
            <summary>
            Find the original character index for an entry in the X9 map
            </summary>
            <param name="index">Index in the x9 removal map</param>
            <returns>Index to the original data</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.AddLevelRun(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new level run
            </summary>
            <remarks>
            This method resolves the sos and eos values for the run
            and adds the run to the list
            </remarks>
            <param name="start">The index of the start of the run (in x9 removed units)</param>
            <param name="length">The length of the run (in x9 removed units)</param>
            <param name="level">The level of the run</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.FindLevelRuns">
            <summary>
            Find all runs of the same level, populating the _levelRuns
            collection
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.FindRunForIndex(System.Int32)">
            <summary>
            Given a character index, find the level run that starts at that position
            </summary>
            <param name="index">The index into the original (unmapped) data</param>
            <returns>The index of the run that starts at that index</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ProcessIsolatedRunSequences">
            <summary>
            Determine and the process all isolated run sequences
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ProcessIsolatedRunSequence(Avalonia.Media.TextFormatting.Unicode.BidiClass,Avalonia.Media.TextFormatting.Unicode.BidiClass,System.Int32)">
            <summary>
            Process a single isolated run sequence, where the character sequence
            mapping is currently held in _isolatedRunMapping.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.LocatePairedBrackets">
            <summary>
            Locate all pair brackets in the current isolating run
            </summary>
            <returns>A sorted list of BracketPairs</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.InspectPairedBracket(Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair@)">
            <summary>
            Inspect a paired bracket set and determine its strong direction
            </summary>
            <param name="bracketPair">The paired bracket to be inspected</param>
            <returns>The direction of the bracket set content</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.InspectBeforePairedBracket(Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair@,Avalonia.Media.TextFormatting.Unicode.BidiClass)">
            <summary>
            Look for a strong type before a paired bracket
            </summary>
            <param name="bracketPair">The paired bracket set to be inspected</param>
            <param name="sos">The sos in case nothing found before the bracket</param>
            <returns>The strong direction before the brackets</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.SetPairedBracketDirection(Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair@,Avalonia.Media.TextFormatting.Unicode.BidiClass)">
            <summary>
            Sets the direction of a bracket pair, including setting the direction of
            NSM's inside the brackets and following.
            </summary>
            <param name="pairedBracket">The paired brackets</param>
            <param name="direction">The resolved direction for the bracket pair</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.ResetWhitespaceLevels">
            <summary>
            Resets whitespace levels. Implements rule L1
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.AssignLevelsToCodePointsRemovedByX9">
            <summary>
            Assign levels to any characters that would be have been
            removed by rule X9.  The idea is to keep level runs together
            that would otherwise be broken by an interfering isolate/embedding
            control character.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.IsWhitespace(Avalonia.Media.TextFormatting.Unicode.BidiClass)">
            <summary>
            Check if a directionality type represents whitespace
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.DirectionFromLevel(System.Int32)">
            <summary>
            Convert a level to a direction where odd is RTL and
            even is LTR
            </summary>
            <param name="level">The level to convert</param>
            <returns>A directionality</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.IsRemovedByX9(Avalonia.Media.TextFormatting.Unicode.BidiClass)">
            <summary>
            Helper to check if a directionality is removed by rule X9
            </summary>
            <param name="biDiClass">The bidi type to check</param>
            <returns>True if rule X9 would remove this character; otherwise false</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.IsNeutralClass(Avalonia.Media.TextFormatting.Unicode.BidiClass)">
            <summary>
            Check if a a directionality is neutral for rules N1 and N2
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.GetStrongClassN0(Avalonia.Media.TextFormatting.Unicode.BidiClass)">
            <summary>
            Maps a direction to a strong class for rule N0
            </summary>
            <param name="direction">The direction to map</param>
            <returns>A strong direction - R, L or ON</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.Reset">
            <summary>
            Resets the bidi algorithm to a clean state.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair">
            <summary>
            Hold the start and end index of a pair of brackets
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair"/> struct.
            </summary>
            <param name="openingIndex">Index of the opening bracket</param>
            <param name="closingIndex">Index of the closing bracket</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair.OpeningIndex">
            <summary>
            Gets the index of the opening bracket
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.BracketPair.ClosingIndex">
            <summary>
            Gets the index of the closing bracket
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.Status">
            <summary>
            Status stack entry used while resolving explicit
            embedding levels
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.BidiAlgorithm.LevelRun">
            <summary>
            Provides information about a level run - a continuous
            sequence of equal levels.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.BidiData">
            <summary>
            Represents a unicode string and all associated attributes
            for each character required for the bidirectional Unicode algorithm
            </summary>
            <remarks>To avoid allocations, this class is designed to be reused.</remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiData.Length">
            <summary>
            Gets the length of the data held by the BidiData
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiData.Classes">
            <summary>
            Gets the bidi character type of each code point
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiData.PairedBracketTypes">
            <summary>
            Gets the paired bracket type for each code point
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.BidiData.PairedBracketValues">
            <summary>
            Gets the paired bracket value for code point
            </summary>
            <remarks>
            The paired bracket values are the code points
            of each character where the opening code point
            is replaced with the closing code point for easier
            matching.  Also, bracket code points are mapped
            to their canonical equivalents
            </remarks>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiData.Append(System.ReadOnlySpan{System.Char})">
            <summary>
            Appends text to the bidi data.
            </summary>
            <param name="text">The text to process.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiData.SaveTypes">
            <summary>
            Save the Types and PairedBracketTypes of this BiDiData
            </summary>
            <remarks>
            This is used when processing embedded style runs with
            BiDiClass overrides. Text layout process saves the data,
            overrides the style runs to neutral, processes the bidi
            data for the entire paragraph and then restores this data
            before processing the embedded runs.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiData.RestoreTypes">
            <summary>
            Restore the data saved by SaveTypes
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiData.GetTempLevelBuffer(System.Int32)">
            <summary>
            Gets a temporary level buffer. Used by the text layout process when
            resolving style runs with different BiDiClass.
            </summary>
            <param name="length">Length of the required ExpandableBuffer</param>
            <returns>An uninitialized level ExpandableBuffer</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.BidiData.Reset">
            <summary>
            Resets the bidi data to a clean state.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.ReplacementCodepoint">
            <summary>
            The replacement codepoint that is used for non supported values.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.Codepoint.#ctor(System.UInt32)">
            <summary>
            Creates a new instance of <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> with the specified value.
            </summary>
            <param name="value">The codepoint value.</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.Value">
            <summary>
            Get the codepoint's value.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.GeneralCategory">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.GeneralCategory"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.Script">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Script"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.BiDiClass">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BidiClass"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.PairedBracketType">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.LineBreakClass">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.LineBreakClass"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.GraphemeBreakClass">
            <summary>
            Gets the <see cref="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.GraphemeBreakClass"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.IsBreakChar">
            <summary>
            Determines whether this <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> is a break char.
            </summary>
            <returns>
            <c>true</c> if [is break character]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.IsWhiteSpace">
            <summary>
            Determines whether this <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> is white space.
            </summary>
            <returns>
            <c>true</c> if [is whitespace]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.Codepoint.GetCanonicalType(Avalonia.Media.TextFormatting.Unicode.Codepoint)">
            <summary>
            Gets the canonical representation of a given codepoint.
            <see href="https://www.unicode.org/L2/L2013/13123-norm-and-bpa.pdf"/>
            </summary>
            <param name="codePoint">The code point to be mapped.</param>
            <returns>The mapped canonical code point, or the passed <paramref name="codePoint"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.Codepoint.TryGetPairedBracket(Avalonia.Media.TextFormatting.Unicode.Codepoint@)">
            <summary>
            Gets the codepoint representing the bracket pairing for this instance.
            </summary>
            <param name="codepoint">
            When this method returns, contains the codepoint representing the bracket pairing for this instance;
            otherwise, the default value for the type of the <paramref name="codepoint"/> parameter.
            This parameter is passed uninitialized.
            .</param>
            <returns><see langword="true"/> if this instance has a bracket pairing; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.Codepoint.ReadAt(System.ReadOnlySpan{System.Char},System.Int32,System.Int32@)">
            <summary>
            Reads the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> at specified position.
            </summary>
            <param name="text">The buffer to read from.</param>
            <param name="index">The index to read at.</param>
            <param name="count">The count of character that were read.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.Codepoint.IsInRangeInclusive(Avalonia.Media.TextFormatting.Unicode.Codepoint,System.UInt32,System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="cp"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.CodepointEnumerator.MoveNext(Avalonia.Media.TextFormatting.Unicode.Codepoint@)">
            <summary>
            Moves to the next <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.Grapheme">
            <summary>
            Represents the smallest unit of a writing system of any given language.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Grapheme.FirstCodepoint">
            <summary>
            The first <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> of the grapheme cluster.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Grapheme.Offset">
            <summary>
            Gets the starting code unit offset of this grapheme inside its containing text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Grapheme.Length">
            <summary>
            Gets the length of this grapheme, in code units.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.GraphemeEnumerator._currentType">
            <summary>
            Will be <see cref="F:Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass.Other"/> if invalid data or EOF reached.
            Caller shouldn't need to special-case this since the normal rules will halt on this condition.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.GraphemeEnumerator.MoveNext(Avalonia.Media.TextFormatting.Unicode.Grapheme@)">
            <summary>
            Moves to the next <see cref="T:Avalonia.Media.TextFormatting.Unicode.Grapheme"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.LineBreak">
            <summary>
            Information about a potential line break position
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.LineBreak.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="positionMeasure">The code point index to measure to</param>
            <param name="positionWrap">The code point index to actually break the line at</param>
            <param name="required">True if this is a required line break; otherwise false</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.LineBreak.PositionMeasure">
            <summary>
            The break position, before any trailing whitespace
            </summary>
            <remarks>
            This doesn't include trailing whitespace
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.LineBreak.PositionWrap">
            <summary>
            The break position, after any trailing whitespace
            </summary>
            <remarks>
            This includes trailing whitespace
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.LineBreak.Required">
            <summary>
            True if there should be a forced line break here
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.LineBreakEnumerator">
            <summary>
            Implementation of the Unicode Line Break Algorithm. UAX:14
            <see href="https://www.unicode.org/reports/tr14/tr14-37.html"/>
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.DIBRK">
            <summary>
            Direct break opportunity
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.INBRK">
            <summary>
            Indirect break opportunity
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.CIBRK">
            <summary>
            Indirect break opportunity for combining marks
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.CPBRK">
            <summary>
            Prohibited break for combining marks
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.PRBRK">
            <summary>
            Prohibited break
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.UnicodeData">
            <summary>
                Helper for looking up unicode character class information
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetGeneralCategory(System.UInt32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.GeneralCategory"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's general category.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetScript(System.UInt32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Script"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's script.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetBiDiClass(System.UInt32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BidiClass"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's biDi class.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetBiDiPairedBracketType(System.UInt32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's paired bracket type.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetBiDiPairedBracket(System.UInt32)">
            <summary>
            Gets the paired bracket for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's paired bracket.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetLineBreakClass(System.UInt32)">
            <summary>
            Gets the line break class for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's line break class.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetGraphemeClusterBreak(System.UInt32)">
            <summary>
            Gets the grapheme break type for the Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's grapheme break type.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie"/> class.
            </summary>
            <param name="rawData">The uncompressed trie data.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie"/> class.
            </summary>
            <param name="stream">The stream containing the data.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie.#ctor(System.UInt32[],System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie"/> class.
            </summary>
            <param name="data">The uncompressed trie data.</param>
            <param name="highStart">The start of the last range which ends at U+10ffff.</param>
            <param name="errorValue">The value for out-of-range code points and illegal UTF-8.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie"/> to the stream in a compressed format.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeTrie.Get(System.UInt32)">
            <summary>
            Get the value for a code point as stored in the trie.
            </summary>
            <param name="codePoint">The code point.</param>
            <returns>The <see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.UnshapedTextRun">
            <summary>
            A group of characters that can be shaped.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.WrappingTextLineBreak">
            <summary>Represents a line break that occurred due to wrapping.</summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.WrappingTextLineBreak.AcquireRemainingRuns">
            <summary>
            Gets the remaining runs from this line break, and clears them from this line break.
            </summary>
            <returns>A list of text runs.</returns>
        </member>
        <member name="T:Avalonia.Media.TextHitTestResult">
            <summary>
            Holds a hit test result from a <see cref="T:Avalonia.Media.TextFormatting.TextLayout"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.CharacterHit">
            <summary>
            Gets the character hit of the hit test result.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.IsInside">
            <summary>
            Gets a value indicating whether the point is inside the bounds of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.TextPosition">
            <summary>
            Gets the index of the hit character in the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.IsTrailing">
            <summary>
            Gets a value indicating whether the hit is on the trailing edge of the character.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextTrimming">
            <summary>
            Describes how text is trimmed when it overflows.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextTrimming.None">
            <summary>
            Text is not trimmed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextTrimming.CharacterEllipsis">
            <summary>
            Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextTrimming.WordEllipsis">
            <summary>
            Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextTrimming.PrefixCharacterEllipsis">
            <summary>
            Text is trimmed after a given prefix length. An ellipsis (...) is drawn in between prefix and suffix and represents remaining text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextTrimming.LeadingCharacterEllipsis">
            <summary>
            Text is trimmed at a character boundary starting from the beginning. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextTrimming.CreateCollapsingProperties(Avalonia.Media.TextCollapsingCreateInfo)">
            <summary>
            Creates properties that will be used for collapsing lines of text.
            </summary>
            <param name="createInfo">Contextual info about text that will be collapsed.</param>
        </member>
        <member name="M:Avalonia.Media.TextTrimming.Parse(System.String)">
            <summary>
            Parses a text trimming string. Names must match static properties defined in this class.
            </summary>
            <param name="s">The text trimming string.</param>
            <returns>The <see cref="T:Avalonia.Media.TextTrimming"/>.</returns>
        </member>
        <member name="T:Avalonia.Media.TextWrapping">
            <summary>
            Controls the wrapping mode of text.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextWrapping.NoWrap">
            <summary>
            Text should not wrap.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextWrapping.Wrap">
            <summary>
            Text can wrap.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextWrapping.WrapWithOverflow">
            <summary>
            Line-breaking occurs if the line overflows the available block width.
            However, a line may overflow the block width if the line breaking algorithm
            cannot determine a break opportunity, as in the case of a very long word.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TileMode">
            <summary>
            Describes how a <see cref="T:Avalonia.Media.TileBrush"/> is tiled.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.None">
            <summary>
            A single repeat of the content will be displayed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.FlipX">
            <summary>
            The content will be repeated horizontally, with alternate tiles mirrored.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.FlipY">
            <summary>
            The content will be repeated vertically, with alternate tiles mirrored.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.FlipXY">
            <summary>
            The content will be repeated horizontally and vertically, with alternate tiles mirrored.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.Tile">
            <summary>
            The content will be repeated.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TileBrush">
            <summary>
            Base class for brushes which display repeating images.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.AlignmentXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.AlignmentX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.AlignmentYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.AlignmentY"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.DestinationRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.DestinationRect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.SourceRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.SourceRect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.Stretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.TileModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.TileMode"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.AlignmentX">
            <summary>
            Gets or sets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.AlignmentY">
            <summary>
            Gets or sets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.DestinationRect">
            <summary>
            Gets or sets the rectangle on the destination in which to paint a tile.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.SourceRect">
            <summary>
            Gets or sets the rectangle of the source image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.Stretch">
            <summary>
            Gets or sets a value controlling how the source rectangle will be stretched to fill
            the destination rect.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.TileMode">
            <summary>
            Gets or sets the brush's tile mode.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Transform">
            <summary>
            Represents a transform on an <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Media.Transform.Changed">
            <summary>
            Raised when the transform changes.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transform.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.Transform"/> string.
            </summary>
            <param name="s">Six comma-delimited double values that describe the new <see cref="T:Avalonia.Media.Transform"/>. For details check <see cref="M:Avalonia.Matrix.Parse(System.String)"/> </param>
            <returns>The <see cref="T:Avalonia.Media.Transform"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Transform.RaiseChanged">
            <summary>
            Raises the <see cref="E:Avalonia.Media.Transform.Changed"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transform.ToImmutable">
            <summary>
            Converts a transform to an immutable transform.
            </summary>
            <returns>The immutable transform</returns>
        </member>
        <member name="M:Avalonia.Media.Transform.ToString">
            <summary>
            Returns a String representing this transform matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:Avalonia.Media.Transformation.TransformOperation">
            <summary>
            Represents a single primitive transform (like translation, rotation, scale, etc.).
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transformation.TransformOperation.IsIdentity">
            <summary>
            Returns whether operation produces the identity matrix.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transformation.TransformOperation.Bake">
            <summary>
            Bakes this operation to a transform matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transformation.TransformOperation.Identity">
            <summary>
            Returns new identity transform operation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transformation.TransformOperation.TryInterpolate(System.Nullable{Avalonia.Media.Transformation.TransformOperation},System.Nullable{Avalonia.Media.Transformation.TransformOperation},System.Double,Avalonia.Media.Transformation.TransformOperation@)">
            <summary>
            Attempts to interpolate between two transform operations.
            </summary>
            <param name="from">Source operation.</param>
            <param name="to">Target operation.</param>
            <param name="progress">Interpolation progress.</param>
            <param name="result">Interpolation result that will be filled in when operation was successful.</param>
            <remarks>
            Based upon https://www.w3.org/TR/css-transforms-1/#interpolation-of-transform-functions.
            </remarks>
        </member>
        <member name="T:Avalonia.Media.Transformation.TransformOperations">
            <summary>
            Contains a list of <see cref="T:Avalonia.Media.Transformation.TransformOperation"/> that represent primitive transforms that will be
            applied in declared order.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transformation.TransformOperations.IsIdentity">
            <summary>
            Returns whether all operations combined together produce the identity matrix.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TransformConverter">
            <summary>
            Creates an <see cref="T:Avalonia.Media.ITransform"/> from a string representation.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TransformExtensions">
            <summary>
            Extension methods for transform classes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TransformExtensions.ToImmutable(Avalonia.Media.ITransform)">
            <summary>
            Converts a transform to an immutable transform.
            </summary>
            <param name="transform">The transform.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.Transform.ToImmutable"/> if the transform is mutable,
            otherwise <paramref name="transform"/>.
            </returns>
        </member>
        <member name="F:Avalonia.Media.TransformGroup.ChildrenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TransformGroup.Children"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TransformGroup.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Avalonia.Media.TransformGroup.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix" />.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TranslateTransform">
            <summary>
            Translates (moves) an <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TranslateTransform.XProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TranslateTransform.X"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TranslateTransform.YProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TranslateTransform.Y"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TranslateTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TranslateTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TranslateTransform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TranslateTransform"/> class.
            </summary>
            <param name="x">Gets the horizontal offset of the translate.</param>
            <param name="y">Gets the vertical offset of the translate.</param>
        </member>
        <member name="P:Avalonia.Media.TranslateTransform.X">
            <summary>
            Gets the horizontal offset of the translate.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TranslateTransform.Y">
            <summary>
            Gets the vertical offset of the translate.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TranslateTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Typeface">
            <summary>
            Represents a typeface.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Typeface.#ctor(Avalonia.Media.FontFamily,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Typeface"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
            <param name="stretch">The font stretch.</param>
        </member>
        <member name="M:Avalonia.Media.Typeface.#ctor(System.String,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Typeface"/> class.
            </summary>
            <param name="fontFamilyName">The name of the font family.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
            <param name="stretch">The font stretch.</param>
        </member>
        <member name="P:Avalonia.Media.Typeface.FontFamily">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.Style">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.Weight">
            <summary>
            Gets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.Stretch">
            <summary>
            Gets the font stretch.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.GlyphTypeface">
            <summary>
            Gets the glyph typeface.
            </summary>
            <value>
            The glyph typeface.
            </value>
        </member>
        <member name="T:Avalonia.Media.UnicodeRange">
            <summary>
            The <see cref="T:Avalonia.Media.UnicodeRange"/> descripes a set of Unicode characters.
            </summary>
        </member>
        <member name="M:Avalonia.Media.UnicodeRange.IsInRange(System.Int32)">
            <summary>
            Determines if given value is inside the range.
            </summary>
            <param name="value">The value to verify.</param>
            <returns>
            <c>true</c> If given value is inside the range, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.UnicodeRange.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.UnicodeRange"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>The parsed <see cref="T:Avalonia.Media.UnicodeRange"/>.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="P:Avalonia.Media.UnicodeRangeSegment.Start">
            <summary>
            Get the start of the segment.
            </summary>
        </member>
        <member name="P:Avalonia.Media.UnicodeRangeSegment.End">
            <summary>
            Get the end of the segment.
            </summary>
        </member>
        <member name="M:Avalonia.Media.UnicodeRangeSegment.IsInRange(System.Int32)">
            <summary>
            Determines if given value is inside the range segment.
            </summary>
            <param name="value">The value to verify.</param>
            <returns>
            <c>true</c> If given value is inside the range segment, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.UnicodeRangeSegment.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.UnicodeRangeSegment"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>The parsed <see cref="T:Avalonia.Media.UnicodeRangeSegment"/>.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:Avalonia.Media.VisualBrush">
            <summary>
            Paints an area with an <see cref="P:Avalonia.Media.VisualBrush.Visual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.VisualBrush.VisualProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.VisualBrush.Visual"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.VisualBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.VisualBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.VisualBrush.#ctor(Avalonia.Visual)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.VisualBrush"/> class.
            </summary>
            <param name="visual">The visual to draw.</param>
        </member>
        <member name="P:Avalonia.Media.VisualBrush.Visual">
            <summary>
            Gets or sets the visual to draw.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Rotate3DTransform">
            <summary>
             Non-Affine 3D transformation for rotating a visual around a definable axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.AngleXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.AngleX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.AngleYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.AngleY"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.AngleZProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.AngleZ"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.CenterXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.CenterX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.CenterYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.CenterY"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.CenterZProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.CenterZ"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Rotate3DTransform.DepthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Rotate3DTransform.Depth"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Rotate3DTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Rotate3DTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Rotate3DTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Rotate3DTransform"/> class.
            </summary>
            <param name="angleX">The rotation around the X-Axis</param>
            <param name="angleY">The rotation around the Y-Axis</param>
            <param name="angleZ">The rotation around the Z-Axis</param>
            <param name="centerX">The origin of the X-Axis</param>
            <param name="centerY">The origin of the Y-Axis</param>
            <param name="centerZ">The origin of the Z-Axis</param>
            <param name="depth">The depth of the 3D effect</param>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.AngleX">
            <summary>
            Sets the rotation around the X-Axis
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.AngleY">
            <summary>
            Sets the rotation around the Y-Axis
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.AngleZ">
            <summary>
             Sets the rotation around the Z-Axis
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.CenterX">
            <summary>
             Moves the origin the X-Axis rotates around
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.CenterY">
            <summary>
             Moves the origin the Y-Axis rotates around
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.CenterZ">
            <summary>
             Moves the origin the Z-Axis rotates around
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.Depth">
            <summary>
             Affects the depth of the rotation effect
            </summary>
        </member>
        <member name="P:Avalonia.Media.Rotate3DTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>. 
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Classes">
            <summary>
            Holds a collection of style classes for an <see cref="T:Avalonia.StyledElement"/>.
            </summary>
            <remarks>
            Similar to CSS, each control may have any number of styling classes applied.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
            <param name="items">The initial items.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
            <param name="items">The initial items.</param>
        </member>
        <member name="P:Avalonia.Controls.Classes.ListenerCount">
            <summary>
            Gets the number of listeners subscribed to this collection for unit testing purposes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Classes.Parse(System.String)">
            <summary>
            Parses a classes string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Controls.Classes"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Classes.Add(System.String)">
            <summary>
            Adds a style class to the collection.
            </summary>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a style classes to the collection.
            </summary>
            <param name="names">The class names.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.Clear">
            <summary>
            Removes all non-pseudoclasses from the collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Classes.Insert(System.Int32,System.String)">
            <summary>
            Inserts a style class into the collection.
            </summary>
            <param name="index">The index to insert the class at.</param>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inserts style classes into the collection.
            </summary>
            <param name="index">The index to insert the class at.</param>
            <param name="names">The class names.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.Remove(System.String)">
            <summary>
            Removes a style class from the collection.
            </summary>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes style classes from the collection.
            </summary>
            <param name="names">The class name.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveAt(System.Int32)">
            <summary>
            Removes a style class from the collection.
            </summary>
            <param name="index">The index of the class in the collection.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes style classes from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Replace(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes all non-pseudoclasses in the collection and adds a new set.
            </summary>
            <param name="source">The new contents of the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Avalonia#Controls#IPseudoClasses#Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Classes.Avalonia#Controls#IPseudoClasses#Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Classes.Set(System.String,System.Boolean)">
            <summary>
            Adds a or removes a  style class to/from the collection.
            </summary>
            <param name="name">The class names.</param>
            <param name="value">If true adds the class, if false, removes it.</param>
            <remarks>
            Only standard classes may be added or removed via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.IClassesChangedListener">
            <summary>
            Internal interface for listening to changes in <see cref="T:Avalonia.Controls.Classes"/> in a more
            performant manner than subscribing to CollectionChanged.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IClassesChangedListener.Changed">
            <summary>
            Notifies the listener that the <see cref="T:Avalonia.Controls.Classes"/> collection has changed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.INameScope">
            <summary>
            Defines a name scope.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.INameScope.Register(System.String,System.Object)">
            <summary>
            Registers an element in the name scope.
            </summary>
            <param name="name">The element name.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Avalonia.Controls.INameScope.FindAsync(System.String)">
            <summary>
            Finds a named element in the name scope, waits for the scope to be completely populated before returning null
            Returned task is configured to run any continuations synchronously.
            </summary>
            <param name="name">The name.</param>
            <returns>The element, or null if the name was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.INameScope.Find(System.String)">
            <summary>
            Finds a named element in the name scope, returns immediately, doesn't traverse the name scope stack
            </summary>
            <param name="name">The name.</param>
            <returns>The element, or null if the name was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.INameScope.Complete">
            <summary>
            Marks the name scope as completed, no further registrations will be allowed
            </summary>
        </member>
        <member name="P:Avalonia.Controls.INameScope.IsCompleted">
            <summary>
            Returns whether further registrations are allowed on the scope
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IPseudoClasses">
            <summary>
            Exposes an interface for setting pseudoclasses on a <see cref="T:Avalonia.Controls.Classes"/> collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Add(System.String)">
            <summary>
            Adds a pseudoclass to the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Remove(System.String)">
            <summary>
            Removes a pseudoclass from the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Contains(System.String)">
            <summary>
            Returns whether a pseudoclass is present in the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
            <returns>Whether the pseudoclass is present.</returns>
        </member>
        <member name="T:Avalonia.Controls.IResourceDictionary">
            <summary>
            An indexed dictionary of resources.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IResourceDictionary.MergedDictionaries">
            <summary>
            Gets a collection of child resource dictionaries.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IResourceDictionary.ThemeDictionaries">
            <summary>
            Gets a collection of merged resource dictionaries that are specifically keyed and composed to address theme scenarios.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IResourceHost">
            <summary>
            Represents an element which hosts resources.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.StyledElement"/> and `Application`.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.IResourceHost.ResourcesChanged">
            <summary>
            Raised when the resources change on the element or an ancestor of the element.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IResourceHost.NotifyHostedResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <summary>
            Notifies the resource host that one or more of its hosted resources has changed.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself. It is called when the resources hosted by this element have
            changed, and is usually called by a resource dictionary or style hosted by the element
            in response to a resource being added or removed.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.IResourceNode">
            <summary>
            Represents an object that can be queried for resources.
            </summary>
            <remarks>
            The interface represents a common interface for both controls that host resources
            (<see cref="T:Avalonia.Controls.IResourceHost"/>) and resource providers such as <see cref="T:Avalonia.Controls.ResourceDictionary"/>
            (see <see cref="T:Avalonia.Controls.IResourceProvider"/>).
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IResourceNode.HasResources">
            <summary>
            Gets a value indicating whether the object has resources.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IResourceNode.TryGetResource(System.Object,Avalonia.Styling.ThemeVariant,System.Object@)">
            <summary>
            Tries to find a resource within the object.
            </summary>
            <param name="key">The resource key.</param>
            <param name="theme">Theme used to select theme dictionary.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, null.
            </param>
            <returns>
            True if the resource if found, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.IResourceProvider">
            <summary>
            Represents an object that can be queried for resources but does not appear in the logical tree.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.Controls.ResourceDictionary"/>, <see cref="T:Avalonia.Styling.Style"/> and
            <see cref="T:Avalonia.Styling.Styles"/>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IResourceProvider.Owner">
            <summary>
            Gets the owner of the resource provider.
            </summary>
            <remarks>
            If multiple owners are added, returns the first.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.IResourceProvider.OwnerChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.IResourceProvider.Owner"/> of the resource provider changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IResourceProvider.AddOwner(Avalonia.Controls.IResourceHost)">
            <summary>
            Adds an owner to the resource provider.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Avalonia.Controls.IResourceProvider.RemoveOwner(Avalonia.Controls.IResourceHost)">
            <summary>
            Removes a resource provider owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="T:Avalonia.Controls.ISetInheritanceParent">
            <summary>
            Defines an interface through which a <see cref="T:Avalonia.StyledElement"/>'s inheritance parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for advanced scenarios only.
            Additionally, <see cref="T:Avalonia.Controls.ISetLogicalParent"/> also sets the inheritance parent; this
            interface is only needed where the logical and inheritance parents differ.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetInheritanceParent.SetParent(Avalonia.AvaloniaObject)">
            <summary>
            Sets the control's inheritance parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Avalonia.Controls.ISetLogicalParent">
            <summary>
            Defines an interface through which a <see cref="T:Avalonia.StyledElement"/>'s logical parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for advanced scenarios only.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetLogicalParent.SetParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Sets the control's parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Avalonia.Controls.IThemeVariantProvider">
            <summary>
            Resource provider with theme variant awareness.
            Can be used with <see cref="P:Avalonia.Controls.IResourceDictionary.ThemeDictionaries"/>.
            </summary>
            <remarks>
            This is a helper interface for the XAML compiler to make Key property accessibly by the markup extensions.
            Which means, it can only be used with ResourceDictionaries and markup extensions in the XAML code.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IThemeVariantProvider.Key">
            <summary>
            Key property set by the compiler.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Metadata.PseudoClassesAttribute">
            <summary>
            Defines all pseudoclasses by name referenced and implemented by a control.
            </summary>
            <remarks>
            This is currently used for code-completion in certain IDEs.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Metadata.PseudoClassesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Metadata.PseudoClassesAttribute"/> class.
            </summary>
            <param name="pseudoClasses">The list of pseudoclass names.</param>
        </member>
        <member name="P:Avalonia.Controls.Metadata.PseudoClassesAttribute.PseudoClasses">
            <summary>
            Gets the list of pseudoclass names.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Metadata.TemplatePartAttribute">
            <summary>
            Defines a control template part referenced by name in code.
            Template part names should begin with the "PART_" prefix.
            </summary>
            <remarks>
            Style authors should be able to identify the part type used for styling the specific control.
            The part is usually required in the style and should have a specific predefined name.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Metadata.TemplatePartAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Metadata.TemplatePartAttribute"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Metadata.TemplatePartAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Metadata.TemplatePartAttribute"/> class.
            </summary>
            <param name="name">The part name used by the class to identify a required element in the style.</param>
            <param name="type">The type of the element that should be used as a part with name.</param>
        </member>
        <member name="P:Avalonia.Controls.Metadata.TemplatePartAttribute.Name">
            <summary>
            Gets or sets the part name used by the class to identify a required element in the style.
            Template part names should begin with the "PART_" prefix.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Metadata.TemplatePartAttribute.Type">
            <summary>
            Gets or sets the type of the element that should be used as a part with name specified
            in <see cref="P:Avalonia.Controls.Metadata.TemplatePartAttribute.Name"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.NameScope">
            <summary>
            Implements a name scope.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NameScope.NameScopeProperty">
            <summary>
            Defines the NameScope attached property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NameScope.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.NameScope.GetNameScope(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.NameScope.NameScopeProperty"/> on a styled element.
            </summary>
            <param name="styled">The styled element.</param>
            <returns>The value of the NameScope attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScope.SetNameScope(Avalonia.StyledElement,Avalonia.Controls.INameScope)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.NameScope.NameScopeProperty"/> on a styled element.
            </summary>
            <param name="styled">The styled element.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.NameScope.Register(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NameScope.Find(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.NameScopeExtensions">
            <summary>
            Extension methods for <see cref="T:Avalonia.Controls.INameScope"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Find``1(Avalonia.Controls.INameScope,System.String)">
            <summary>
            Finds a named element in an <see cref="T:Avalonia.Controls.INameScope"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="nameScope">The name scope.</param>
            <param name="name">The name.</param>
            <returns>The named element or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Find``1(Avalonia.LogicalTree.ILogical,System.String)">
            <summary>
            Finds a named element in an <see cref="T:Avalonia.Controls.INameScope"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="anchor">The control to take the name scope from.</param>
            <param name="name">The name.</param>
            <returns>The named element or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Get``1(Avalonia.Controls.INameScope,System.String)">
            <summary>
            Gets a named element from an <see cref="T:Avalonia.Controls.INameScope"/> or throws if no element of the
            requested name was found.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="nameScope">The name scope.</param>
            <param name="name">The name.</param>
            <returns>The named element.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Get``1(Avalonia.LogicalTree.ILogical,System.String)">
            <summary>
            Gets a named element from an <see cref="T:Avalonia.Controls.INameScope"/> or throws if no element of the
            requested name was found.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="anchor">The control to take the name scope from.</param>
            <param name="name">The name.</param>
            <returns>The named element.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeLocator.Track(Avalonia.Controls.INameScope,System.String)">
            <summary>
            Tracks a named control relative to another control.
            </summary>
            <param name="scope">The scope relative from which the object should be resolved.</param>
            <param name="name">The name of the object to find.</param>
        </member>
        <member name="M:Avalonia.Controls.PseudolassesExtensions.Set(Avalonia.Controls.IPseudoClasses,System.String,System.Boolean)">
            <summary>
            Adds or removes a pseudoclass depending on a boolean value.
            </summary>
            <param name="classes">The pseudoclasses collection.</param>
            <param name="name">The name of the pseudoclass to set.</param>
            <param name="value">True to add the pseudoclass or false to remove.</param>
        </member>
        <member name="T:Avalonia.Controls.ResourceDictionary">
            <summary>
            An indexed dictionary of resources.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ResourceDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ResourceDictionary"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ResourceDictionary.#ctor(Avalonia.Controls.IResourceHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ResourceDictionary"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.FindResource(Avalonia.Controls.IResourceHost,System.Object)">
            <summary>
            Finds the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="key">The resource key.</param>
            <returns>The resource, or <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/> if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.TryFindResource(Avalonia.Controls.IResourceHost,System.Object,System.Object@)">
            <summary>
            Tries to the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="key">The resource key.</param>
            <param name="value">On return, contains the resource if found, otherwise null.</param>
            <returns>True if the resource was found; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.FindResource(Avalonia.Controls.IResourceHost,Avalonia.Styling.ThemeVariant,System.Object)">
            <summary>
            Finds the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="theme">Theme used to select theme dictionary.</param>
            <param name="key">The resource key.</param>
            <returns>The resource, or <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/> if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.TryFindResource(Avalonia.Controls.IResourceHost,System.Object,Avalonia.Styling.ThemeVariant,System.Object@)">
            <summary>
            Tries to the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="key">The resource key.</param>
            <param name="theme">Theme used to select theme dictionary.</param>
            <param name="value">On return, contains the resource if found, otherwise null.</param>
            <returns>True if the resource was found; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.TryGetResource(Avalonia.Controls.IResourceHost,System.Object,System.Object@)">
            <inheritdoc cref="M:Avalonia.Controls.IResourceNode.TryGetResource(System.Object,Avalonia.Styling.ThemeVariant,System.Object@)" />
        </member>
        <member name="T:Avalonia.CornerRadius">
            <summary>
            Represents the radii of a rectangle's corners.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.TopLeft">
            <summary>
            Radius of the top left corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.TopRight">
            <summary>
            Radius of the top right corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.BottomRight">
            <summary>
            Radius of the bottom right corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.BottomLeft">
            <summary>
            Radius of the bottom left corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.IsUniform">
            <summary>
            Gets a value indicating whether all corner radii are equal.
            </summary>
        </member>
        <member name="M:Avalonia.CornerRadius.Equals(Avalonia.CornerRadius)">
            <summary>
            Returns a boolean indicating whether the corner radius is equal to the other given corner radius.
            </summary>
            <param name="other">The other corner radius to test equality against.</param>
            <returns>True if this corner radius is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.CornerRadius.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this corner radius instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this corner radius; False otherwise.</returns>
        </member>
        <member name="T:Avalonia.Data.AssignBindingAttribute">
            <summary>
            Signifies that a binding can be assigned to a property.
            </summary>
            <remarks>
            Usually in markup, when a binding is set for a property that property will be bound. 
            Applying this attribute to a property indicates that the binding should be assigned to 
            the property rather than bound.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.BindingChainException">
            <summary>
            An exception returned through <see cref="T:Avalonia.Data.BindingNotification"/> signaling that a
            requested binding expression could not be evaluated because of a null in one of the links
            of the binding chain.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingChainException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingChainException"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingChainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingChainException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Avalonia.Data.BindingChainException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingChainException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="expression">The expression.</param>
            <param name="errorPoint">
            The point in the expression at which the error was encountered.
            </param>
        </member>
        <member name="P:Avalonia.Data.BindingChainException.Expression">
            <summary>
            Gets the expression that could not be evaluated.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingChainException.ExpressionErrorPoint">
            <summary>
            Gets the point in the expression at which the error occurred.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingChainException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.BindingMode">
            <summary>
            Defines possible binding modes.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.Default">
            <summary>
            Uses the default binding mode specified for the property.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.OneWay">
            <summary>
            Binds one way from source to target.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.TwoWay">
            <summary>
            Binds two-way with the initial value coming from the target.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.OneTime">
            <summary>
            Updates the target when the application starts or when the data context changes.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.OneWayToSource">
            <summary>
            Binds one way from target to source.
            </summary>
        </member>
        <member name="T:Avalonia.Data.BindingErrorType">
            <summary>
            Defines the types of binding errors for a <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingErrorType.None">
            <summary>
            There was no error.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingErrorType.Error">
            <summary>
            There was a binding error.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingErrorType.DataValidationError">
            <summary>
            There was a data validation error.
            </summary>
        </member>
        <member name="T:Avalonia.Data.BindingNotification">
            <summary>
            Represents a binding notification that can be a valid binding value, or a binding or
            data validation error.
            </summary>
            <remarks>
            This class is very similar to <see cref="T:Avalonia.Data.BindingValue`1"/>, but where <see cref="T:Avalonia.Data.BindingValue`1"/>
            is used by typed bindings, this class is used to hold binding and data validation errors in
            untyped bindings. As Avalonia moves towards using typed bindings by default we may want to remove
            this class.
            </remarks>
        </member>
        <member name="F:Avalonia.Data.BindingNotification.Null">
            <summary>
            A binding notification representing the null value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingNotification.UnsetValue">
            <summary>
            A binding notification representing <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingNotification"/> class.
            </summary>
            <param name="value">The binding value.</param>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.#ctor(System.Exception,Avalonia.Data.BindingErrorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingNotification"/> class.
            </summary>
            <param name="error">The binding error.</param>
            <param name="errorType">The type of the binding error.</param>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.#ctor(System.Exception,Avalonia.Data.BindingErrorType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingNotification"/> class.
            </summary>
            <param name="error">The binding error.</param>
            <param name="errorType">The type of the binding error.</param>
            <param name="fallbackValue">The fallback value.</param>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.Value">
            <summary>
            Gets the value that should be passed to the target when <see cref="P:Avalonia.Data.BindingNotification.HasValue"/>
            is true.
            </summary>
            <remarks>
            If this property is read when <see cref="P:Avalonia.Data.BindingNotification.HasValue"/> is false then it will return
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.HasValue">
            <summary>
            Gets a value indicating whether <see cref="P:Avalonia.Data.BindingNotification.Value"/> should be pushed to the target.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.Error">
            <summary>
            Gets the error that occurred on the source, if any.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.ErrorType">
            <summary>
            Gets the type of error that <see cref="P:Avalonia.Data.BindingNotification.Error"/> represents, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.op_Equality(Avalonia.Data.BindingNotification,Avalonia.Data.BindingNotification)">
            <summary>
            Compares two instances of <see cref="T:Avalonia.Data.BindingNotification"/> for equality.
            </summary>
            <param name="a">The first instance.</param>
            <param name="b">The second instance.</param>
            <returns>true if the two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.op_Inequality(Avalonia.Data.BindingNotification,Avalonia.Data.BindingNotification)">
            <summary>
            Compares two instances of <see cref="T:Avalonia.Data.BindingNotification"/> for inequality.
            </summary>
            <param name="a">The first instance.</param>
            <param name="b">The second instance.</param>
            <returns>true if the two instances are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ExtractValue(System.Object)">
            <summary>
            Gets a value from an object that may be a <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="o">The object.</param>
            <returns>The value.</returns>
            <remarks>
            If <paramref name="o"/> is a <see cref="T:Avalonia.Data.BindingNotification"/> then returns the binding
            notification's <see cref="P:Avalonia.Data.BindingNotification.Value"/>. If not, returns the object unchanged.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ExtractError(System.Object)">
            <summary>
            Gets an exception from an object that may be a <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="o">The object.</param>
            <returns>The value.</returns>
            <remarks>
            If <paramref name="o"/> is a <see cref="T:Avalonia.Data.BindingNotification"/> then returns the binding
            notification's <see cref="P:Avalonia.Data.BindingNotification.Error"/>. If not, returns the object unchanged.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.Equals(System.Object)">
            <summary>
            Compares an object to an instance of <see cref="T:Avalonia.Data.BindingNotification"/> for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.Equals(Avalonia.Data.BindingNotification)">
            <summary>
            Compares a value to an instance of <see cref="T:Avalonia.Data.BindingNotification"/> for equality.
            </summary>
            <param name="other">The value to compare.</param>
            <returns>true if the two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.GetHashCode">
            <summary>
            Gets the hash code for this instance of <see cref="T:Avalonia.Data.BindingNotification"/>. 
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.AddError(System.Exception,Avalonia.Data.BindingErrorType)">
            <summary>
            Adds an error to the <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="e">The error to add.</param>
            <param name="type">The error type.</param>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ClearValue">
            <summary>
            Removes the <see cref="P:Avalonia.Data.BindingNotification.Value"/> and makes <see cref="P:Avalonia.Data.BindingNotification.HasValue"/> return null.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.SetValue(System.Object)">
            <summary>
            Sets the <see cref="P:Avalonia.Data.BindingNotification.Value"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.BindingOperations.Apply(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,Avalonia.Data.InstancedBinding,System.Object)">
            <summary>
            Applies an <see cref="T:Avalonia.Data.InstancedBinding"/> a property on an <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
            <param name="target">The target object.</param>
            <param name="property">The property to bind.</param>
            <param name="binding">The instanced binding.</param>
            <param name="anchor">
            An optional anchor from which to locate required context. When binding to objects that
            are not in the logical tree, certain types of binding need an anchor into the tree in 
            order to locate named controls or resources. The <paramref name="anchor"/> parameter 
            can be used to provide this context.
            </param>
            <returns>An <see cref="T:System.IDisposable"/> which can be used to cancel the binding.</returns>
        </member>
        <member name="M:Avalonia.Data.DoNothingType.ToString">
            <summary>
            Returns the string representation of <see cref="F:Avalonia.Data.BindingOperations.DoNothing"/>.
            </summary>
            <returns>The string "(do nothing)".</returns>
        </member>
        <member name="T:Avalonia.Data.BindingPriority">
            <summary>
            The priority of a value or binding.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Animation">
            <summary>
            A value that comes from an animation.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.LocalValue">
            <summary>
            A local value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.StyleTrigger">
            <summary>
            A triggered style value.
            </summary>
            <remarks>
            A style trigger is a selector such as .class which overrides a
            <see cref="F:Avalonia.Data.BindingPriority.Template"/> value. In this way, a control can have, e.g. a Background from
            the template which changes when the control has the :pointerover class.
            </remarks>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Template">
            <summary>
            A value from the control's template.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Style">
            <summary>
            A style value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Inherited">
            <summary>
            The value is inherited from an ancestor element.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Unset">
            <summary>
            The value is uninitialized.
            </summary>
        </member>
        <member name="T:Avalonia.Data.BindingValueType">
            <summary>
            Describes the type of a <see cref="T:Avalonia.Data.BindingValue`1"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.UnsetValue">
            <summary>
            An unset value: the target property will revert to its unbound state until a new
            binding value is produced.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.DoNothing">
            <summary>
            Do nothing: the binding value will be ignored.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.Value">
            <summary>
            A simple value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.BindingError">
            <summary>
            A binding error, such as a missing source property.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.DataValidationError">
            <summary>
            A data validation error.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.BindingErrorWithFallback">
            <summary>
            A binding error with a fallback value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingValueType.DataValidationErrorWithFallback">
            <summary>
            A data validation error with a fallback value.
            </summary>
        </member>
        <member name="T:Avalonia.Data.BindingValue`1">
            <summary>
            A value passed into a binding.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <remarks>
            The avalonia binding system is typed, and as such additional state is stored in this
            structure. A binding value can be in a number of states, described by the
            <see cref="P:Avalonia.Data.BindingValue`1.Type"/> property:
            
            - <see cref="F:Avalonia.Data.BindingValueType.Value"/>: a simple value
            - <see cref="F:Avalonia.Data.BindingValueType.UnsetValue"/>: the target property will revert to its unbound
              state until a new binding value is produced. Represented by
              <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/> in an untyped context
            - <see cref="F:Avalonia.Data.BindingValueType.DoNothing"/>: the binding value will be ignored. Represented
              by <see cref="F:Avalonia.Data.BindingOperations.DoNothing"/> in an untyped context
            - <see cref="F:Avalonia.Data.BindingValueType.BindingError"/>: a binding error, such as a missing source
              property, with an optional fallback value
            - <see cref="F:Avalonia.Data.BindingValueType.DataValidationError"/>: a data validation error, with an
              optional fallback value
              
            To create a new binding value you can:
            
            - For a simple value, call the <see cref="T:Avalonia.Data.BindingValue`1"/> constructor or use an implicit
              conversion from <typeparamref name="T"/>
            - For an unset value, use <see cref="P:Avalonia.Data.BindingValue`1.Unset"/> or simply `default`
            - For other types, call one of the static factory methods
            </remarks>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingValue`1"/> struct with a type of
            <see cref="F:Avalonia.Data.BindingValueType.Value"/>
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.HasError">
            <summary>
            Gets a value indicating whether the binding value represents either a binding or data
            validation error.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.HasValue">
            <summary>
            Gets a value indicating whether the binding value has a value.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.Type">
            <summary>
            Gets the type of the binding value.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.Value">
            <summary>
            Gets the binding value or fallback value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:Avalonia.Data.BindingValue`1.HasValue"/> is false.
            </exception>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.Error">
            <summary>
            Gets the binding or data validation error.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.ToOptional">
            <summary>
            Converts the binding value to an <see cref="T:Avalonia.Data.Optional`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.ToUntyped">
            <summary>
            Converts the value to untyped representation, using <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>,
            <see cref="F:Avalonia.Data.BindingOperations.DoNothing"/> and <see cref="T:Avalonia.Data.BindingNotification"/> where
            appropriate.
            </summary>
            <returns>The untyped representation of the binding value.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.WithValue(`0)">
            <summary>
            Returns a new binding value with the specified value.
            </summary>
            <param name="value">The new value.</param>
            <returns>The new binding value.</returns>
            <exception cref="T:System.InvalidOperationException">
            The binding type is <see cref="F:Avalonia.Data.BindingValueType.UnsetValue"/> or
            <see cref="F:Avalonia.Data.BindingValueType.DoNothing"/>.
            </exception>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.GetValueOrDefault">
            <summary>
            Gets the value of the binding value if present, otherwise the default value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.GetValueOrDefault(`0)">
            <summary>
            Gets the value of the binding value if present, otherwise a default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.GetValueOrDefault``1">
            <summary>
            Gets the value if present, otherwise the default value.
            </summary>
            <returns>
            The value if present and of the correct type, `default(TResult)` if the value is
            not present or of an incorrect type.
            </returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.GetValueOrDefault``1(``0)">
            <summary>
            Gets the value of the binding value if present, otherwise a default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>
            The value if present and of the correct type, `default(TResult)` if the value is
            present but not of the correct type or null, or <paramref name="defaultValue"/> if the
            value is not present.
            </returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.FromUntyped(System.Object)">
            <summary>
            Creates a <see cref="T:Avalonia.Data.BindingValue`1"/> from an object, handling the special values
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>, <see cref="F:Avalonia.Data.BindingOperations.DoNothing"/> and
            <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="value">The untyped value.</param>
            <returns>The typed binding value.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.FromUntyped(System.Object,System.Type)">
            <summary>
            Creates a <see cref="T:Avalonia.Data.BindingValue`1"/> from an object, handling the special values
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>, <see cref="F:Avalonia.Data.BindingOperations.DoNothing"/> and
            <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="value">The untyped value.</param>
            <param name="targetType">The runtime target type.</param>
            <returns>The typed binding value.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.op_Implicit(`0)~Avalonia.Data.BindingValue{`0}">
            <summary>
            Creates a binding value from an instance of the underlying value type.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.op_Implicit(Avalonia.Data.Optional{`0})~Avalonia.Data.BindingValue{`0}">
            <summary>
            Creates a binding value from an <see cref="T:Avalonia.Data.Optional`1"/>.
            </summary>
            <param name="optional">The optional value.</param>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.Unset">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.UnsetValue"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingValue`1.DoNothing">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.DoNothing"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.BindingError(System.Exception)">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.BindingError"/>.
            </summary>
            <param name="e">The binding error.</param>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.BindingError(System.Exception,`0)">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.BindingErrorWithFallback"/>.
            </summary>
            <param name="e">The binding error.</param>
            <param name="fallbackValue">The fallback value.</param>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.BindingError(System.Exception,Avalonia.Data.Optional{`0})">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.BindingError"/> or
            <see cref="F:Avalonia.Data.BindingValueType.BindingErrorWithFallback"/>.
            </summary>
            <param name="e">The binding error.</param>
            <param name="fallbackValue">The fallback value.</param>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.DataValidationError(System.Exception)">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.DataValidationError"/>.
            </summary>
            <param name="e">The data validation error.</param>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.DataValidationError(System.Exception,`0)">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.DataValidationErrorWithFallback"/>.
            </summary>
            <param name="e">The data validation error.</param>
            <param name="fallbackValue">The fallback value.</param>
        </member>
        <member name="M:Avalonia.Data.BindingValue`1.DataValidationError(System.Exception,Avalonia.Data.Optional{`0})">
            <summary>
            Returns a binding value with a type of <see cref="F:Avalonia.Data.BindingValueType.DataValidationError"/> or
            <see cref="F:Avalonia.Data.BindingValueType.DataValidationErrorWithFallback"/>.
            </summary>
            <param name="e">The binding error.</param>
            <param name="fallbackValue">The fallback value.</param>
        </member>
        <member name="T:Avalonia.Data.Converters.BoolConverters">
            <summary>
            Provides a set of useful <see cref="T:Avalonia.Data.Converters.IValueConverter"/>s for working with bool values.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.BoolConverters.And">
            <summary>
            A multi-value converter that returns true if all inputs are true.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.BoolConverters.Or">
            <summary>
            A multi-value converter that returns true if any of the inputs is true.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.BoolConverters.Not">
            <summary>
            A value converter that returns true when input is false and false when input is true.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.DefaultValueConverter">
            <summary>
            Provides a default set of value conversions for bindings that do not specify a value
            converter.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.DefaultValueConverter.Instance">
            <summary>
            Gets an instance of a <see cref="T:Avalonia.Data.Converters.DefaultValueConverter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.DefaultValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Avalonia.Data.Converters.DefaultValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Avalonia.Data.Converters.FuncMultiValueConverter`2">
            <summary>
            A general purpose <see cref="T:Avalonia.Data.Converters.IValueConverter"/> that uses a <see cref="T:System.Func`2"/>
            to provide the converter logic.
            </summary>
            <typeparam name="TIn">The type of the inputs.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncMultiValueConverter`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.FuncValueConverter`2"/> class.
            </summary>
            <param name="convert">The convert function.</param>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncMultiValueConverter`2.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Converters.FuncValueConverter`2">
            <summary>
            A general purpose <see cref="T:Avalonia.Data.Converters.IValueConverter"/> that uses a <see cref="T:System.Func`2"/>
            to provide the converter logic.
            </summary>
            <typeparam name="TIn">The input type.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncValueConverter`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.FuncValueConverter`2"/> class.
            </summary>
            <param name="convert">The convert function.</param>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Converters.IMultiValueConverter">
            <summary>
            Converts multi-binding inputs to a final value.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.IMultiValueConverter.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts multi-binding inputs to a final value.
            </summary>
            <param name="values">The values to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
            <remarks>
            This method should not throw exceptions. If the value is not convertible, return
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>. Any exception thrown will be treated as
            an application exception.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.Converters.IValueConverter">
            <summary>
            Converts a binding value.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
            <remarks>
            This method should not throw exceptions. If the value is not convertible, return
            a <see cref="T:Avalonia.Data.BindingNotification"/> in an error state. Any exceptions thrown will be
            treated as an application exception.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.Converters.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
            <remarks>
            This method should not throw exceptions. If the value is not convertible, return
            a <see cref="T:Avalonia.Data.BindingNotification"/> in an error state. Any exceptions thrown will be
            treated as an application exception.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.Converters.ObjectConverters">
            <summary>
            Provides a set of useful <see cref="T:Avalonia.Data.Converters.IValueConverter"/>s for working with objects.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.ObjectConverters.IsNull">
            <summary>
            A value converter that returns true if the input object is a null reference.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.ObjectConverters.IsNotNull">
            <summary>
            A value converter that returns true if the input object is not null.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.StringConverters">
            <summary>
            Provides a set of useful <see cref="T:Avalonia.Data.Converters.IValueConverter"/>s for working with string values.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.StringConverters.IsNullOrEmpty">
            <summary>
            A value converter that returns true if the input string is null or an empty string.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.StringConverters.IsNotNullOrEmpty">
            <summary>
            A value converter that returns true if the input string is not null or empty.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.StringFormatMultiValueConverter">
            <summary>
            A multi-value converter which calls <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatMultiValueConverter.#ctor(System.String,Avalonia.Data.Converters.IMultiValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.StringFormatMultiValueConverter"/> class.
            </summary>
            <param name="format">The format string.</param>
            <param name="inner">
            An optional inner converter to be called before the format takes place.
            </param>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatMultiValueConverter.Inner">
            <summary>
            Gets an inner value converter which will be called before the string format takes place.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatMultiValueConverter.Format">
            <summary>
            Gets the format string.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatMultiValueConverter.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Converters.StringFormatValueConverter">
            <summary>
            A value converter which calls <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatValueConverter.#ctor(System.String,Avalonia.Data.Converters.IValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.StringFormatValueConverter"/> class.
            </summary>
            <param name="format">The format string.</param>
            <param name="inner">
            An optional inner converter to be called before the format takes place.
            </param>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatValueConverter.Inner">
            <summary>
            Gets an inner value converter which will be called before the string format takes place.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatValueConverter.Format">
            <summary>
            Gets the format string.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.BindingExpression">
            <summary>
            Binds to an expression on an object using a type value converter to convert the values
            that are sent and received.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.#ctor(Avalonia.Data.Core.ExpressionObserver,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="inner">The <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.</param>
            <param name="targetType">The type to convert the value to.</param>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.#ctor(Avalonia.Data.Core.ExpressionObserver,System.Type,Avalonia.Data.Converters.IValueConverter,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="inner">The <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="converter">The value converter to use.</param>
            <param name="converterParameter">
            A parameter to pass to <paramref name="converter"/>.
            </param>
            <param name="priority">The binding priority.</param>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.#ctor(Avalonia.Data.Core.ExpressionObserver,System.Type,System.Object,System.Object,Avalonia.Data.Converters.IValueConverter,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="inner">The <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="fallbackValue">
            The value to use when the binding is unable to produce a value.
            </param>
            <param name="targetNullValue">
            The value to use when the binding result is null.
            </param>
            <param name="converter">The value converter to use.</param>
            <param name="converterParameter">
            A parameter to pass to <paramref name="converter"/>.
            </param>
            <param name="priority">The binding priority.</param>
        </member>
        <member name="P:Avalonia.Data.Core.BindingExpression.Converter">
            <summary>
            Gets the converter to use on the expression.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.BindingExpression.ConverterParameter">
            <summary>
            Gets a parameter to pass to <see cref="P:Avalonia.Data.Core.BindingExpression.Converter"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.BindingExpression.Avalonia#IDescription#Description">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.OnNext(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.ConvertValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.ExpressionObserver">
            <summary>
            Observes and sets the value of an expression on an object.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Core.ExpressionObserver.PropertyAccessors">
            <summary>
            An ordered collection of property accessor plugins that can be used to customize
            the reading and subscription of property values on a type.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Core.ExpressionObserver.DataValidators">
            <summary>
            An ordered collection of validation checker plugins that can be used to customize
            the validation of view model and model data.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Core.ExpressionObserver.StreamHandlers">
            <summary>
            An ordered collection of stream plugins that can be used to customize the behavior
            of the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.#ctor(System.Object,Avalonia.Data.Core.ExpressionNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="root">The root object.</param>
            <param name="node">The expression.</param>
            <param name="description">
            A description of the expression.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.#ctor(System.IObservable{System.Object},Avalonia.Data.Core.ExpressionNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootObservable">An observable which provides the root object.</param>
            <param name="node">The expression.</param>
            <param name="description">
            A description of the expression.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.#ctor(System.Func{System.Object},Avalonia.Data.Core.ExpressionNode,System.IObservable{System.ValueTuple},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootGetter">A function which gets the root object.</param>
            <param name="node">The expression.</param>
            <param name="update">An observable which triggers a re-read of the getter. Generic argument value is not used.</param>
            <param name="description">
            A description of the expression.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.Create``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="root">The root object.</param>
            <param name="expression">The expression.</param>
            <param name="enableDataValidation">Whether or not to track data validation</param>
            <param name="description">
            A description of the expression. If null, <paramref name="expression"/>'s string representation will be used.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.Create``2(System.IObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootObservable">An observable which provides the root object.</param>
            <param name="expression">The expression.</param>
            <param name="enableDataValidation">Whether or not to track data validation</param>
            <param name="description">
            A description of the expression. If null, <paramref name="expression"/>'s string representation will be used.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.Create``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.IObservable{System.ValueTuple},System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootGetter">A function which gets the root object.</param>
            <param name="expression">The expression.</param>
            <param name="update">An observable which triggers a re-read of the getter. Generic argument value is not used.</param>
            <param name="enableDataValidation">Whether or not to track data validation</param>
            <param name="description">
            A description of the expression. If null, <paramref name="expression"/>'s string representation will be used.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Attempts to set the value of a property expression.
            </summary>
            <param name="value">The value to set.</param>
            <param name="priority">The binding priority to use.</param>
            <returns>
            True if the value could be set; false if the expression does not evaluate to a 
            property. Note that the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> must be subscribed to
            before setting the target value can work, as setting the value requires the
            expression to be evaluated.
            </returns>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.Description">
            <summary>
            Gets a description of the expression being observed.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.Expression">
            <summary>
            Gets the expression being observed.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.ResultType">
            <summary>
            Gets the type of the expression result or null if the expression could not be 
            evaluated.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.Leaf">
            <summary>
            Gets the leaf node.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.ExpressionParseException">
            <summary>
            Exception thrown when <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> could not parse the provided
            expression string.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionParseException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionParseException"/> class.
            </summary>
            <param name="column">The column position of the error.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused the parsing failure.</param>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionParseException.Column">
            <summary>
            Gets the column position at which the error occurred.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.AvaloniaPropertyAccessorPlugin">
            <summary>
            Reads a property from a <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.AvaloniaPropertyAccessorPlugin.Match(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.AvaloniaPropertyAccessorPlugin.Start(System.WeakReference{System.Object},System.String)">
            <summary>
            Starts monitoring the value of a property on an object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="propertyName">The property name.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.BindingPlugins">
            <summary>
            Holds a registry of plugins used for bindings.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.BindingPlugins.PropertyAccessors">
            <summary>
            An ordered collection of property accessor plugins that can be used to customize
            the reading and subscription of property values on a type.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.BindingPlugins.DataValidators">
            <summary>
            An ordered collection of validation checker plugins that can be used to customize
            the validation of view model and model data.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.BindingPlugins.StreamHandlers">
            <summary>
            An ordered collection of stream plugins that can be used to customize the behavior
            of the '^' stream binding operator.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.DataAnnotationsValidationPlugin">
            <summary>
            Validates properties on that have <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataAnnotationsValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataAnnotationsValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.DataValidationBase">
            <summary>
            Base class for data validators.
            </summary>
            <remarks>
            Data validators are <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>s that are returned from an 
            <see cref="T:Avalonia.Data.Core.Plugins.IDataValidationPlugin"/>. They wrap an inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>
            and convert any values received from the inner property accessor into
            <see cref="T:Avalonia.Data.BindingNotification"/>s.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.#ctor(Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.Plugins.DataValidationBase"/> class.
            </summary>
            <param name="inner">The inner property accessor.</param>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.DataValidationBase.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.DataValidationBase.Value">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.System#IObserver{System#Object}#OnCompleted">
            <summary>
            Should never be called: the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> should never notify
            completion.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.System#IObserver{System#Object}#OnError(System.Exception)">
            <summary>
            Should never be called: the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> should never notify
            an error.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.System#IObserver{System#Object}#OnNext(System.Object)">
            <summary>
            Called when the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> notifies with a new value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.SubscribeCore">
            <summary>
            Begins listening to the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.UnsubscribeCore">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.InnerValueChanged(System.Object)">
            <summary>
            Called when the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> notifies with a new value.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            Notifies the observer that the value has changed. The value will be wrapped in a
            <see cref="T:Avalonia.Data.BindingNotification"/> if it is not already a binding notification.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.ExceptionValidationPlugin">
            <summary>
            Validates properties that report errors by throwing exceptions.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ExceptionValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ExceptionValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IDataValidationPlugin">
            <summary>
            Defines how data validation is observed by an <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IDataValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <summary>
            Checks whether this plugin can handle data validation on the specified object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="memberName">The name of the member to validate.</param>
            <returns>True if the plugin can handle the object; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IDataValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <summary>
            Starts monitoring the data validation state of a property on an object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="propertyName">The property name.</param>
            <param name="inner">The inner property accessor used to access the property.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IndeiValidationPlugin">
            <summary>
            Validates properties on objects that implement <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IndeiValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IndeiValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.InpcPropertyAccessorPlugin">
            <summary>
            Reads a property from a standard C# object that optionally supports the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.InpcPropertyAccessorPlugin.Match(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.InpcPropertyAccessorPlugin.Start(System.WeakReference{System.Object},System.String)">
            <summary>
            Starts monitoring the value of a property on an object.
            </summary>
            <param name="reference">The object.</param>
            <param name="propertyName">The property name.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IPropertyAccessor">
            <summary>
            Defines an accessor to a property on an object returned by a 
            <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin"/>
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.IPropertyAccessor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The accessor has not been subscribed to yet.
            </exception>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.IPropertyAccessor.Value">
            <summary>
            Gets the current value of the property.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessor.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">
            The value to set. Guaranteed to be of a valid type for the property.
            </param>
            <param name="priority">
            The priority with which to set the value.
            </param>
            <returns>
            True if the property was set; false if the property could not be set.
            </returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessor.Subscribe(System.Action{System.Object})">
            <summary>
            Subscribes to the value of the member.
            </summary>
            <param name="listener">A method that receives the values.</param>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessor.Unsubscribe">
            <summary>
            Unsubscribes to the value of the member.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin">
            <summary>
            Defines how a member is read, written and observed by an
            <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin.Match(System.Object,System.String)">
            <summary>
            Checks whether this plugin can handle accessing the properties of the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The property name.</param>
            <returns>True if the plugin can handle the property on the object; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin.Start(System.WeakReference{System.Object},System.String)">
            <summary>
            Starts monitoring the value of a property on an object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="propertyName">The property name.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IStreamPlugin">
            <summary>
            Defines a plugin that handles the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IStreamPlugin.Match(System.WeakReference{System.Object})">
            <summary>
            Checks whether this plugin handles the specified value.
            </summary>
            <param name="reference">A weak reference to the value.</param>
            <returns>True if the plugin can handle the value; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IStreamPlugin.Start(System.WeakReference{System.Object})">
            <summary>
            Starts producing output based on the specified value.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <returns>
            An observable that produces the output for the value.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.ObservableStreamPlugin">
            <summary>
            Handles binding to <see cref="T:System.IObservable`1"/>s for the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ObservableStreamPlugin.Match(System.WeakReference{System.Object})">
            <summary>
            Checks whether this plugin handles the specified value.
            </summary>
            <param name="reference">A weak reference to the value.</param>
            <returns>True if the plugin can handle the value; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ObservableStreamPlugin.Start(System.WeakReference{System.Object})">
            <summary>
            Starts producing output based on the specified value.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <returns>
            An observable that produces the output for the value.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.PropertyAccessorBase">
            <summary>
            Defines a default base implementation for a <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyAccessorBase.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyAccessorBase.Value">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.Subscribe(System.Action{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.PublishValue(System.Object)">
            <summary>
            Publishes a value to the listener.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.SubscribeCore">
            <summary>
            When overridden in a derived class, begins listening to the member.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.UnsubscribeCore">
            <summary>
            When overridden in a derived class, stops listening to the member.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.PropertyError">
            <summary>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> that represents an error.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyError.#ctor(Avalonia.Data.BindingNotification)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.Plugins.PropertyError"/> class.
            </summary>
            <param name="error">The error to report.</param>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyError.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyError.Value">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyError.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyError.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.TaskStreamPlugin">
            <summary>
            Handles binding to <see cref="T:System.Threading.Tasks.Task"/>s for the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.TaskStreamPlugin.Match(System.WeakReference{System.Object})">
            <summary>
            Checks whether this plugin handles the specified value.
            </summary>
            <param name="reference">A weak reference to the value.</param>
            <returns>True if the plugin can handle the value; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.TaskStreamPlugin.Start(System.WeakReference{System.Object})">
            <summary>
            Starts producing output based on the specified value.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <returns>
            An observable that produces the output for the value.
            </returns>
        </member>
        <member name="T:Avalonia.Data.DataValidationException">
            <summary>
            Exception, which wrap validation errors.
            </summary>
        </member>
        <member name="M:Avalonia.Data.DataValidationException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.DataValidationException"/> class.
            </summary>
            <param name="errorData">Data of validation error.</param>
        </member>
        <member name="T:Avalonia.Data.IBinding">
            <summary>
            Holds a binding that can be applied to a property on an object.
            </summary>
        </member>
        <member name="M:Avalonia.Data.IBinding.Initiate(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)">
            <summary>
            Initiates the binding on a target object.
            </summary>
            <param name="target">The target instance.</param>
            <param name="targetProperty">The target property. May be null.</param>
            <param name="anchor">
            An optional anchor from which to locate required context. When binding to objects that
            are not in the logical tree, certain types of binding need an anchor into the tree in 
            order to locate named controls or resources. The <paramref name="anchor"/> parameter 
            can be used to provide this context.
            </param>
            <param name="enableDataValidation">Whether data validation should be enabled.</param>
            <returns>
            A <see cref="T:Avalonia.Data.InstancedBinding"/> or null if the binding could not be resolved.
            </returns>
        </member>
        <member name="T:Avalonia.Data.IndexerDescriptor">
            <summary>
            Holds a description of a binding for <see cref="T:Avalonia.AvaloniaObject"/>'s [] operator.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Mode">
            <summary>
            Gets or sets the binding mode.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Priority">
            <summary>
            Gets or sets the binding priority.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Property">
            <summary>
            Gets or sets the source property.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Source">
            <summary>
            Gets or sets the source object.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.SourceObservable">
            <summary>
            Gets or sets the source observable.
            </summary>
            <remarks>
            If null, then <see cref="P:Avalonia.Data.IndexerDescriptor.Source"/>.<see cref="P:Avalonia.Data.IndexerDescriptor.Property"/> will be used.
            </remarks>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Description">
            <summary>
            Gets a description of the binding.
            </summary>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.op_LogicalNot(Avalonia.Data.IndexerDescriptor)">
            <summary>
            Makes a two-way binding.
            </summary>
            <param name="binding">The current binding.</param>
            <returns>A two-way binding.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.op_OnesComplement(Avalonia.Data.IndexerDescriptor)">
            <summary>
            Makes a two-way binding.
            </summary>
            <param name="binding">The current binding.</param>
            <returns>A two-way binding.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.WithMode(Avalonia.Data.BindingMode)">
            <summary>
            Modifies the binding mode.
            </summary>
            <param name="mode">The binding mode.</param>
            <returns>The object that the method was called on.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.WithPriority(Avalonia.Data.BindingPriority)">
            <summary>
            Modifies the binding priority.
            </summary>
            <param name="priority">The binding priority.</param>
            <returns>The object that the method was called on.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.Subscribe(System.IObserver{System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.InstancedBinding">
            <summary>
            Holds the result of calling <see cref="M:Avalonia.Data.IBinding.Initiate(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)"/>.
            </summary>
            <remarks>
            Whereas an <see cref="T:Avalonia.Data.IBinding"/> holds a description of a binding such as "Bind to the X
            property on a control's DataContext"; this class represents a binding that has been 
            *instanced* by calling <see cref="M:Avalonia.Data.IBinding.Initiate(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)"/>
            on a target object.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.#ctor(System.IObservable{System.Object},Avalonia.Data.BindingMode,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.InstancedBinding"/> class.
            </summary>
            <param name="source">The binding source.</param>
            <param name="mode">The binding mode.</param>
            <param name="priority">The priority of the binding.</param>
            <remarks>
            This constructor can be used to create any type of binding and as such requires an
            <see cref="T:System.IObservable`1"/> as the binding source because this is the only binding
            source which can be used for all binding modes. If you wish to create an instance with
            something other than a subject, use one of the static creation methods on this class.
            </remarks>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Mode">
            <summary>
            Gets the binding mode with which the binding was initiated.
            </summary>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Priority">
            <summary>
            Gets the binding priority.
            </summary>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Source">
            <summary>
            Gets the binding source observable.
            </summary>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneTime(System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-time binding with a fixed value.
            </summary>
            <param name="value">The value.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneTime(System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-time binding.
            </summary>
            <param name="observable">The source observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneWay(System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-way binding.
            </summary>
            <param name="observable">The source observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneWayToSource(System.IObserver{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-way to source binding.
            </summary>
            <param name="observer">The binding source.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.TwoWay(System.IObservable{System.Object},System.IObserver{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new two-way binding.
            </summary>
            <param name="observable">The binding source.</param>
            <param name="observer">The binding source.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.WithPriority(Avalonia.Data.BindingPriority)">
            <summary>
            Creates a copy of the <see cref="T:Avalonia.Data.InstancedBinding"/> with a different priority.
            </summary>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="T:Avalonia.Data.Optional`1">
            <summary>
            An optional typed value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <remarks>
            This struct is similar to <see cref="T:System.Nullable`1"/> except it also accepts reference types:
            note that null is a valid value for reference types. It is also similar to
            <see cref="T:Avalonia.Data.BindingValue`1"/> but has only two states: "value present" and "value missing".
            
            To create a new optional value you can:
            
            - For a simple value, call the <see cref="T:Avalonia.Data.Optional`1"/> constructor or use an implicit
              conversion from <typeparamref name="T"/>
            - For an missing value, use <see cref="P:Avalonia.Data.Optional`1.Empty"/> or simply `default`
            </remarks>
        </member>
        <member name="M:Avalonia.Data.Optional`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Optional`1"/> struct with value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Avalonia.Data.Optional`1.HasValue">
            <summary>
            Gets a value indicating whether a value is present.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Optional`1.Value">
            <summary>
            Gets the value.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:Avalonia.Data.Optional`1.HasValue"/> is false.
            </exception>
        </member>
        <member name="M:Avalonia.Data.Optional`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Optional`1.Equals(Avalonia.Data.Optional{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Optional`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Optional`1.ToObject">
            <summary>
            Casts the value (if any) to an <see cref="T:System.Object"/>.
            </summary>
            <returns>The cast optional value.</returns>
        </member>
        <member name="M:Avalonia.Data.Optional`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Optional`1.GetValueOrDefault">
            <summary>
            Gets the value if present, otherwise the default value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.Data.Optional`1.GetValueOrDefault(`0)">
            <summary>
            Gets the value if present, otherwise a default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.Data.Optional`1.GetValueOrDefault``1">
            <summary>
            Gets the value if present, otherwise the default value.
            </summary>
            <returns>
            The value if present and of the correct type, `default(TResult)` if the value is
            not present or of an incorrect type.
            </returns>
        </member>
        <member name="M:Avalonia.Data.Optional`1.GetValueOrDefault``1(``0)">
            <summary>
            Gets the value if present, otherwise a default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>
            The value if present and of the correct type, `default(TResult)` if the value is
            present but not of the correct type or null, or <paramref name="defaultValue"/> if the
            value is not present.
            </returns>
        </member>
        <member name="M:Avalonia.Data.Optional`1.op_Implicit(`0)~Avalonia.Data.Optional{`0}">
            <summary>
            Creates an <see cref="T:Avalonia.Data.Optional`1"/> from an instance of the underlying value type.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.Data.Optional`1.op_Inequality(Avalonia.Data.Optional{`0},Avalonia.Data.Optional{`0})">
            <summary>
            Compares two <see cref="T:Avalonia.Data.Optional`1"/>s for inequality.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>True if the values are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Optional`1.op_Equality(Avalonia.Data.Optional{`0},Avalonia.Data.Optional{`0})">
            <summary>
            Compares two <see cref="T:Avalonia.Data.Optional`1"/>s for equality.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>True if the values are equal; otherwise false.</returns>
        </member>
        <member name="P:Avalonia.Data.Optional`1.Empty">
            <summary>
            Returns an <see cref="T:Avalonia.Data.Optional`1"/> without a value.
            </summary>
        </member>
        <member name="M:Avalonia.Data.OptionalExtensions.Cast``1(Avalonia.Data.Optional{System.Object})">
            <summary>
            Casts the type of an <see cref="T:Avalonia.Data.Optional`1"/> using only the C# cast operator.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The binding value.</param>
            <returns>The cast value.</returns>
        </member>
        <member name="T:Avalonia.Data.TemplateBinding">
            <summary>
            A XAML binding to a property on a control's templated parent.
            </summary>
        </member>
        <member name="M:Avalonia.Data.TemplateBinding.Initiate(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.TemplateBinding.Converter">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Data.Converters.IValueConverter"/> to use.
            </summary>
        </member>
        <member name="P:Avalonia.Data.TemplateBinding.ConverterParameter">
            <summary>
            Gets or sets a parameter to pass to <see cref="P:Avalonia.Data.TemplateBinding.Converter"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Data.TemplateBinding.Mode">
            <summary>
            Gets or sets the binding mode.
            </summary>
        </member>
        <member name="P:Avalonia.Data.TemplateBinding.Property">
            <summary>
            Gets or sets the name of the source property on the templated parent.
            </summary>
        </member>
        <member name="P:Avalonia.Data.TemplateBinding.Description">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.TemplateBinding.Avalonia#Styling#ISetterValue#Initialize(Avalonia.Styling.SetterBase)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Diagnostics.AvaloniaObjectExtensions">
            <summary>
            Defines diagnostic extensions on <see cref="T:Avalonia.AvaloniaObject"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.AvaloniaObjectExtensions.GetDiagnostic(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets a diagnostic for a <see cref="T:Avalonia.AvaloniaProperty"/> on a <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            A <see cref="T:Avalonia.Diagnostics.AvaloniaPropertyValue"/> that can be used to diagnose the state of the
            property on the object.
            </returns>
        </member>
        <member name="T:Avalonia.Diagnostics.AvaloniaPropertyValue">
            <summary>
            Holds diagnostic-related information about the value of an <see cref="T:Avalonia.AvaloniaProperty"/>
            on an <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Value">
            <summary>
            Gets the current property value.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Priority">
            <summary>
            Gets the priority of the current value.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Diagnostic">
            <summary>
            Gets a diagnostic string.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.IsOverriddenCurrentValue">
            <summary>
            Gets a value indicating whether the <see cref="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Value"/> was overridden by a call to 
            <see cref="M:Avalonia.AvaloniaObject.SetCurrentValue``1(Avalonia.StyledProperty{``0},``0)"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Diagnostics.IAvaloniaObjectDebug">
            <summary>
            Provides a debug interface into <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.IAvaloniaObjectDebug.GetPropertyChangedSubscribers">
            <summary>
            Gets the subscriber list for the <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/>
            event.
            </summary>
            <returns>
            The subscribers or null if no subscribers.
            </returns>
        </member>
        <member name="T:Avalonia.Diagnostics.INotifyCollectionChangedDebug">
            <summary>
            Provides a debug interface into <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> subscribers on
            <see cref="T:Avalonia.Collections.AvaloniaList`1"/>
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.INotifyCollectionChangedDebug.GetCollectionChangedSubscribers">
            <summary>
            Gets the subscriber list for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>
            event.
            </summary>
            <returns>
            The subscribers or null if no subscribers.
            </returns>
        </member>
        <member name="T:Avalonia.Diagnostics.StyledElementExtensions">
            <summary>
            Defines diagnostic extensions on <see cref="T:Avalonia.StyledElement"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.StyledElementExtensions.GetStyleDiagnostics(Avalonia.StyledElement)">
            <summary>
            Gets a style diagnostics for a <see cref="T:Avalonia.StyledElement"/>.
            </summary>
            <param name="styledElement">The element.</param>
        </member>
        <member name="T:Avalonia.Diagnostics.StyleDiagnostics">
            <summary>
            Contains information about style related diagnostics of a control.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.StyleDiagnostics.AppliedStyles">
            <summary>
            Currently applied styles.
            </summary>
        </member>
        <member name="T:Avalonia.DirectProperty`2">
            <summary>
            A direct avalonia property.
            </summary>
            <typeparam name="TOwner">The class that registered the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <remarks>
            Direct avalonia properties are backed by a field on the object, but exposed via the
            <see cref="T:Avalonia.AvaloniaProperty"/> system. They hold a getter and an optional setter which
            allows the avalonia property system to read and write the current value.
            </remarks>
        </member>
        <member name="M:Avalonia.DirectProperty`2.#ctor(System.String,System.Func{`0,`1},System.Action{`0,`1},Avalonia.DirectPropertyMetadata{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.DirectProperty`2"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property. May be null.</param>
            <param name="metadata">The property metadata.</param>
        </member>
        <member name="M:Avalonia.DirectProperty`2.#ctor(Avalonia.DirectPropertyBase{`1},System.Func{`0,`1},System.Action{`0,`1},Avalonia.DirectPropertyMetadata{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="source">The property to copy.</param>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property. May be null.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="P:Avalonia.DirectProperty`2.Getter">
            <summary>
            Gets the getter function.
            </summary>
        </member>
        <member name="P:Avalonia.DirectProperty`2.Setter">
            <summary>
            Gets the setter function.
            </summary>
        </member>
        <member name="M:Avalonia.DirectProperty`2.AddOwner``1(System.Func{``0,`1},System.Action{``0,`1},`1,Avalonia.Data.BindingMode,System.Boolean)">
            <summary>
            Registers the direct property on another type.
            </summary>
            <typeparam name="TNewOwner">The type of the additional owner.</typeparam>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property.</param>
            <param name="unsetValue">
            The value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>
            </param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="enableDataValidation">
            Whether the property is interested in data validation.
            </param>
            <returns>The property.</returns>
        </member>
        <member name="M:Avalonia.DirectProperty`2.InvokeGetter(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectProperty`2.InvokeSetter(Avalonia.AvaloniaObject,Avalonia.Data.BindingValue{`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectProperty`2.Avalonia#IDirectPropertyAccessor#GetValue(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectProperty`2.Avalonia#IDirectPropertyAccessor#SetValue(Avalonia.AvaloniaObject,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.DirectPropertyBase`1">
            <summary>
            Base class for direct properties.
            </summary>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <remarks>
            Whereas <see cref="T:Avalonia.DirectProperty`2"/> is typed on the owner type, this base
            class provides a non-owner-typed interface to a direct property.
            </remarks>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.#ctor(System.String,System.Type,Avalonia.AvaloniaPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.DirectPropertyBase`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="metadata">The property metadata.</param>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.#ctor(Avalonia.DirectPropertyBase{`0},System.Type,Avalonia.AvaloniaPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.DirectPropertyBase`1"/> class.
            </summary>
            <param name="source">The property to copy.</param>
            <param name="ownerType">The new owner type.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="P:Avalonia.DirectPropertyBase`1.Owner">
            <summary>
            Gets the type that registered the property.
            </summary>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.InvokeGetter(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.InvokeSetter(Avalonia.AvaloniaObject,Avalonia.Data.BindingValue{`0})">
            <summary>
            Sets the value of the property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.GetUnsetValue(System.Type)">
            <summary>
            Gets the unset value for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The unset value.</returns>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.GetMetadata(System.Type)">
            <summary>
            Gets the property metadata for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The property metadata.
            </returns>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.OverrideMetadata``1(Avalonia.DirectPropertyMetadata{`0})">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.OverrideMetadata(System.Type,Avalonia.DirectPropertyMetadata{`0})">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.RouteClearValue(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.RouteGetValue(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.RouteSetValue(Avalonia.AvaloniaObject,System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectPropertyBase`1.RouteBind(Avalonia.AvaloniaObject,System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Routes an untyped Bind call to a typed call.
            </summary>
            <param name="o">The object instance.</param>
            <param name="source">The binding source.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="T:Avalonia.DirectPropertyMetadata`1">
            <summary>
            Metadata for direct avalonia properties.
            </summary>
        </member>
        <member name="M:Avalonia.DirectPropertyMetadata`1.#ctor(`0,Avalonia.Data.BindingMode,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyMetadata`1"/> class.
            </summary>
            <param name="unsetValue">
            The value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>
            </param>
            <param name="defaultBindingMode">The default binding mode.</param>
            <param name="enableDataValidation">
            Whether the property is interested in data validation.
            </param>
        </member>
        <member name="P:Avalonia.DirectPropertyMetadata`1.UnsetValue">
            <summary>
            Gets the value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="P:Avalonia.DirectPropertyMetadata`1.Avalonia#IDirectPropertyMetadata#UnsetValue">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectPropertyMetadata`1.Merge(Avalonia.AvaloniaPropertyMetadata,Avalonia.AvaloniaProperty)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.EnumExtensions">
            <summary>
            Provides extension methods for enums.
            </summary>
        </member>
        <member name="T:Avalonia.IDataContextProvider">
            <summary>
            Defines an element with a data context that can be used for binding.
            </summary>
        </member>
        <member name="P:Avalonia.IDataContextProvider.DataContext">
            <summary>
            Gets or sets the element's data context.
            </summary>
        </member>
        <member name="T:Avalonia.IDescription">
            <summary>
            Interface for objects with a <see cref="P:Avalonia.IDescription.Description"/>.
            </summary>
        </member>
        <member name="P:Avalonia.IDescription.Description">
            <summary>
            Gets the description of the object.
            </summary>
            <value>
            The description of the object.
            </value>
        </member>
        <member name="T:Avalonia.IDirectPropertyAccessor">
            <summary>
            Provides a runtime interface for getting and setting 
            <see cref="T:Avalonia.DirectProperty`2"/> values.
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyAccessor.IsReadOnly">
            <summary>
            Gets a value indicating whether the property is read-only.
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyAccessor.Owner">
            <summary>
            Gets the class that registered the property.
            </summary>
        </member>
        <member name="M:Avalonia.IDirectPropertyAccessor.GetValue(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Avalonia.IDirectPropertyAccessor.SetValue(Avalonia.AvaloniaObject,System.Object)">
            <summary>
            Sets the value of the property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Avalonia.IDirectPropertyMetadata">
            <summary>
            Untyped interface to <see cref="T:Avalonia.DirectPropertyMetadata`1"/>
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyMetadata.UnsetValue">
            <summary>
            Gets the to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyMetadata.EnableDataValidation">
            <summary>
            Gets a value indicating whether the property is interested in data validation.
            </summary>
        </member>
        <member name="T:Avalonia.INamed">
            <summary>
            Interface for named elements.
            </summary>
        </member>
        <member name="P:Avalonia.INamed.Name">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="T:Avalonia.Input.AccessKeyHandler">
            <summary>
            Handles access keys for a window.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler.AccessKeyPressedEvent">
            <summary>
            Defines the AccessKeyPressed attached event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._registered">
            <summary>
            The registered access keys.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._owner">
            <summary>
            The window to which the handler belongs.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._showingAccessKeys">
            <summary>
            Whether access keys are currently being shown;
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._ignoreAltUp">
            <summary>
            Whether to ignore the Alt KeyUp event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._altIsDown">
            <summary>
            Whether the AltKey is down.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._restoreFocusElement">
            <summary>
            Element to restore following AltKey taking focus.
            </summary>
        </member>
        <member name="F:Avalonia.Input.AccessKeyHandler._mainMenu">
            <summary>
            The window's main menu.
            </summary>
        </member>
        <member name="P:Avalonia.Input.AccessKeyHandler.MainMenu">
            <summary>
            Gets or sets the window's main menu.
            </summary>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the access key handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.Register(System.Char,Avalonia.Input.IInputElement)">
            <summary>
            Registers an input element to be associated with an access key.
            </summary>
            <param name="accessKey">The access key.</param>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.Unregister(Avalonia.Input.IInputElement)">
            <summary>
            Unregisters the access keys associated with the input element.
            </summary>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.OnPreviewKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed in the owner window.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.OnKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed in the owner window.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.OnPreviewKeyUp(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles the Alt/F10 keys being released in the window.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.OnPreviewPointerPressed(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Handles pointer presses in the window.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.AccessKeyHandler.CloseMenu">
            <summary>
            Closes the <see cref="P:Avalonia.Input.AccessKeyHandler.MainMenu"/> and performs other bookeeping.
            </summary>
        </member>
        <member name="F:Avalonia.Input.DataFormats.Text">
            <summary>
            Dataformat for plaintext
            </summary>
        </member>
        <member name="F:Avalonia.Input.DataFormats.Files">
            <summary>
            Dataformat for one or more files.
            </summary>
        </member>
        <member name="F:Avalonia.Input.DataFormats.FileNames">
            <summary>
            Dataformat for one or more filenames
            </summary>
        </member>
        <member name="T:Avalonia.Input.DataObject">
            <summary>
            Specific and mutable implementation of the IDataObject interface.
            </summary>
        </member>
        <member name="M:Avalonia.Input.DataObject.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Input.DataObject.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Input.DataObject.GetDataFormats">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Input.DataObject.Set(System.String,System.Object)">
            <summary>
            Sets a value to the internal store of the data object with <see cref="T:Avalonia.Input.DataFormats"/> as a key.
            </summary>
        </member>
        <member name="M:Avalonia.Input.DataObjectExtensions.GetFiles(Avalonia.Input.IDataObject)">
            <summary>
            Returns a list of files if the DataObject contains files or filenames.
            <seealso cref="F:Avalonia.Input.DataFormats.Files"/>.
            </summary>
            <returns>
            Collection of storage items - files or folders. If format isn't available, returns null.
            </returns>
        </member>
        <member name="M:Avalonia.Input.DataObjectExtensions.GetFileNames(Avalonia.Input.IDataObject)">
            <summary>
            Returns a list of filenames if the DataObject contains filenames.
            <seealso cref="F:Avalonia.Input.DataFormats.FileNames"/>
            </summary>
            <returns>
            Collection of file names. If format isn't available, returns null.
            </returns>
        </member>
        <member name="M:Avalonia.Input.DataObjectExtensions.GetText(Avalonia.Input.IDataObject)">
            <summary>
            Returns the dragged text if the DataObject contains any text.
            <seealso cref="F:Avalonia.Input.DataFormats.Text"/>
            </summary>
            <returns>
            A text string. If format isn't available, returns null.
            </returns>
        </member>
        <member name="F:Avalonia.Input.DragDrop.DragEnterEvent">
            <summary>
            Event which is raised, when a drag-and-drop operation enters the element.
            </summary>
        </member>
        <member name="F:Avalonia.Input.DragDrop.DragLeaveEvent">
            <summary>
            Event which is raised, when a drag-and-drop operation leaves the element.
            </summary>
        </member>
        <member name="F:Avalonia.Input.DragDrop.DragOverEvent">
            <summary>
            Event which is raised, when a drag-and-drop operation is updated while over the element.
            </summary>
        </member>
        <member name="F:Avalonia.Input.DragDrop.DropEvent">
            <summary>
            Event which is raised, when a drag-and-drop operation should complete over the element.
            </summary>
        </member>
        <member name="M:Avalonia.Input.DragDrop.GetAllowDrop(Avalonia.Interactivity.Interactive)">
            <summary>
            Gets a value indicating whether the given element can be used as the target of a drag-and-drop operation. 
            </summary>
        </member>
        <member name="M:Avalonia.Input.DragDrop.SetAllowDrop(Avalonia.Interactivity.Interactive,System.Boolean)">
            <summary>
            Sets a value indicating whether the given interactive can be used as the target of a drag-and-drop operation. 
            </summary>
        </member>
        <member name="M:Avalonia.Input.DragDrop.DoDragDrop(Avalonia.Input.PointerEventArgs,Avalonia.Input.IDataObject,Avalonia.Input.DragDropEffects)">
            <summary>
            Starts a dragging operation with the given <see cref="T:Avalonia.Input.IDataObject"/> and returns the applied drop effect from the target.
            <seealso cref="T:Avalonia.Input.DataObject"/>
            </summary>
        </member>
        <member name="T:Avalonia.Input.FocusManager">
            <summary>
            Manages focus for the application.
            </summary>
        </member>
        <member name="F:Avalonia.Input.FocusManager._focusScopes">
            <summary>
            The focus scopes in which the focus is currently defined.
            </summary>
        </member>
        <member name="M:Avalonia.Input.FocusManager.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Input.FocusManager"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Input.FocusManager.GetFocusedElement">
            <summary>
            Gets the currently focused <see cref="T:Avalonia.Input.IInputElement"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Input.FocusManager.Scope">
            <summary>
            Gets the current focus scope.
            </summary>
        </member>
        <member name="M:Avalonia.Input.FocusManager.Focus(Avalonia.Input.IInputElement,Avalonia.Input.NavigationMethod,Avalonia.Input.KeyModifiers)">
            <summary>
            Focuses a control.
            </summary>
            <param name="control">The control to focus.</param>
            <param name="method">The method by which focus was changed.</param>
            <param name="keyModifiers">Any key modifiers active at the time of focus.</param>
        </member>
        <member name="M:Avalonia.Input.FocusManager.SetFocusedElement(Avalonia.Input.IFocusScope,Avalonia.Input.IInputElement,Avalonia.Input.NavigationMethod,Avalonia.Input.KeyModifiers)">
            <summary>
            Sets the currently focused element in the specified scope.
            </summary>
            <param name="scope">The focus scope.</param>
            <param name="element">The element to focus. May be null.</param>
            <param name="method">The method by which focus was changed.</param>
            <param name="keyModifiers">Any key modifiers active at the time of focus.</param>
            <remarks>
            If the specified scope is the current <see cref="P:Avalonia.Input.FocusManager.Scope"/> then the keyboard focus
            will change.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.FocusManager.SetFocusScope(Avalonia.Input.IFocusScope)">
            <summary>
            Notifies the focus manager of a change in focus scope.
            </summary>
            <param name="scope">The new focus scope.</param>
        </member>
        <member name="M:Avalonia.Input.FocusManager.GetFocusManager(Avalonia.Input.IInputElement)">
            <summary>
            Public API customers should use TopLevel.GetTopLevel(control).FocusManager.
            But since we have split projects, we can't access TopLevel from Avalonia.Base.
            That's why we need this helper method instead.
            </summary>
        </member>
        <member name="M:Avalonia.Input.FocusManager.CanFocus(Avalonia.Input.IInputElement)">
            <summary>
            Checks if the specified element can be focused.
            </summary>
            <param name="e">The element.</param>
            <returns>True if the element can be focused.</returns>
        </member>
        <member name="M:Avalonia.Input.FocusManager.GetFocusScopeAncestors(Avalonia.Input.IInputElement)">
            <summary>
            Gets the focus scope ancestors of the specified control, traversing popups.
            </summary>
            <param name="control">The control.</param>
            <returns>The focus scopes.</returns>
        </member>
        <member name="M:Avalonia.Input.FocusManager.OnPreviewPointerPressed(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Global handler for pointer pressed events.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="F:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.CanHorizontallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.CanHorizontallyScroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.CanVerticallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.CanVerticallyScroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.IsScrollInertiaEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.IsScrollInertiaEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.ScrollStartDistanceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.ScrollStartDistance"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.IsScrollInertiaEnabled">
            <summary>
            Gets or sets whether the gesture should include inertia in it's behavior.
            </summary>
        </member>
        <member name="P:Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer.ScrollStartDistance">
            <summary>
            Gets or sets a value indicating the distance the pointer moves before scrolling is started
            </summary>
        </member>
        <member name="T:Avalonia.Input.GestureRecognizers.VelocityEstimate">
             A two dimensional velocity estimate.
            
             VelocityEstimates are computed by [VelocityTracker.getVelocityEstimate]. An
             estimate's [confidence] measures how well the velocity tracker's position
             data fit a straight line, [duration] is the time that elapsed between the
             first and last position sample used to compute the velocity, and [offset]
             is similarly the difference between the first and last positions.
            
             See also:
            
              * [VelocityTracker], which computes [VelocityEstimate]s.
              * [Velocity], which encapsulates (just) a velocity vector and provides some
                useful velocity operations.
        </member>
        <member name="M:Avalonia.Input.GestureRecognizers.VelocityEstimate.#ctor(Avalonia.Vector,System.Double,System.TimeSpan,Avalonia.Vector)">
             A two dimensional velocity estimate.
            
             VelocityEstimates are computed by [VelocityTracker.getVelocityEstimate]. An
             estimate's [confidence] measures how well the velocity tracker's position
             data fit a straight line, [duration] is the time that elapsed between the
             first and last position sample used to compute the velocity, and [offset]
             is similarly the difference between the first and last positions.
            
             See also:
            
              * [VelocityTracker], which computes [VelocityEstimate]s.
              * [Velocity], which encapsulates (just) a velocity vector and provides some
                useful velocity operations.
        </member>
        <member name="T:Avalonia.Input.GestureRecognizers.VelocityTracker">
             Computes a pointer's velocity based on data from [PointerMoveEvent]s.
            
             The input data is provided by calling [addPosition]. Adding data is cheap.
            
             To obtain a velocity, call [getVelocity] or [getVelocityEstimate]. This will
             compute the velocity based on the data added so far. Only call these when
             you need to use the velocity, as they are comparatively expensive.
            
             The quality of the velocity estimation will be better if more data points
             have been received.
        </member>
        <member name="M:Avalonia.Input.GestureRecognizers.VelocityTracker.AddPosition(System.TimeSpan,Avalonia.Vector)">
            <summary>
            Adds a position as the given time to the tracker.
            </summary>
            <param name="time"></param>
            <param name="position"></param>
        </member>
        <member name="M:Avalonia.Input.GestureRecognizers.VelocityTracker.GetVelocityEstimate">
             Returns an estimate of the velocity of the object being tracked by the
             tracker given the current information available to the tracker.
            
             Information is added using [addPosition].
            
             Returns null if there is no data on which to base an estimate.
        </member>
        <member name="M:Avalonia.Input.GestureRecognizers.VelocityTracker.GetVelocity">
             <summary>
             Computes the velocity of the pointer at the time of the last
             provided data point.
            
             This can be expensive. Only call this when you need the velocity.
            
             Returns [Velocity.zero] if there is no data from which to compute an
             estimate or if the estimated velocity is zero./// 
             </summary>
             <returns></returns>
        </member>
        <member name="T:Avalonia.Input.GestureRecognizers.PolynomialFit">
            An nth degree polynomial fit to a dataset.
        </member>
        <member name="M:Avalonia.Input.GestureRecognizers.PolynomialFit.#ctor(System.Int32)">
             Creates a polynomial fit of the given degree.
            
             There are n + 1 coefficients in a fit of degree n.
        </member>
        <member name="P:Avalonia.Input.GestureRecognizers.PolynomialFit.Coefficients">
            The polynomial coefficients of the fit.
        </member>
        <member name="P:Avalonia.Input.GestureRecognizers.PolynomialFit.Confidence">
             An indicator of the quality of the fit.
            
             Larger values indicate greater quality.
        </member>
        <member name="M:Avalonia.Input.GestureRecognizers.LeastSquaresSolver.Solve(System.Int32,System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double})">
            <summary>
            Fits a polynomial of the given degree to the data points.
            When there is not enough data to fit a curve null is returned.
            </summary>
        </member>
        <member name="F:Avalonia.Input.PullGestureRecognizer.PullDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.PullGestureRecognizer.PullDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Gestures.IsHoldingEnabledProperty">
            <summary>
            Defines the IsHoldingEnabled attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Gestures.IsHoldWithMouseEnabledProperty">
            <summary>
            Defines the IsHoldWithMouseEnabled attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Gestures.HoldingEvent">
            <summary>
            Occurs when a user performs a press and hold gesture (with a single touch, mouse, or pen/stylus contact).
            </summary>
        </member>
        <member name="T:Avalonia.Input.GotFocusEventArgs">
            <summary>
            Holds arguments for a <see cref="F:Avalonia.Input.InputElement.GotFocusEvent"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Input.GotFocusEventArgs.NavigationMethod">
            <summary>
            Gets or sets a value indicating how the change in focus occurred.
            </summary>
        </member>
        <member name="P:Avalonia.Input.GotFocusEventArgs.KeyModifiers">
            <summary>
            Gets or sets any key modifiers active at the time of focus.
            </summary>
        </member>
        <member name="P:Avalonia.Input.HoldingRoutedEventArgs.HoldingState">
            <summary>
            Gets the state of the <see cref="F:Avalonia.Input.Gestures.HoldingEvent"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Input.HoldingRoutedEventArgs.Position">
            <summary>
            Gets the location of the touch, mouse, or pen/stylus contact.
            </summary>
        </member>
        <member name="P:Avalonia.Input.HoldingRoutedEventArgs.PointerType">
            <summary>
            Gets the pointer type of the input source.
            </summary>
        </member>
        <member name="M:Avalonia.Input.HoldingRoutedEventArgs.#ctor(Avalonia.Input.HoldingState,Avalonia.Point,Avalonia.Input.PointerType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Input.HoldingRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Avalonia.Input.HoldingState.Started">
            <summary>
            A single contact has been detected and a time threshold is crossed without the contact being lifted, another contact detected, or another gesture started.
            </summary>
        </member>
        <member name="F:Avalonia.Input.HoldingState.Completed">
            <summary>
            The single contact is lifted.
            </summary>
        </member>
        <member name="F:Avalonia.Input.HoldingState.Cancelled">
            <summary>
            An additional contact is detected or a subsequent gesture (such as a slide) is detected.
            </summary>
        </member>
        <member name="T:Avalonia.Input.IAccessKeyHandler">
            <summary>
            Defines the interface for classes that handle access keys for a window.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IAccessKeyHandler.MainMenu">
            <summary>
            Gets or sets the window's main menu.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IAccessKeyHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the access key handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.IAccessKeyHandler.Register(System.Char,Avalonia.Input.IInputElement)">
            <summary>
            Registers an input element to be associated with an access key.
            </summary>
            <param name="accessKey">The access key.</param>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Input.IAccessKeyHandler.Unregister(Avalonia.Input.IInputElement)">
            <summary>
            Unregisters the access keys associated with the input element.
            </summary>
            <param name="element">The input element.</param>
        </member>
        <member name="T:Avalonia.Input.IClickableControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalonia.Input.IClickableControl.IsEffectivelyEnabled">
            <summary>
            Gets a value indicating whether this control and all its parents are enabled.
            </summary>
        </member>
        <member name="T:Avalonia.Input.ICommandSource">
            <summary>
             An interface for classes that know how to invoke a Command.
            </summary>
        </member>
        <member name="P:Avalonia.Input.ICommandSource.Command">
            <summary>
            The command that will be executed when the class is "invoked."
            Classes that implement this interface should enable or disable based on the command's CanExecute return value.
            The property may be implemented as read-write if desired.
            </summary>
        </member>
        <member name="P:Avalonia.Input.ICommandSource.CommandParameter">
            <summary>
            The parameter that will be passed to the command when executing the command.
            The property may be implemented as read-write if desired.
            </summary>
        </member>
        <member name="M:Avalonia.Input.ICommandSource.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called for the CanExecuteChanged event when changes are detected.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="P:Avalonia.Input.ICommandSource.IsEffectivelyEnabled">
            <summary>
            Gets a value indicating whether this control and all its parents are enabled.
            </summary>
        </member>
        <member name="T:Avalonia.Input.ICustomKeyboardNavigation">
            <summary>
            Designates a control as handling its own keyboard navigation.
            </summary>
        </member>
        <member name="M:Avalonia.Input.ICustomKeyboardNavigation.GetNext(Avalonia.Input.IInputElement,Avalonia.Input.NavigationDirection)">
            <summary>
            Gets the next element in the specified navigation direction.
            </summary>
            <param name="element">The element being navigated from.</param>
            <param name="direction">The navigation direction.</param>
            <returns>
            A tuple consisting of:
            - A boolean indicating whether the request was handled. If false is returned then 
              custom navigation will be ignored and default navigation will take place.
            - If handled is true: the next element in the navigation direction, or null if default
              navigation should continue outside the element.
            </returns>
        </member>
        <member name="T:Avalonia.Input.IDataObject">
            <summary>
            Interface to access information about the data of a drag-and-drop operation.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IDataObject.GetDataFormats">
            <summary>
            Lists all formats which are present in the DataObject.
            <seealso cref="T:Avalonia.Input.DataFormats"/>
            </summary>
        </member>
        <member name="M:Avalonia.Input.IDataObject.Contains(System.String)">
            <summary>
            Checks whether a given DataFormat is present in this object
            <seealso cref="T:Avalonia.Input.DataFormats"/>
            </summary>
        </member>
        <member name="M:Avalonia.Input.IDataObject.Get(System.String)">
            <summary>
            Tries to get the data of the given DataFormat.
            </summary>
            <returns>
            Object data. If format isn't available, returns null.
            </returns>
        </member>
        <member name="T:Avalonia.Input.IFocusManager">
            <summary>
            Manages focus for the application.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IFocusManager.GetFocusedElement">
            <summary>
            Gets the currently focused <see cref="T:Avalonia.Input.IInputElement"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IFocusManager.ClearFocus">
            <summary>
            Clears currently focused element.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IInputDevice.ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs)">
            <summary>
            Processes raw event. Is called after preprocessing by InputManager
            </summary>
            <param name="ev"></param>
        </member>
        <member name="T:Avalonia.Input.IInputElement">
            <summary>
            Defines input-related functionality for a control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.GotFocus">
            <summary>
            Occurs when the control receives focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.LostFocus">
            <summary>
            Occurs when the control loses focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.KeyDown">
            <summary>
            Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.KeyUp">
            <summary>
            Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.TextInput">
            <summary>
            Occurs when a user typed some text while the control has focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.PointerEntered">
            <summary>
            Occurs when the pointer enters the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.PointerExited">
            <summary>
            Occurs when the pointer leaves the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.PointerPressed">
            <summary>
            Occurs when the pointer is pressed over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.PointerMoved">
            <summary>
            Occurs when the pointer moves over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.PointerReleased">
            <summary>
            Occurs when the pointer is released over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IInputElement.PointerWheelChanged">
            <summary>
            Occurs when the mouse wheel is scrolled over the control.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.Focusable">
            <summary>
            Gets or sets a value indicating whether the control can receive keyboard focus.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled for user interaction.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.Cursor">
            <summary>
            Gets or sets the associated mouse cursor.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsEffectivelyEnabled">
            <summary>
            Gets a value indicating whether this control and all its parents are enabled.
            </summary>
            <remarks>
            The <see cref="P:Avalonia.Input.IInputElement.IsEnabled"/> property is used to toggle the enabled state for individual
            controls. The <see cref="P:Avalonia.Input.IInputElement.IsEffectivelyEnabled"/> property takes into account the
            <see cref="P:Avalonia.Input.IInputElement.IsEnabled"/> value of this control and its parent controls.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsEffectivelyVisible">
            <summary>
            Gets a value indicating whether this control and all its parents are visible.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsKeyboardFocusWithin">
            <summary>
            Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsFocused">
            <summary>
            Gets a value indicating whether the control is focused.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsHitTestVisible">
            <summary>
            Gets a value indicating whether the control is considered for hit testing.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputElement.IsPointerOver">
            <summary>
            Gets a value indicating whether the pointer is currently over the control.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IInputElement.Focus(Avalonia.Input.NavigationMethod,Avalonia.Input.KeyModifiers)">
            <summary>
            Focuses the control.
            </summary>
            <param name="method">The method by which focus was changed.</param>
            <param name="keyModifiers">Any key modifiers active at the time of focus.</param>
        </member>
        <member name="P:Avalonia.Input.IInputElement.KeyBindings">
            <summary>
            Gets the key bindings for the element.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IInputElement.AddHandler(Avalonia.Interactivity.RoutedEvent,System.Delegate,Avalonia.Interactivity.RoutingStrategies,System.Boolean)">
            <summary>
            Adds a handler for the specified routed event.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
            <param name="routes">The routing strategies to listen to.</param>
            <param name="handledEventsToo">Whether handled events should also be listened for.</param>
            <returns>A disposable that terminates the event subscription.</returns>
        </member>
        <member name="M:Avalonia.Input.IInputElement.RemoveHandler(Avalonia.Interactivity.RoutedEvent,System.Delegate)">
            <summary>
            Removes a handler for the specified routed event.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Avalonia.Input.IInputElement.RaiseEvent(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Raises a routed event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Input.IInputManager">
            <summary>
            Receives input from the windowing subsystem and dispatches it to interested parties
            for processing.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputManager.PreProcess">
            <summary>
            Gets an observable that notifies on each input event received before
            <see cref="P:Avalonia.Input.IInputManager.Process"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputManager.Process">
            <summary>
            Gets an observable that notifies on each input event received.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputManager.PostProcess">
            <summary>
            Gets an observable that notifies on each input event received after
            <see cref="P:Avalonia.Input.IInputManager.Process"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IInputManager.ProcessInput(Avalonia.Input.Raw.RawInputEventArgs)">
            <summary>
            Processes a raw input event.
            </summary>
            <param name="e">The raw input event.</param>
        </member>
        <member name="T:Avalonia.Input.IInputRoot">
            <summary>
            Defines the interface for top-level input elements.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputRoot.KeyboardNavigationHandler">
            <summary>
            Gets or sets the keyboard navigation handler.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputRoot.FocusManager">
            <summary>
            Gets focus manager of the root.
            </summary>
            <remarks>
            Focus manager can be null only if window wasn't initialized yet.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.IInputRoot.PlatformSettings">
            <summary>
            Represents a contract for accessing top-level platform-specific settings.
            </summary>
            <remarks>
            PlatformSettings can be null only if window wasn't initialized yet.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.IInputRoot.PointerOverElement">
            <summary>
            Gets or sets the input element that the pointer is currently over.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IInputRoot.ShowAccessKeys">
            <summary>
            Gets or sets a value indicating whether access keys are shown in the window.
            </summary>
        </member>
        <member name="T:Avalonia.Input.IKeyboardNavigationHandler">
            <summary>
            Defines the interface for classes that handle keyboard navigation for a window.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IKeyboardNavigationHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the keyboard navigation handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.IKeyboardNavigationHandler.Move(Avalonia.Input.IInputElement,Avalonia.Input.NavigationDirection,Avalonia.Input.KeyModifiers)">
            <summary>
            Moves the focus in the specified direction.
            </summary>
            <param name="element">The current element.</param>
            <param name="direction">The direction to move.</param>
            <param name="keyModifiers">Any key modifiers active at the time of focus.</param>
        </member>
        <member name="T:Avalonia.Input.IMainMenu">
            <summary>
            Defines the interface for a window's main menu.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IMainMenu.IsOpen">
            <summary>
            Gets a value indicating whether the menu is open.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IMainMenu.Close">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IMainMenu.Open">
            <summary>
            Opens the menu in response to the Alt/F10 key.
            </summary>
        </member>
        <member name="E:Avalonia.Input.IMainMenu.Closed">
            <summary>
            Occurs when the main menu closes.
            </summary>
        </member>
        <member name="T:Avalonia.Input.IMouseDevice">
            <summary>
            Represents a mouse device.
            </summary>
        </member>
        <member name="T:Avalonia.Input.INavigableContainer">
            <summary>
            Defines a container in which the child controls can be navigated by keyboard.
            </summary>
        </member>
        <member name="M:Avalonia.Input.INavigableContainer.GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="T:Avalonia.Input.InputElement">
            <summary>
            Implements input-related functionality for a control.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.FocusableProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.Focusable"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsEffectivelyEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsEffectivelyEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.CursorProperty">
            <summary>
            Gets or sets associated mouse cursor.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsKeyboardFocusWithin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsFocusedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsFocused"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsHitTestVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsHitTestVisible"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsPointerOverProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsPointerOver"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.IsTabStopProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.IsTabStop"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.GotFocusEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.GotFocus"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.LostFocusEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.LostFocus"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.KeyDownEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.KeyDown"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.KeyUpEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.KeyUp"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.TabIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.InputElement.TabIndex"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.TextInputEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.TextInput"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.TextInputMethodClientRequestedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.TextInputMethodClientRequested"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerEnteredEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerEntered"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerExitedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerExited"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerMovedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerMoved"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerPressedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerPressed"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerReleasedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerReleased"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerCaptureLostEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerCaptureLost"/> routed event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.PointerWheelChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.PointerWheelChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.TappedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.Tapped"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.HoldingEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.Holding"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Input.InputElement.DoubleTappedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Input.InputElement.DoubleTapped"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Input.InputElement.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Input.InputElement"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.GotFocus">
            <summary>
            Occurs when the control receives focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.LostFocus">
            <summary>
            Occurs when the control loses focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.KeyDown">
            <summary>
            Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.KeyUp">
            <summary>
            Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.TextInput">
            <summary>
            Occurs when a user typed some text while the control has focus.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.TextInputMethodClientRequested">
            <summary>
            Occurs when an input element gains input focus and input method is looking for the corresponding client
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerEntered">
            <summary>
            Occurs when the pointer enters the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerExited">
            <summary>
            Occurs when the pointer leaves the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerMoved">
            <summary>
            Occurs when the pointer moves over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerPressed">
            <summary>
            Occurs when the pointer is pressed over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerReleased">
            <summary>
            Occurs when the pointer is released over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerCaptureLost">
            <summary>
            Occurs when the control or its child control loses the pointer capture for any reason,
            event will not be triggered for a parent control if capture was transferred to another child of that parent control
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.PointerWheelChanged">
            <summary>
            Occurs when the mouse is scrolled over the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.Tapped">
            <summary>
            Occurs when a tap gesture occurs on the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.Holding">
            <summary>
            Occurs when a hold gesture occurs on the control.
            </summary>
        </member>
        <member name="E:Avalonia.Input.InputElement.DoubleTapped">
            <summary>
            Occurs when a double-tap gesture occurs on the control.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.Focusable">
            <summary>
            Gets or sets a value indicating whether the control can receive focus.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled for user interaction.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.Cursor">
            <summary>
            Gets or sets associated mouse cursor.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsKeyboardFocusWithin">
            <summary>
            Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsFocused">
            <summary>
            Gets a value indicating whether the control is focused.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsHitTestVisible">
            <summary>
            Gets or sets a value indicating whether the control is considered for hit testing.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsPointerOver">
            <summary>
            Gets a value indicating whether the pointer is currently over the control.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsTabStop">
            <summary>
            Gets or sets a value that indicates whether the control is included in tab navigation.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsEffectivelyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Input.InputElement.TabIndex">
            <summary>
            Gets or sets a value that determines the order in which elements receive focus when the
            user navigates through controls by pressing the Tab key.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputElement.IsEnabledCore">
            <summary>
            Allows a derived class to override the enabled state of the control.
            </summary>
            <remarks>
            Derived controls may wish to disable the enabled state of the control without overwriting the
            user-supplied <see cref="P:Avalonia.Input.InputElement.IsEnabled"/> setting. This can be done by overriding this property
            to return the overridden enabled state. If the value returned from <see cref="P:Avalonia.Input.InputElement.IsEnabledCore"/>
            should change, then the derived control should call <see cref="M:Avalonia.Input.InputElement.UpdateIsEffectivelyEnabled"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.InputElement.Focus(Avalonia.Input.NavigationMethod,Avalonia.Input.KeyModifiers)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Input.InputElement.OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.GotFocus"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.LostFocus"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.KeyUp"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnTextInput(Avalonia.Input.TextInputEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.TextInput"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerEntered(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerEntered"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerExited(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerExited"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerMoved(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerMoved"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerPressed"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerReleased"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerCaptureLost"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerWheelChanged"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.UpdateIsEffectivelyEnabled">
            <summary>
            Updates the <see cref="P:Avalonia.Input.InputElement.IsEffectivelyEnabled"/> property value according to the parent
            control's enabled state and <see cref="P:Avalonia.Input.InputElement.IsEnabledCore"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerEnteredCore(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerEntered"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.OnPointerExitedCore(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called before the <see cref="E:Avalonia.Input.InputElement.PointerExited"/> event occurs.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Input.InputElement.UpdateIsEffectivelyEnabled(Avalonia.Input.InputElement)">
            <summary>
            Updates the <see cref="P:Avalonia.Input.InputElement.IsEffectivelyEnabled"/> property based on the parent's
            <see cref="P:Avalonia.Input.InputElement.IsEffectivelyEnabled"/>.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="T:Avalonia.Input.InputExtensions">
            <summary>
            Defines extensions for the <see cref="T:Avalonia.Input.IInputElement"/> interface.
            </summary>
        </member>
        <member name="M:Avalonia.Input.InputExtensions.GetInputElementsAt(Avalonia.Input.IInputElement,Avalonia.Point)">
            <summary>
            Returns the active input elements at a point on an <see cref="T:Avalonia.Input.IInputElement"/>.
            </summary>
            <param name="element">The element to test.</param>
            <param name="p">The point on <paramref name="element"/>.</param>
            <returns>
            The active input elements found at the point, ordered topmost first.
            </returns>
        </member>
        <member name="M:Avalonia.Input.InputExtensions.InputHitTest(Avalonia.Input.IInputElement,Avalonia.Point)">
            <summary>
            Returns the topmost active input element at a point on an <see cref="T:Avalonia.Input.IInputElement"/>.
            </summary>
            <param name="element">The element to test.</param>
            <param name="p">The point on <paramref name="element"/>.</param>
            <returns>The topmost <see cref="T:Avalonia.Input.IInputElement"/> at the specified position.</returns>
        </member>
        <member name="M:Avalonia.Input.InputExtensions.InputHitTest(Avalonia.Input.IInputElement,Avalonia.Point,System.Func{Avalonia.Visual,System.Boolean})">
            <summary>
            Returns the topmost active input element at a point on an <see cref="T:Avalonia.Input.IInputElement"/>.
            </summary>
            <param name="element">The element to test.</param>
            <param name="p">The point on <paramref name="element"/>.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The topmost <see cref="T:Avalonia.Input.IInputElement"/> at the specified position.</returns>
        </member>
        <member name="T:Avalonia.Input.InputManager">
            <summary>
            Receives input from the windowing subsystem and dispatches it to interested parties
            for processing.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputManager.Instance">
            <summary>
            Gets the global instance of the input manager.
            </summary>
        </member>
        <member name="P:Avalonia.Input.InputManager.PreProcess">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Input.InputManager.Process">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Input.InputManager.PostProcess">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Input.InputManager.ProcessInput(Avalonia.Input.Raw.RawInputEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Input.InputMethod.IsInputMethodEnabledProperty">
            <summary>
                A dependency property that enables alternative text inputs.
            </summary>
        </member>
        <member name="M:Avalonia.Input.InputMethod.SetIsInputMethodEnabled(Avalonia.Input.InputElement,System.Boolean)">
            <summary>
            Setter for IsInputMethodEnabled AvaloniaProperty
            </summary>
        </member>
        <member name="M:Avalonia.Input.InputMethod.GetIsInputMethodEnabled(Avalonia.Input.InputElement)">
            <summary>
            Getter for IsInputMethodEnabled AvaloniaProperty
            </summary>
        </member>
        <member name="T:Avalonia.Input.IPenDevice">
            <summary>
            Represents a pen/stylus device.
            </summary>
        </member>
        <member name="T:Avalonia.Input.IPointer">
            <summary>
            Identifies specific pointer generated by input device.
            </summary>
            <remarks>
            Some devices, for instance, touchscreen might generate a pointer on each physical contact.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.IPointer.Id">
            <summary>
            Gets a unique identifier for the input pointer.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IPointer.Capture(Avalonia.Input.IInputElement)">
            <summary>
            Captures pointer input to the specified control.
            </summary>
            <param name="control">The control.</param>
            <remarks>
            When an element captures the pointer, it receives pointer input whether the cursor is 
            within the control's bounds or not. The current pointer capture control is exposed
            by the <see cref="P:Avalonia.Input.IPointer.Captured"/> property.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.IPointer.Captured">
            <summary>
            Gets the control that is currently capturing by the pointer, if any.
            </summary>
            <remarks>
            When an element captures the pointer, it receives pointer input whether the cursor is 
            within the control's bounds or not. To set the pointer capture, call the 
            <see cref="M:Avalonia.Input.IPointer.Capture(Avalonia.Input.IInputElement)"/> method.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.IPointer.Type">
            <summary>
            Gets the pointer device type.
            </summary>
        </member>
        <member name="P:Avalonia.Input.IPointer.IsPrimary">
            <summary>
            Gets a value that indicates whether the input is from the primary pointer when multiple pointers are registered.
            </summary>
        </member>
        <member name="T:Avalonia.Input.PointerType">
            <summary>
            Enumerates pointer device types.
            </summary>
        </member>
        <member name="M:Avalonia.Input.IPointerDevice.TryGetPointer(Avalonia.Input.Raw.RawPointerEventArgs)">
            <summary>
            Gets a pointer for specific event args.
            </summary>
            <remarks>
            If pointer doesn't exist or wasn't yet created this method will return null.
            </remarks>
            <param name="ev">Raw pointer event args associated with the pointer.</param>
            <returns>The pointer.</returns>
        </member>
        <member name="T:Avalonia.Input.Key">
            <summary>
            Defines the keys available on a keyboard.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Cancel">
            <summary>
            The Cancel key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Back">
            <summary>
            The Back key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LineFeed">
            <summary>
            The Linefeed key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Clear">
            <summary>
            The Clear key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Return">
            <summary>
            The Return key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Pause">
            <summary>
            The Pause key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.CapsLock">
            <summary>
            The Caps Lock key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Capital">
            <summary>
            The Caps Lock key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.HangulMode">
            <summary>
            The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.KanaMode">
            <summary>
            The IME Kana mode key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.JunjaMode">
            <summary>
            The IME Junja mode key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.FinalMode">
            <summary>
            The IME Final mode key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.KanjiMode">
            <summary>
            The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.HanjaMode">
            <summary>
            The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Escape">
            <summary>
            The Escape key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.ImeConvert">
            <summary>
            The IME Convert key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.ImeNonConvert">
            <summary>
            The IME NonConvert key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.ImeAccept">
            <summary>
            The IME Accept key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.ImeModeChange">
            <summary>
            The IME Mode change key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Space">
            <summary>
            The space bar.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Prior">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Next">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Left">
            <summary>
            The Left arrow key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Up">
            <summary>
            The Up arrow key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Right">
            <summary>
            The Right arrow key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Down">
            <summary>
            The Down arrow key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Select">
            <summary>
            The Select key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Print">
            <summary>
            The Print key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Execute">
            <summary>
            The Execute key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Snapshot">
            <summary>
            The Print Screen key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.PrintScreen">
            <summary>
            The Print Screen key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Help">
            <summary>
            The Help key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LWin">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.RWin">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Apps">
            <summary>
            The Application key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Sleep">
            <summary>
            The Sleep key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad0">
            <summary>
            The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad1">
            <summary>
            The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad2">
            <summary>
            The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad3">
            <summary>
            The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad4">
            <summary>
            The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad5">
            <summary>
            The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad6">
            <summary>
            The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad7">
            <summary>
            The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad8">
            <summary>
            The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumPad9">
            <summary>
            The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Multiply">
            <summary>
            The Multiply key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Add">
            <summary>
            The Add key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Separator">
            <summary>
            The Separator key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Subtract">
            <summary>
            The Subtract key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Decimal">
            <summary>
            The Decimal key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Divide">
            <summary>
            The Divide key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NumLock">
            <summary>
            The Numlock key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Scroll">
            <summary>
            The Scroll key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LeftCtrl">
            <summary>
            The left Ctrl key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.RightCtrl">
            <summary>
            The right Ctrl key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LeftAlt">
            <summary>
            The left Alt key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.RightAlt">
            <summary>
            The right Alt key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserBack">
            <summary>
            The browser Back key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserForward">
            <summary>
            The browser Forward key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserRefresh">
            <summary>
            The browser Refresh key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserStop">
            <summary>
            The browser Stop key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserSearch">
            <summary>
            The browser Search key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserFavorites">
            <summary>
            The browser Favorites key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.BrowserHome">
            <summary>
            The browser Home key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.VolumeMute">
            <summary>
            The Volume Mute key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.VolumeDown">
            <summary>
            The Volume Down key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.VolumeUp">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.MediaNextTrack">
            <summary>
            The media Next Track key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.MediaPreviousTrack">
            <summary>
            The media Previous Track key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.MediaStop">
            <summary>
            The media Stop key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.MediaPlayPause">
            <summary>
            The media Play/Pause key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LaunchMail">
            <summary>
            The Launch Mail key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.SelectMedia">
            <summary>
            The Select Media key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LaunchApplication1">
            <summary>
            The Launch Application 1 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.LaunchApplication2">
            <summary>
            The Launch Application 2 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemSemicolon">
            <summary>
            The OEM Semicolon key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem1">
            <summary>
            The OEM 1 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemPlus">
            <summary>
            The OEM Plus key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemComma">
            <summary>
            The OEM Comma key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemMinus">
            <summary>
            The OEM Minus key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemPeriod">
            <summary>
            The OEM Period key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemQuestion">
            <summary>
            The OEM Question Mark key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem2">
            <summary>
            The OEM 2 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemTilde">
            <summary>
            The OEM Tilde key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem3">
            <summary>
            The OEM 3 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.AbntC1">
            <summary>
            The ABNT_C1 (Brazilian) key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.AbntC2">
            <summary>
            The ABNT_C2 (Brazilian) key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemOpenBrackets">
            <summary>
            The OEM Open Brackets key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem4">
            <summary>
            The OEM 4 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemPipe">
            <summary>
            The OEM Pipe key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem5">
            <summary>
            The OEM 5 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemCloseBrackets">
            <summary>
            The OEM Close Brackets key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem6">
            <summary>
            The OEM 6 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemQuotes">
            <summary>
            The OEM Quotes key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem7">
            <summary>
            The OEM 7 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem8">
            <summary>
            The OEM 8 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemBackslash">
            <summary>
            The OEM Backslash key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Oem102">
            <summary>
            The OEM 3 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.ImeProcessed">
            <summary>
            A special key masking the real key being processed by an IME.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.System">
            <summary>
            A special key masking the real key being processed as a system key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemAttn">
            <summary>
            The OEM ATTN key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeAlphanumeric">
            <summary>
            The DBE_ALPHANUMERIC key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemFinish">
            <summary>
            The OEM Finish key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeKatakana">
            <summary>
            The DBE_KATAKANA key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeHiragana">
            <summary>
            The DBE_HIRAGANA key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemCopy">
            <summary>
            The OEM Copy key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeSbcsChar">
            <summary>
            The DBE_SBCSCHAR key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemAuto">
            <summary>
            The OEM Auto key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeDbcsChar">
            <summary>
            The DBE_DBCSCHAR key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemEnlw">
            <summary>
            The OEM ENLW key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemBackTab">
            <summary>
            The OEM BackTab key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeRoman">
            <summary>
            The DBE_ROMAN key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeNoRoman">
            <summary>
            The DBE_NOROMAN key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.CrSel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeEnterWordRegisterMode">
            <summary>
            The DBE_ENTERWORDREGISTERMODE key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.ExSel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeEnterImeConfigureMode">
            <summary>
            The DBE_ENTERIMECONFIGMODE key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.EraseEof">
            <summary>
            The ERASE EOF Key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeFlushString">
            <summary>
            The DBE_FLUSHSTRING key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Play">
            <summary>
            The Play key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeCodeInput">
            <summary>
            The DBE_CODEINPUT key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeNoCodeInput">
            <summary>
            The DBE_NOCODEINPUT key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Zoom">
            <summary>
            The Zoom key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.NoName">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeDetermineString">
            <summary>
            The DBE_DETERMINESTRING key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DbeEnterDialogConversionMode">
            <summary>
            The DBE_ENTERDLGCONVERSIONMODE key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.OemClear">
            <summary>
            The OEM Clear key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.DeadCharProcessed">
            <summary>
            The key is used with another key to create a single combined character.
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.FnLeftArrow">
            <summary>
            OSX Platform-specific Fn+Left key
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.FnRightArrow">
            <summary>
            OSX Platform-specific Fn+Right key
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.FnUpArrow">
            <summary>
            OSX Platform-specific Fn+Up key
            </summary>
        </member>
        <member name="F:Avalonia.Input.Key.FnDownArrow">
            <summary>
            OSX Platform-specific Fn+Down key
            </summary>
        </member>
        <member name="T:Avalonia.Input.KeyboardNavigation">
            <summary>
            Defines attached properties that control keyboard navigation behaviour for a container.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigation.TabIndexProperty">
            <summary>
            Defines the TabIndex attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigation.TabNavigationProperty">
            <summary>
            Defines the TabNavigation attached property.
            </summary>
            <remarks>
            The TabNavigation attached property defines how pressing the Tab key causes focus to
            be navigated between the children of the container.
            </remarks>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigation.TabOnceActiveElementProperty">
            <summary>
            Defines the TabOnceActiveElement attached property.
            </summary>
            <remarks>
            When focus enters a container which has its <see cref="F:Avalonia.Input.KeyboardNavigation.TabNavigationProperty"/>
            attached property set to <see cref="F:Avalonia.Input.KeyboardNavigationMode.Once"/>, this property
            defines to which child the focus should move.
            </remarks>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigation.IsTabStopProperty">
            <summary>
            Defines the IsTabStop attached property.
            </summary>
            <remarks>
            The IsTabStop attached property determines whether the control is focusable by tab navigation. 
            </remarks>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.GetTabIndex(Avalonia.Input.IInputElement)">
            <summary>
            Gets the <see cref="F:Avalonia.Input.KeyboardNavigation.TabIndexProperty"/> for an element.
            </summary>
            <param name="element">The container.</param>
            <returns>The <see cref="T:Avalonia.Input.KeyboardNavigationMode"/> for the container.</returns>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.SetTabIndex(Avalonia.Input.IInputElement,System.Int32)">
            <summary>
            Sets the <see cref="F:Avalonia.Input.KeyboardNavigation.TabIndexProperty"/> for an element.
            </summary>
            <param name="element">The element.</param>
            <param name="value">The tab index.</param>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.GetTabNavigation(Avalonia.Input.InputElement)">
            <summary>
            Gets the <see cref="F:Avalonia.Input.KeyboardNavigation.TabNavigationProperty"/> for a container.
            </summary>
            <param name="element">The container.</param>
            <returns>The <see cref="T:Avalonia.Input.KeyboardNavigationMode"/> for the container.</returns>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.SetTabNavigation(Avalonia.Input.InputElement,Avalonia.Input.KeyboardNavigationMode)">
            <summary>
            Sets the <see cref="F:Avalonia.Input.KeyboardNavigation.TabNavigationProperty"/> for a container.
            </summary>
            <param name="element">The container.</param>
            <param name="value">The <see cref="T:Avalonia.Input.KeyboardNavigationMode"/> for the container.</param>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.GetTabOnceActiveElement(Avalonia.Input.InputElement)">
            <summary>
            Gets the <see cref="F:Avalonia.Input.KeyboardNavigation.TabOnceActiveElementProperty"/> for a container.
            </summary>
            <param name="element">The container.</param>
            <returns>The active element for the container.</returns>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.SetTabOnceActiveElement(Avalonia.Input.InputElement,Avalonia.Input.IInputElement)">
            <summary>
            Sets the <see cref="F:Avalonia.Input.KeyboardNavigation.TabOnceActiveElementProperty"/> for a container.
            </summary>
            <param name="element">The container.</param>
            <param name="value">The active element for the container.</param>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.SetIsTabStop(Avalonia.Input.InputElement,System.Boolean)">
            <summary>
            Sets the <see cref="F:Avalonia.Input.KeyboardNavigation.IsTabStopProperty"/> for an element.
            </summary>
            <param name="element">The container.</param>
            <param name="value">Value indicating whether the container is a tab stop.</param>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigation.GetIsTabStop(Avalonia.Input.InputElement)">
            <summary>
            Gets the <see cref="F:Avalonia.Input.KeyboardNavigation.IsTabStopProperty"/> for an element.
            </summary>
            <param name="element">The container.</param>
            <returns>Whether the container is a tab stop.</returns>
        </member>
        <member name="T:Avalonia.Input.KeyboardNavigationHandler">
            <summary>
            Handles keyboard navigation for a window.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationHandler._owner">
            <summary>
            The window to which the handler belongs.
            </summary>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigationHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the keyboard navigation handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigationHandler.GetNext(Avalonia.Input.IInputElement,Avalonia.Input.NavigationDirection)">
            <summary>
            Gets the next control in the specified navigation direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The navigation direction.</param>
            <returns>
            The next element in the specified direction, or null if <paramref name="element"/>
            was the last in the requested direction.
            </returns>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigationHandler.Move(Avalonia.Input.IInputElement,Avalonia.Input.NavigationDirection,Avalonia.Input.KeyModifiers)">
            <summary>
            Moves the focus in the specified direction.
            </summary>
            <param name="element">The current element.</param>
            <param name="direction">The direction to move.</param>
            <param name="keyModifiers">Any key modifiers active at the time of focus.</param>
        </member>
        <member name="M:Avalonia.Input.KeyboardNavigationHandler.OnKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles the Tab key being pressed in the window.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Input.KeyboardNavigationMode">
            <summary>
            Defines the mode of keyboard traversal within a container when the tab or arrow keys are
            pressed.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationMode.Continue">
            <summary>
            Items in the container will be cycled through, and focus will be moved to the
            previous/next container after the first/last control in the container.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationMode.Cycle">
            <summary>
            Items in the container will be cycled through, and moving past the first or last
            control in the container will cause the last/first control to be focused.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationMode.Contained">
            <summary>
            Items in the container will be cycled through and focus will stop moving when the edge
            of the container is reached.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationMode.Once">
            <summary>
            When focus is moved into the container, the control described by the
            <see cref="F:Avalonia.Input.KeyboardNavigation.TabOnceActiveElementProperty"/> attached property on the
            container will be focused. When focus moves away from this control, focus will move to
            the previous/next container.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationMode.None">
            <summary>
            The container's children will not be focused when using the tab key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.KeyboardNavigationMode.Local">
            <summary>
            TabIndexes are considered on local subtree only inside this container
            </summary>
        </member>
        <member name="T:Avalonia.Input.KeyGesture">
            <summary>
            Defines a keyboard input combination.
            </summary>
        </member>
        <member name="T:Avalonia.Input.MouseDevice">
            <summary>
            Represents a mouse device.
            </summary>
        </member>
        <member name="T:Avalonia.Input.NavigationDirection">
            <summary>
            Describes how focus should be moved by directional or tab keys.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Next">
            <summary>
            Move the focus to the next control in the tab order.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Previous">
            <summary>
            Move the focus to the previous control in the tab order.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.First">
            <summary>
            Move the focus to the first control in the tab order.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Last">
            <summary>
            Move the focus to the last control in the tab order.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Left">
            <summary>
            Move the focus to the left.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Right">
            <summary>
            Move the focus to the right.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Up">
            <summary>
            Move the focus up.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.Down">
            <summary>
            Move the focus down.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.PageUp">
            <summary>
            Move the focus up a page.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationDirection.PageDown">
            <summary>
            Move the focus down a page.
            </summary>
        </member>
        <member name="M:Avalonia.Input.NavigationDirectionExtensions.IsTab(Avalonia.Input.NavigationDirection)">
            <summary>
            Checks whether a <see cref="T:Avalonia.Input.NavigationDirection"/> represents a tab movement.
            </summary>
            <param name="direction">The direction.</param>
            <returns>
            True if the direction represents a tab movement (<see cref="F:Avalonia.Input.NavigationDirection.Next"/>
            or <see cref="F:Avalonia.Input.NavigationDirection.Previous"/>); otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Input.NavigationDirectionExtensions.IsDirectional(Avalonia.Input.NavigationDirection)">
            <summary>
            Checks whether a <see cref="T:Avalonia.Input.NavigationDirection"/> represents a directional movement.
            </summary>
            <param name="direction">The direction.</param>
            <returns>
            True if the direction represents a directional movement (any value except 
            <see cref="F:Avalonia.Input.NavigationDirection.Next"/> and <see cref="F:Avalonia.Input.NavigationDirection.Previous"/>);
            otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Input.NavigationDirectionExtensions.ToNavigationDirection(Avalonia.Input.Key,Avalonia.Input.KeyModifiers)">
            <summary>
            Converts a keypress into a <see cref="T:Avalonia.Input.NavigationDirection"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The keyboard modifiers.</param>
            <returns>
            A <see cref="T:Avalonia.Input.NavigationDirection"/> if the keypress represents a navigation keypress.
            </returns>
        </member>
        <member name="T:Avalonia.Input.NavigationMethod">
            <summary>
            Defines the method by which a focus change occurred.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationMethod.Unspecified">
            <summary>
            The focus was changed by an unspecified method, e.g. calling
            <see cref="M:Avalonia.Input.InputElement.Focus(Avalonia.Input.NavigationMethod,Avalonia.Input.KeyModifiers)"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationMethod.Tab">
            <summary>
            The focus was changed by the user tabbing between control.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationMethod.Directional">
            <summary>
            The focus was changed by the user pressing a directional navigation key.
            </summary>
        </member>
        <member name="F:Avalonia.Input.NavigationMethod.Pointer">
            <summary>
            The focus was changed by a pointer click.
            </summary>
        </member>
        <member name="T:Avalonia.Input.Navigation.FocusExtensions">
            <summary>
            Provides extension methods relating to control focus.
            </summary>
        </member>
        <member name="M:Avalonia.Input.Navigation.FocusExtensions.CanFocus(Avalonia.Input.IInputElement)">
            <summary>
            Checks if the specified element can be focused.
            </summary>
            <param name="e">The element.</param>
            <returns>True if the element can be focused.</returns>
        </member>
        <member name="M:Avalonia.Input.Navigation.FocusExtensions.CanFocusDescendants(Avalonia.Input.IInputElement)">
            <summary>
            Checks if descendants of the specified element can be focused.
            </summary>
            <param name="e">The element.</param>
            <returns>True if descendants of the element can be focused.</returns>
        </member>
        <member name="T:Avalonia.Input.Navigation.TabNavigation">
            <summary>
            The implementation for default tab navigation.
            </summary>
        </member>
        <member name="T:Avalonia.Input.PenDevice">
            <summary>
            Represents a pen/stylus device.
            </summary>
        </member>
        <member name="T:Avalonia.Input.Platform.PlatformHotkeyConfiguration">
            <summary>
            The PlatformHotkeyConfiguration class represents a configuration for platform-specific hotkeys in an Avalonia application. 
            </summary>
        </member>
        <member name="P:Avalonia.Input.Pointer.CapturedGestureRecognizer">
            <summary>
            Gets the gesture recognizer that is currently capturing by the pointer, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Input.Pointer.CaptureGestureRecognizer(Avalonia.Input.GestureRecognizers.GestureRecognizer)">
            <summary>
            Captures pointer input to the specified gesture recognizer.
            </summary>
            <param name="gestureRecognizer">The gesture recognizer.</param>
        </member>
        <member name="P:Avalonia.Input.PointerEventArgs.Pointer">
            <summary>
            Gets specific pointer generated by input device.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerEventArgs.Timestamp">
            <summary>
            Gets the time when the input occurred.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerEventArgs.KeyModifiers">
            <summary>
            Gets a value that indicates which key modifiers were active at the time that the pointer event was initiated.
            </summary>
        </member>
        <member name="M:Avalonia.Input.PointerEventArgs.GetPosition(Avalonia.Visual)">
            <summary>
            Gets the pointer position relative to a control.
            </summary>
            <param name="relativeTo">The visual whose coordinate system to use. Pass null for toplevel coordinate system</param>
            <returns>The pointer position in the control's coordinates.</returns>
        </member>
        <member name="M:Avalonia.Input.PointerEventArgs.GetCurrentPoint(Avalonia.Visual)">
            <summary>
            Returns the PointerPoint associated with the current event
            </summary>
            <param name="relativeTo">The visual whose coordinate system to use. Pass null for toplevel coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Input.PointerEventArgs.GetIntermediatePoints(Avalonia.Visual)">
            <summary>
            Returns the PointerPoint associated with the current event
            </summary>
            <param name="relativeTo">The visual which coordinate system to use. Pass null for toplevel coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Input.PointerEventArgs.PreventGestureRecognition">
            <summary>
            Prevents this event from being handled by other gesture recognizers in the route
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerEventArgs.Properties">
            <summary>
            Returns the current pointer point properties
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerReleasedEventArgs.InitialPressMouseButton">
            <summary>
            Gets the mouse button that triggered the corresponding PointerPressed event
            </summary>
        </member>
        <member name="T:Avalonia.Input.PointerPoint">
            <summary>
            Provides basic properties for the input pointer associated with a single mouse, pen/stylus, or touch contact.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPoint.Pointer">
            <summary>
            Gets specific pointer generated by input device.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPoint.Properties">
            <summary>
            Gets extended information about the input pointer.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPoint.Position">
            <summary>
            Gets the location of the pointer input in client coordinates.
            </summary>
        </member>
        <member name="T:Avalonia.Input.PointerPointProperties">
            <summary>
            Provides extended properties for a PointerPoint object.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsLeftButtonPressed">
            <summary>
            Gets a value that indicates whether the pointer input was triggered by the primary action mode of an input device.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsMiddleButtonPressed">
            <summary>
            Gets a value that indicates whether the pointer input was triggered by the tertiary action mode of an input device.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsRightButtonPressed">
            <summary>
            Gets a value that indicates whether the pointer input was triggered by the secondary action mode (if supported) of an input device.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsXButton1Pressed">
            <summary>
            Gets a value that indicates whether the pointer input was triggered by the first extended mouse button (XButton1).
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsXButton2Pressed">
            <summary>
            Gets a value that indicates whether the pointer input was triggered by the second extended mouse button (XButton2).
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsBarrelButtonPressed">
            <summary>
            Gets a value that indicates whether the barrel button of the pen/stylus device is pressed.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsEraser">
            <summary>
            Gets a value that indicates whether the input is from a pen eraser.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.IsInverted">
            <summary>
            Gets a value that indicates whether the digitizer pen is inverted.
            </summary>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.Twist">
            <summary>
            Gets the clockwise rotation in degrees of a pen device around its own major axis (such as when the user spins the pen in their fingers).
            </summary>
            <returns>
            A value between 0.0 and 359.0 in degrees of rotation. The default value is 0.0.
            </returns>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.Pressure">
            <summary>
            Gets a value that indicates the force that the pointer device (typically a pen/stylus) exerts on the surface of the digitizer.
            </summary>
            <returns>
            A value from 0 to 1.0. The default value is 0.5.
            </returns>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.XTilt">
            <summary>
            Gets the plane angle between the Y-Z plane and the plane that contains the Y axis and the axis of the input device (typically a pen/stylus).
            </summary>
            <returns>
            The value is 0.0 when the finger or pen is perpendicular to the digitizer surface, between 0.0 and 90.0 when tilted to the right of perpendicular, and between 0.0 and -90.0 when tilted to the left of perpendicular. The default value is 0.0.
            </returns>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.YTilt">
            <summary>
            Gets the plane angle between the X-Z plane and the plane that contains the X axis and the axis of the input device (typically a pen/stylus).
            </summary>
            <returns>
            The value is 0.0 when the finger or pen is perpendicular to the digitizer surface, between 0.0 and 90.0 when tilted towards the user, and between 0.0 and -90.0 when tilted away from the user. The default value is 0.0.
            </returns>
        </member>
        <member name="P:Avalonia.Input.PointerPointProperties.PointerUpdateKind">
            <summary>
            Gets the kind of pointer state change.
            </summary>
        </member>
        <member name="T:Avalonia.Input.Raw.RawInputEventArgs">
            <summary>
            A raw input event.
            </summary>
            <remarks>
            Raw input events are sent from the windowing subsystem to the <see cref="T:Avalonia.Input.InputManager"/>
            for processing: this gives an application the opportunity to pre-process the event. After
            pre-processing they are consumed by the relevant <see cref="P:Avalonia.Input.Raw.RawInputEventArgs.Device"/> and turned into
            standard Avalonia events.
            </remarks>
        </member>
        <member name="M:Avalonia.Input.Raw.RawInputEventArgs.#ctor(Avalonia.Input.IInputDevice,System.UInt64,Avalonia.Input.IInputRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Input.Raw.RawInputEventArgs"/> class.
            </summary>
            <param name="device">The associated device.</param>
            <param name="timestamp">The event timestamp.</param>
            <param name="root">The root from which the event originates.</param>
        </member>
        <member name="P:Avalonia.Input.Raw.RawInputEventArgs.Device">
            <summary>
            Gets the associated device.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawInputEventArgs.Root">
            <summary>
            Gets the root from which the event originates.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawInputEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled.
            </summary>
            <remarks>
            If an event is not marked handled after processing via the
            <see cref="T:Avalonia.Input.InputManager"/>, then it will be passed on to the underlying OS for
            handling.
            </remarks>
        </member>
        <member name="P:Avalonia.Input.Raw.RawInputEventArgs.Timestamp">
            <summary>
            Gets the timestamp associated with the event.
            </summary>
        </member>
        <member name="T:Avalonia.Input.Raw.RawPointerEventArgs">
            <summary>
            A raw mouse event.
            </summary>
        </member>
        <member name="M:Avalonia.Input.Raw.RawPointerEventArgs.#ctor(Avalonia.Input.IInputDevice,System.UInt64,Avalonia.Input.IInputRoot,Avalonia.Input.Raw.RawPointerEventType,Avalonia.Point,Avalonia.Input.RawInputModifiers)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Input.Raw.RawPointerEventArgs"/> class.
            </summary>
            <param name="device">The associated device.</param>
            <param name="timestamp">The event timestamp.</param>
            <param name="root">The root from which the event originates.</param>
            <param name="type">The type of the event.</param>
            <param name="position">The mouse position, in client DIPs.</param>
            <param name="inputModifiers">The input modifiers.</param>
        </member>
        <member name="M:Avalonia.Input.Raw.RawPointerEventArgs.#ctor(Avalonia.Input.IInputDevice,System.UInt64,Avalonia.Input.IInputRoot,Avalonia.Input.Raw.RawPointerEventType,Avalonia.Input.Raw.RawPointerPoint,Avalonia.Input.RawInputModifiers)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Input.Raw.RawPointerEventArgs"/> class.
            </summary>
            <param name="device">The associated device.</param>
            <param name="timestamp">The event timestamp.</param>
            <param name="root">The root from which the event originates.</param>
            <param name="type">The type of the event.</param>
            <param name="point">The point properties and position, in client DIPs.</param>
            <param name="inputModifiers">The input modifiers.</param>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerEventArgs.RawPointerId">
            <summary>
            Gets the raw pointer identifier.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerEventArgs.Point">
            <summary>
            Gets the pointer properties and position, in client DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerEventArgs.Position">
            <summary>
            Gets the mouse position, in client DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerEventArgs.Type">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerEventArgs.InputModifiers">
            <summary>
            Gets the input modifiers.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerEventArgs.IntermediatePoints">
            <summary>
            Points that were traversed by a pointer since the previous relevant event,
            only valid for Move and TouchUpdate
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerPoint.Position">
            <summary>
            Pointer position, in client DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerPoint.Twist">
            <inheritdoc cref="P:Avalonia.Input.PointerPointProperties.Twist" />
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerPoint.Pressure">
            <inheritdoc cref="P:Avalonia.Input.PointerPointProperties.Pressure" />
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerPoint.XTilt">
            <inheritdoc cref="P:Avalonia.Input.PointerPointProperties.XTilt" />
        </member>
        <member name="P:Avalonia.Input.Raw.RawPointerPoint.YTilt">
            <inheritdoc cref="P:Avalonia.Input.PointerPointProperties.YTilt" />
        </member>
        <member name="P:Avalonia.Input.ScrollGestureEventArgs.ShouldEndScrollGesture">
            <summary>
            When set the ScrollGestureRecognizer should stop its current active scroll gesture.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Normal">
            <summary>
            Default keyboard for the users configured input method.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Alpha">
            <summary>
            Display a keyboard that only has alphabetic characters.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Digits">
            <summary>
            Display a numeric keypad only capable of numbers. i.e. Phone number
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Pin">
            <summary>
            Display a numeric keypad for inputting a PIN.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Number">
            <summary>
            Display a numeric keypad capable of inputting numbers including decimal seperator and sign.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Email">
            <summary>
            Display a keyboard for entering an email address.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Url">
            <summary>
            Display a keyboard for entering a URL.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Name">
            <summary>
            Display a keyboard for entering a persons name.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Password">
            <summary>
            Display a keyboard for entering sensitive data.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Social">
            <summary>
            Display a keyboard suitable for #tag and @mentions.
            Not available on all platforms, will fallback to a suitable keyboard
            when not available.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputContentType.Search">
            <summary>
            Display a keyboard for entering a search keyword.
            </summary>
        </member>
        <member name="E:Avalonia.Input.TextInput.TextInputMethodClient.TextViewVisualChanged">
            <summary>
            Fires when the text view visual has changed
            </summary>
        </member>
        <member name="E:Avalonia.Input.TextInput.TextInputMethodClient.CursorRectangleChanged">
            <summary>
            Fires when the cursor rectangle has changed
            </summary>
        </member>
        <member name="E:Avalonia.Input.TextInput.TextInputMethodClient.SurroundingTextChanged">
            <summary>
            Fires when the surrounding text has changed
            </summary>
        </member>
        <member name="E:Avalonia.Input.TextInput.TextInputMethodClient.SelectionChanged">
            <summary>
            Fires when the selection has changed
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClient.TextViewVisual">
            <summary>
            The visual that's showing the text
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClient.SupportsPreedit">
            <summary>
            Indicates if TextViewVisual is capable of displaying non-committed input on the cursor position
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClient.SupportsSurroundingText">
            <summary>
            Indicates if text input client is capable of providing the text around the cursor
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClient.SurroundingText">
            <summary>
            Returns the text around the cursor, usually the current paragraph
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClient.CursorRectangle">
            <summary>
            Gets the cursor rectangle relative to the TextViewVisual
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClient.Selection">
            <summary>
            Gets or sets the curent selection range within current surrounding text.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputMethodClient.SetPreeditText(System.String)">
            <summary>
            Sets the non-committed input string
            </summary>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs.Client">
            <summary>
            Set this property to a valid text input client to enable input method interaction
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.ContentTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.ContentType"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetContentType(Avalonia.StyledElement,Avalonia.Input.TextInput.TextInputContentType)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.ContentTypeProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetContentType(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.ContentTypeProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>TextInputContentType</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.ContentType">
            <summary>
            The content type (mostly for determining the shape of the virtual keyboard)
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.ReturnKeyTypeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.ReturnKeyType"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetReturnKeyType(Avalonia.StyledElement,Avalonia.Input.TextInput.TextInputReturnKeyType)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.ReturnKeyTypeProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetReturnKeyType(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.ReturnKeyTypeProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>TextInputReturnKeyType</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.ReturnKeyType">
            <summary>
            Determines what the Return key says and how it behaves.
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.MultilineProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.Multiline"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetMultiline(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.MultilineProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetMultiline(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.MultilineProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>true if multiline</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.Multiline">
            <summary>
            Text is multiline
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.LowercaseProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.Lowercase"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetLowercase(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.LowercaseProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetLowercase(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.LowercaseProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>true if Lowercase</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.Lowercase">
            <summary>
            Text is in lower case
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.UppercaseProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.Uppercase"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetUppercase(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.UppercaseProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetUppercase(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.UppercaseProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>true if Uppercase</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.Uppercase">
            <summary>
            Text is in upper case
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.AutoCapitalizationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.AutoCapitalization"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetAutoCapitalization(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.AutoCapitalizationProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetAutoCapitalization(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.AutoCapitalizationProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>true if AutoCapitalization</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.AutoCapitalization">
            <summary>
            Automatically capitalize letters at the start of the sentence
            </summary>
        </member>
        <member name="F:Avalonia.Input.TextInput.TextInputOptions.IsSensitiveProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.TextInput.TextInputOptions.IsSensitive"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.SetIsSensitive(Avalonia.StyledElement,System.Boolean)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.IsSensitiveProperty"/> on a control.
            </summary>
            <param name="avaloniaObject">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Input.TextInput.TextInputOptions.GetIsSensitive(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Input.TextInput.TextInputOptions.IsSensitiveProperty"/>.
            </summary>
            <param name="avaloniaObject">The target.</param>
            <returns>true if IsSensitive</returns>
        </member>
        <member name="P:Avalonia.Input.TextInput.TextInputOptions.IsSensitive">
            <summary>
            Text contains sensitive data like card numbers and should not be stored  
            </summary>
        </member>
        <member name="T:Avalonia.Input.TouchDevice">
            <summary>
            Handles raw touch events
            </summary>
            <remarks>
            This class is supposed to be used on per-toplevel basis, don't use a shared one
            </remarks>
        </member>
        <member name="T:Avalonia.Interactivity.CancelRoutedEventArgs">
            <summary>
            Provides state information and data specific to a cancelable routed event.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.CancelRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.CancelRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.CancelRoutedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.CancelRoutedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:Avalonia.Interactivity.CancelRoutedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.CancelRoutedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="P:Avalonia.Interactivity.CancelRoutedEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the routed event should be canceled.
            </summary>
        </member>
        <member name="T:Avalonia.Interactivity.EventRoute">
            <summary>
            Holds the route for a routed event and supports raising an event on that route.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.EventRoute.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.RoutedEvent"/> class.
            </summary>
            <param name="e">The routed event to be raised.</param>
        </member>
        <member name="P:Avalonia.Interactivity.EventRoute.HasHandlers">
            <summary>
            Gets a value indicating whether the route has any handlers.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.EventRoute.Add(Avalonia.Interactivity.Interactive,System.Delegate,Avalonia.Interactivity.RoutingStrategies,System.Boolean,System.Action{System.Delegate,System.Object,Avalonia.Interactivity.RoutedEventArgs})">
            <summary>
            Adds a handler to the route.
            </summary>
            <param name="target">The target on which the event should be raised.</param>
            <param name="handler">The handler for the event.</param>
            <param name="routes">The routing strategies to listen to.</param>
            <param name="handledEventsToo">
            If true the handler will be raised even when the routed event is marked as handled.
            </param>
            <param name="adapter">
            An optional adapter which if supplied, will be called with <paramref name="handler"/>
            and the parameters for the event. This adapter can be used to avoid calling
            `DynamicInvoke` on the handler.
            </param>
        </member>
        <member name="M:Avalonia.Interactivity.EventRoute.AddClassHandler(Avalonia.Interactivity.Interactive)">
            <summary>
            Adds a class handler to the route.
            </summary>
            <param name="target">The target on which the event should be raised.</param>
        </member>
        <member name="M:Avalonia.Interactivity.EventRoute.RaiseEvent(Avalonia.Interactivity.Interactive,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Raises an event along the route.
            </summary>
            <param name="source">The event source.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Interactivity.EventRoute.Dispose">
            <summary>
            Disposes of the event route.
            </summary>
        </member>
        <member name="T:Avalonia.Interactivity.Interactive">
            <summary>
            Base class for objects that raise routed events.
            </summary>
        </member>
        <member name="P:Avalonia.Interactivity.Interactive.InteractiveParent">
            <summary>
            Gets the interactive parent of the object for bubbling and tunneling events.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.Interactive.AddHandler(Avalonia.Interactivity.RoutedEvent,System.Delegate,Avalonia.Interactivity.RoutingStrategies,System.Boolean)">
            <summary>
            Adds a handler for the specified routed event.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
            <param name="routes">The routing strategies to listen to.</param>
            <param name="handledEventsToo">Whether handled events should also be listened for.</param>
        </member>
        <member name="M:Avalonia.Interactivity.Interactive.AddHandler``1(Avalonia.Interactivity.RoutedEvent{``0},System.EventHandler{``0},Avalonia.Interactivity.RoutingStrategies,System.Boolean)">
            <summary>
            Adds a handler for the specified routed event.
            </summary>
            <typeparam name="TEventArgs">The type of the event's args.</typeparam>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
            <param name="routes">The routing strategies to listen to.</param>
            <param name="handledEventsToo">Whether handled events should also be listened for.</param>
        </member>
        <member name="M:Avalonia.Interactivity.Interactive.RemoveHandler(Avalonia.Interactivity.RoutedEvent,System.Delegate)">
            <summary>
            Removes a handler for the specified routed event.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Avalonia.Interactivity.Interactive.RemoveHandler``1(Avalonia.Interactivity.RoutedEvent{``0},System.EventHandler{``0})">
            <summary>
            Removes a handler for the specified routed event.
            </summary>
            <typeparam name="TEventArgs">The type of the event's args.</typeparam>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Avalonia.Interactivity.Interactive.RaiseEvent(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Raises a routed event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Interactivity.Interactive.BuildEventRoute(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Builds an event route for a routed event.
            </summary>
            <param name="e">The routed event.</param>
            <returns>An <see cref="T:Avalonia.Interactivity.EventRoute"/> describing the route.</returns>
            <remarks>
            Usually, calling <see cref="M:Avalonia.Interactivity.Interactive.RaiseEvent(Avalonia.Interactivity.RoutedEventArgs)"/> is sufficient to raise a routed
            event, however there are situations in which the construction of the event args is expensive
            and should be avoided if there are no handlers for an event. In these cases you can call
            this method to build the event route and check the <see cref="P:Avalonia.Interactivity.EventRoute.HasHandlers"/>
            property to see if there are any handlers registered on the route. If there are, call
            <see cref="M:Avalonia.Interactivity.EventRoute.RaiseEvent(Avalonia.Interactivity.Interactive,Avalonia.Interactivity.RoutedEventArgs)"/> to raise the event.
            </remarks>
        </member>
        <member name="T:Avalonia.Interactivity.InteractiveExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Avalonia.Interactivity.Interactive"/> interface.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.InteractiveExtensions.AddDisposableHandler``1(Avalonia.Interactivity.Interactive,Avalonia.Interactivity.RoutedEvent{``0},System.EventHandler{``0},Avalonia.Interactivity.RoutingStrategies,System.Boolean)">
            <summary>
            Adds a handler for the specified routed event and returns a disposable that can terminate the event subscription.
            </summary>
            <typeparam name="TEventArgs">The type of the event's args.</typeparam>
            <param name="o">Target for adding given event handler.</param>
            <param name="routedEvent">The routed event.</param>
            <param name="handler">The handler.</param>
            <param name="routes">The routing strategies to listen to.</param>
            <param name="handledEventsToo">Whether handled events should also be listened for.</param>
            <returns>A disposable that terminates the event subscription.</returns>
        </member>
        <member name="M:Avalonia.Interactivity.InteractiveExtensions.GetObservable``1(Avalonia.Interactivity.Interactive,Avalonia.Interactivity.RoutedEvent{``0},Avalonia.Interactivity.RoutingStrategies,System.Boolean)">
            <summary>
            Gets an observable for a <see cref="T:Avalonia.Interactivity.RoutedEvent`1"/>.
            </summary>
            <param name="o">The object to listen for events on.</param>
            <param name="routedEvent">The routed event.</param>
            <param name="routes">The routing strategies to listen to.</param>
            <param name="handledEventsToo">Whether handled events should also be listened for.</param>
            <returns>
            An observable which fires each time the event is raised.
            </returns>
        </member>
        <member name="T:Avalonia.Interactivity.RoutedEventArgs">
            <summary>
            Provides state information and data specific to a routed event.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.RoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.RoutedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Interactivity.RoutedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event associated with these event args.</param>
            <param name="source">The source object that raised the routed event.</param>
        </member>
        <member name="P:Avalonia.Interactivity.RoutedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the routed event has already been handled.
            </summary>
            <remarks>
            Once handled, a routed event should be ignored.
            </remarks>
        </member>
        <member name="P:Avalonia.Interactivity.RoutedEventArgs.RoutedEvent">
            <summary>
            Gets or sets the routed event associated with these event args.
            </summary>
        </member>
        <member name="P:Avalonia.Interactivity.RoutedEventArgs.Route">
            <summary>
            Gets or sets the routing strategy (direct, bubbling, or tunneling) of the routed event.
            </summary>
        </member>
        <member name="P:Avalonia.Interactivity.RoutedEventArgs.Source">
            <summary>
            Gets or sets the source object that raised the routed event.
            </summary>
        </member>
        <member name="T:Avalonia.Interactivity.RoutedEventRegistry">
            <summary>
            Tracks registered <see cref="T:Avalonia.Interactivity.RoutedEvent"/>s.
            </summary>
        </member>
        <member name="P:Avalonia.Interactivity.RoutedEventRegistry.Instance">
            <summary>
            Gets the <see cref="T:Avalonia.Interactivity.RoutedEventRegistry"/> instance.
            </summary>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventRegistry.Register(System.Type,Avalonia.Interactivity.RoutedEvent)">
            <summary>
            Registers a <see cref="T:Avalonia.Interactivity.RoutedEvent"/> on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="event">The event.</param>
            <remarks>
            You won't usually want to call this method directly, instead use the
            <see cref="M:Avalonia.Interactivity.RoutedEvent.Register``2(System.String,Avalonia.Interactivity.RoutingStrategies)"/>
            method.
            </remarks>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventRegistry.GetAllRegistered">
            <summary>
            Returns all routed events, that are currently registered in the event registry.
            </summary>
            <returns>All routed events, that are currently registered in the event registry.</returns>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventRegistry.GetRegistered(System.Type)">
            <summary>
            Returns all routed events registered with the provided type.
            If the type is not found or does not provide any routed events, an empty list is returned.
            </summary>
            <param name="type">The type.</param>
            <returns>All routed events registered with the provided type.</returns>
        </member>
        <member name="M:Avalonia.Interactivity.RoutedEventRegistry.GetRegistered``1">
            <summary>
            Returns all routed events registered with the provided type.         
            If the type is not found or does not provide any routed events, an empty list is returned.
            </summary>
            <typeparam name="TOwner">The type.</typeparam>
            <returns>All routed events registered with the provided type.</returns>
        </member>
        <member name="T:Avalonia.IStyledPropertyAccessor">
            <summary>
            Provides a runtime interface for interfacing with <see cref="T:Avalonia.StyledProperty`1"/>.
            </summary>
        </member>
        <member name="M:Avalonia.IStyledPropertyAccessor.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the property for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The default value.
            </returns>
        </member>
        <member name="M:Avalonia.IStyledPropertyAccessor.ValidateValue(System.Object)">
            <summary>
            Validates the specified property value.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the value is valid, otherwise false.</returns>
        </member>
        <member name="T:Avalonia.IStyledPropertyMetadata">
            <summary>
            Untyped interface to <see cref="T:Avalonia.StyledPropertyMetadata`1"/>
            </summary>
        </member>
        <member name="P:Avalonia.IStyledPropertyMetadata.DefaultValue">
            <summary>
            Gets the default value for the property.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.EffectiveViewportChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Layout.Layoutable.EffectiveViewportChanged"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.EffectiveViewportChangedEventArgs.EffectiveViewport">
            <summary>
            Gets the <see cref="T:Avalonia.Rect"/> representing the effective viewport.
            </summary>
            <remarks>
            The viewport is expressed in coordinates relative to the control that the event is
            raised on.
            </remarks>
        </member>
        <member name="T:Avalonia.Layout.IEmbeddedLayoutRoot">
            <summary>
            A special layout root with enforced size for Arrange pass
            </summary>
        </member>
        <member name="T:Avalonia.Layout.ILayoutManager">
            <summary>
            Manages measuring and arranging of controls.
            </summary>
        </member>
        <member name="E:Avalonia.Layout.ILayoutManager.LayoutUpdated">
            <summary>
            Raised when the layout manager completes a layout pass.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.ILayoutManager.InvalidateMeasure(Avalonia.Layout.Layoutable)">
            <summary>
            Notifies the layout manager that a control requires a measure.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Layout.ILayoutManager.InvalidateArrange(Avalonia.Layout.Layoutable)">
            <summary>
            Notifies the layout manager that a control requires an arrange.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Layout.ILayoutManager.ExecuteLayoutPass">
            <summary>
            Executes a layout pass.
            </summary>
            <remarks>
            You should not usually need to call this method explictly, the layout manager will
            schedule layout passes itself.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.ILayoutManager.ExecuteInitialLayoutPass">
            <summary>
            Executes the initial layout pass on a layout root.
            </summary>
            <remarks>
            You should not usually need to call this method explictly, the layout root will call
            it to carry out the initial layout of the control.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.ILayoutManager.RegisterEffectiveViewportListener(Avalonia.Layout.Layoutable)">
            <summary>
            Registers a control as wanting to receive effective viewport notifications.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Layout.ILayoutManager.UnregisterEffectiveViewportListener(Avalonia.Layout.Layoutable)">
            <summary>
            Registers a control as no longer wanting to receive effective viewport notifications.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Avalonia.Layout.ILayoutRoot">
            <summary>
            Defines the root of a layoutable tree.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.ILayoutRoot.ClientSize">
            <summary>
            The size available to lay out the controls.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.ILayoutRoot.LayoutScaling">
            <summary>
            The scaling factor to use in layout.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.ILayoutRoot.LayoutManager">
            <summary>
            Associated instance of layout manager
            </summary>
        </member>
        <member name="T:Avalonia.Layout.HorizontalAlignment">
            <summary>
            Defines how a control aligns itself horizontally in its parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.HorizontalAlignment.Stretch">
            <summary>
            The control stretches to fill the width of the parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.HorizontalAlignment.Left">
            <summary>
            The control aligns itself to the left of the parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.HorizontalAlignment.Center">
            <summary>
            The control centers itself in the parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.HorizontalAlignment.Right">
            <summary>
            The control aligns itself to the right of the parent control.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.VerticalAlignment">
            <summary>
            Defines how a control aligns itself vertically in its parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.VerticalAlignment.Stretch">
            <summary>
            The control stretches to fill the height of the parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.VerticalAlignment.Top">
            <summary>
            The control aligns itself to the top of the parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.VerticalAlignment.Center">
            <summary>
            The control centers itself within the parent control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.VerticalAlignment.Bottom">
            <summary>
            The control aligns itself to the bottom of the parent control.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.Layoutable">
            <summary>
            Implements layout-related functionality for a control.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.DesiredSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.DesiredSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.WidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.Width"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.HeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.Height"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.MinWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.MinWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.MaxWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.MaxWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.MinHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.MinHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.MaxHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.MaxHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.MarginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.Margin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.HorizontalAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.HorizontalAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.VerticalAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Layoutable.UseLayoutRoundingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.Layoutable.UseLayoutRounding"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Layout.Layoutable"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Layout.Layoutable.EffectiveViewportChanged">
            <summary>
            Occurs when the element's effective viewport changes.
            </summary>
        </member>
        <member name="E:Avalonia.Layout.Layoutable.LayoutUpdated">
            <summary>
            Occurs when a layout pass completes for the control.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.UpdateLayout">
            <summary>
            Executes a layout pass.
            </summary>
            <remarks>
            You should not usually need to call this method explictly, the layout manager will
            schedule layout passes itself.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.Width">
            <summary>
            Gets or sets the width of the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.Height">
            <summary>
            Gets or sets the height of the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.MinWidth">
            <summary>
            Gets or sets the minimum width of the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.MaxWidth">
            <summary>
            Gets or sets the maximum width of the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.MinHeight">
            <summary>
            Gets or sets the minimum height of the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.MaxHeight">
            <summary>
            Gets or sets the maximum height of the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.Margin">
            <summary>
            Gets or sets the margin around the element.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.HorizontalAlignment">
            <summary>
            Gets or sets the element's preferred horizontal alignment in its parent.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.VerticalAlignment">
            <summary>
            Gets or sets the element's preferred vertical alignment in its parent.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.DesiredSize">
            <summary>
            Gets the size that this element computed during the measure pass of the layout process.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.IsMeasureValid">
            <summary>
            Gets a value indicating whether the control's layout measure is valid.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.IsArrangeValid">
            <summary>
            Gets a value indicating whether the control's layouts arrange is valid.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.UseLayoutRounding">
            <summary>
            Gets or sets a value that determines whether the element should be snapped to pixel
            boundaries at layout time.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.PreviousMeasure">
            <summary>
            Gets the available size passed in the previous layout pass, if any.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.Layoutable.PreviousArrange">
            <summary>
            Gets the layout rect passed in the previous layout pass, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.ApplyTemplate">
            <summary>
            Creates the visual children of the control, if necessary
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.Measure(Avalonia.Size)">
            <summary>
            Carries out a measure of the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.Arrange(Avalonia.Rect)">
            <summary>
            Arranges the control and its children.
            </summary>
            <param name="rect">The control's new bounds.</param>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.InvalidateMeasure">
            <summary>
            Invalidates the measurement of the control and queues a new layout pass.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.InvalidateArrange">
            <summary>
            Invalidates the arrangement of the control and queues a new layout pass.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.ChildDesiredSizeChanged(Avalonia.Layout.Layoutable)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.AffectsMeasure``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the control's measurement.
            </summary>
            <typeparam name="T">The control which the property affects.</typeparam>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Layout.Layoutable.InvalidateMeasure"/> to be called on the element.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.AffectsArrange``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the control's arrangement.
            </summary>
            <typeparam name="T">The control which the property affects.</typeparam>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Layout.Layoutable.InvalidateArrange"/> to be called on the element.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.MeasureCore(Avalonia.Size)">
            <summary>
            The default implementation of the control's measure pass.
            </summary>
            <param name="availableSize">The size available to the control.</param>
            <returns>The desired size for the control.</returns>
            <remarks>
            This method calls <see cref="M:Avalonia.Layout.Layoutable.MeasureOverride(Avalonia.Size)"/> which is probably the method you
            want to override in order to modify a control's arrangement.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control and its child elements as part of a layout pass.
            </summary>
            <param name="availableSize">The size available to the control.</param>
            <returns>The desired size for the control.</returns>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.ArrangeCore(Avalonia.Rect)">
            <summary>
            The default implementation of the control's arrange pass.
            </summary>
            <param name="finalRect">The control's new bounds.</param>
            <remarks>
            This method calls <see cref="M:Avalonia.Layout.Layoutable.ArrangeOverride(Avalonia.Size)"/> which is probably the method you
            want to override in order to modify a control's arrangement.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.ArrangeOverride(Avalonia.Size)">
            <summary>
            Positions child elements as part of a layout pass.
            </summary>
            <param name="finalSize">The size available to the control.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.OnMeasureInvalidated">
            <summary>
            Called by InvalidateMeasure
            </summary>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.OnVisualParentChanged(Avalonia.Visual,Avalonia.Visual)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.LayoutManagedLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the layout manager raises a LayoutUpdated event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.IsInvalidRect(Avalonia.Rect)">
            <summary>
            Tests whether any of a <see cref="T:Avalonia.Rect"/>'s properties include negative values,
            a NaN or Infinity.
            </summary>
            <param name="rect">The rect.</param>
            <returns>True if the rect is invalid; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.IsInvalidSize(Avalonia.Size)">
            <summary>
            Tests whether any of a <see cref="T:Avalonia.Size"/>'s properties include negative values,
            a NaN or Infinity.
            </summary>
            <param name="size">The size.</param>
            <returns>True if the size is invalid; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Layout.Layoutable.NonNegative(Avalonia.Size)">
            <summary>
            Ensures neither component of a <see cref="T:Avalonia.Size"/> is negative.
            </summary>
            <param name="size">The size.</param>
            <returns>The non-negative size.</returns>
        </member>
        <member name="T:Avalonia.Layout.LayoutExtensions">
            <summary>
            Extension methods for layout types.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.LayoutExtensions.Align(Avalonia.Rect,Avalonia.Rect,Avalonia.Layout.HorizontalAlignment,Avalonia.Layout.VerticalAlignment)">
            <summary>
            Aligns a rect in a constraining rect according to horizontal and vertical alignment
            settings.
            </summary>
            <param name="rect">The rect to align.</param>
            <param name="constraint">The constraining rect.</param>
            <param name="horizontalAlignment">The horizontal alignment.</param>
            <param name="verticalAlignment">The vertical alignment.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Layout.LayoutHelper">
            <summary>
            Provides helper methods needed for layout.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.LayoutHelper.LayoutEpsilon">
            <summary>
            Epsilon value used for certain layout calculations.
            Based on the value in WPF LayoutDoubleUtil.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.ApplyLayoutConstraints(Avalonia.Layout.Layoutable,Avalonia.Size)">
            <summary>
            Calculates a control's size based on its <see cref="P:Avalonia.Layout.Layoutable.Width"/>,
            <see cref="P:Avalonia.Layout.Layoutable.Height"/>, <see cref="P:Avalonia.Layout.Layoutable.MinWidth"/>,
            <see cref="P:Avalonia.Layout.Layoutable.MaxWidth"/>, <see cref="P:Avalonia.Layout.Layoutable.MinHeight"/> and
            <see cref="P:Avalonia.Layout.Layoutable.MaxHeight"/>.
            </summary>
            <param name="control">The control.</param>
            <param name="constraints">The space available for the control.</param>
            <returns>The control's size.</returns>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.InvalidateSelfAndChildrenMeasure(Avalonia.Layout.Layoutable)">
            <summary>
            Invalidates measure for given control and all visual children recursively.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.GetLayoutScale(Avalonia.Layout.Layoutable)">
            <summary>
            Obtains layout scale of the given control.
            </summary>
            <param name="control">The control.</param>
            <exception cref="T:System.Exception">Thrown when control has no root or returned layout scaling is invalid.</exception>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.RoundLayoutSizeUp(Avalonia.Size,System.Double,System.Double)">
            <summary>
            Rounds a size to integer values for layout purposes, compensating for high DPI screen
            coordinates by rounding the size up to the nearest pixel.
            </summary>
            <param name="size">Input size.</param>
            <param name="dpiScaleX">DPI along x-dimension.</param>
            <param name="dpiScaleY">DPI along y-dimension.</param>
            <returns>Value of size that will be rounded under screen DPI.</returns>
            <remarks>
            This is a layout helper method. It takes DPI into account and also does not return
            the rounded value if it is unacceptable for layout, e.g. Infinity or NaN. It's a helper
            associated with the UseLayoutRounding property and should not be used as a general rounding
            utility.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.RoundLayoutThickness(Avalonia.Thickness,System.Double,System.Double)">
            <summary>
            Rounds a thickness to integer values for layout purposes, compensating for high DPI screen
            coordinates.
            </summary>
            <param name="thickness">Input thickness.</param>
            <param name="dpiScaleX">DPI along x-dimension.</param>
            <param name="dpiScaleY">DPI along y-dimension.</param>
            <returns>Value of thickness that will be rounded under screen DPI.</returns>
            <remarks>
            This is a layout helper method. It takes DPI into account and also does not return
            the rounded value if it is unacceptable for layout, e.g. Infinity or NaN. It's a helper
            associated with the UseLayoutRounding property and should not be used as a general rounding
            utility.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.RoundLayoutValue(System.Double,System.Double)">
            <summary>
            Calculates the value to be used for layout rounding at high DPI by rounding the value
            up or down to the nearest pixel.
            </summary>
            <param name="value">Input value to be rounded.</param>
            <param name="dpiScale">Ratio of screen's DPI to layout DPI</param>
            <returns>Adjusted value that will produce layout rounding on screen at high dpi.</returns>
            <remarks>
            This is a layout helper method. It takes DPI into account and also does not return
            the rounded value if it is unacceptable for layout, e.g. Infinity or NaN. It's a helper
            associated with the UseLayoutRounding property and should not be used as a general rounding
            utility.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.LayoutHelper.RoundLayoutValueUp(System.Double,System.Double)">
            <summary>
            Calculates the value to be used for layout rounding at high DPI by rounding the value up
            to the nearest pixel.
            </summary>
            <param name="value">Input value to be rounded.</param>
            <param name="dpiScale">Ratio of screen's DPI to layout DPI</param>
            <returns>Adjusted value that will produce layout rounding on screen at high dpi.</returns>
            <remarks>
            This is a layout helper method. It takes DPI into account and also does not return
            the rounded value if it is unacceptable for layout, e.g. Infinity or NaN. It's a helper
            associated with the UseLayoutRounding property and should not be used as a general rounding
            utility.
            </remarks>
        </member>
        <member name="T:Avalonia.Layout.LayoutHelper.MinMax">
            <summary>
            Calculates the min and max height for a control. Ported from WPF.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.LayoutInformation">
            <summary>
            Provides access to layout information of a control.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.LayoutInformation.GetPreviousMeasureConstraint(Avalonia.Layout.Layoutable)">
            <summary>
            Gets the available size constraint passed in the previous layout pass.
            </summary>
            <param name="control">The control.</param>
            <returns>Previous control measure constraint, if any.</returns>
        </member>
        <member name="M:Avalonia.Layout.LayoutInformation.GetPreviousArrangeBounds(Avalonia.Layout.Layoutable)">
            <summary>
            Gets the control bounds used in the previous layout arrange pass.
            </summary>
            <param name="control">The control.</param>
            <returns>Previous control arrange bounds, if any.</returns>
        </member>
        <member name="T:Avalonia.Layout.LayoutManager">
            <summary>
            Manages measuring and arranging of controls.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.LayoutManager.InvalidateMeasure(Avalonia.Layout.Layoutable)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Layout.LayoutManager.InvalidateArrange(Avalonia.Layout.Layoutable)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Layout.LayoutManager.ExecuteLayoutPass">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Layout.LayoutManager.ExecuteInitialLayoutPass">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Layout.Orientation">
            <summary>
            Defines vertical or horizontal orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:Avalonia.Logging.ILogSink">
            <summary>
            Defines a sink for Avalonia logging messages.
            </summary>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.IsEnabled(Avalonia.Logging.LogEventLevel,System.String)">
            <summary>
            Checks if given log level and area is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The log area.</param>
            <returns><see langword="true"/> if given log level is enabled.</returns>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String,System.Object[])">
            <summary>
            Logs a new event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValues">The message property values.</param>
        </member>
        <member name="T:Avalonia.Logging.LogArea">
            <summary>
            Specifies the area in which a log event occurred.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Property">
            <summary>
            The log event comes from the property system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Binding">
            <summary>
            The log event comes from the binding system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Animations">
            <summary>
            The log event comes from the animations system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Visual">
            <summary>
            The log event comes from the visual system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Layout">
            <summary>
            The log event comes from the layout system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Control">
            <summary>
            The log event comes from the control system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Platform">
            <summary>
            The log event comes from Win32 Platform.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Win32Platform">
            <summary>
            The log event comes from Win32 Platform.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.X11Platform">
            <summary>
            The log event comes from X11 Platform.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.AndroidPlatform">
            <summary>
            The log event comes from Android Platform.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.IOSPlatform">
            <summary>
            The log event comes from iOS Platform.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.LinuxFramebufferPlatform">
            <summary>
            The log event comes from LinuxFramebuffer Platform
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.FreeDesktopPlatform">
            <summary>
            The log event comes from FreeDesktop Platform
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.macOSPlatform">
            <summary>
            The log event comes from macOS Platform
            </summary>
        </member>
        <member name="T:Avalonia.Logging.LogEventLevel">
            <summary>
            Specifies the meaning and relative importance of a log event.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Verbose">
            <summary>
            Anything and everything you might want to know about a running block of code.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Debug">
            <summary>
            Internal system events that aren't necessarily observable from the outside.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Information">
            <summary>
            The lifeblood of operational intelligence - things happen.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Error">
            <summary>
            Functionality is unavailable, invariants are broken or data is lost.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Fatal">
            <summary>
            If you have a pager, it goes off when one of these occurs.
            </summary>
        </member>
        <member name="T:Avalonia.Logging.Logger">
            <summary>
            Logs avalonia messages.
            </summary>
        </member>
        <member name="P:Avalonia.Logging.Logger.Sink">
            <summary>
            Gets or sets the application-defined sink that receives the messages.
            </summary>
        </member>
        <member name="M:Avalonia.Logging.Logger.IsEnabled(Avalonia.Logging.LogEventLevel,System.String)">
            <summary>
            Checks if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The log area.</param>
            <returns><see langword="true"/> if given log level is enabled.</returns>
        </member>
        <member name="M:Avalonia.Logging.Logger.TryGet(Avalonia.Logging.LogEventLevel,System.String)">
            <summary>
            Returns parametrized logging sink if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates from.</param>
            <returns>Log sink or <see langword="null"/> if log level is not enabled.</returns>
        </member>
        <member name="M:Avalonia.Logging.Logger.TryGet(Avalonia.Logging.LogEventLevel,System.String,Avalonia.Logging.ParametrizedLogger@)">
            <summary>
            Returns parametrized logging sink if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates from.</param>
            <param name="outLogger">Log sink that is valid only if method returns <see langword="true"/>.</param>
            <returns><see langword="true"/> if logger was obtained successfully.</returns>
        </member>
        <member name="T:Avalonia.Logging.ParametrizedLogger">
            <summary>
            Logger sink parametrized for given logging level.
            </summary>
        </member>
        <member name="P:Avalonia.Logging.ParametrizedLogger.IsValid">
            <summary>
            Checks if this logger can be used.
            </summary>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log(System.Object,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``1(System.Object,System.String,``0)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``2(System.Object,System.String,``0,``1)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``3(System.Object,System.String,``0,``1,``2)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``4(System.Object,System.String,``0,``1,``2,``3)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
            <param name="propertyValue3">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``5(System.Object,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
            <param name="propertyValue3">Message property value.</param>
            <param name="propertyValue4">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``6(System.Object,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Logs an event.
            </summary>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
            <param name="propertyValue3">Message property value.</param>
            <param name="propertyValue4">Message property value.</param>
            <param name="propertyValue5">Message property value.</param>
        </member>
        <member name="T:Avalonia.LogicalTree.ChildIndexChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.LogicalTree.ChildIndexChangedAction.ChildIndexChanged">
            <summary>
            The index of a single child changed.
            </summary>
        </member>
        <member name="F:Avalonia.LogicalTree.ChildIndexChangedAction.ChildIndexesReset">
            <summary>
            The index of multiple children changed and all children should be re-evaluated.
            </summary>
        </member>
        <member name="F:Avalonia.LogicalTree.ChildIndexChangedAction.TotalCountChanged">
            <summary>
            The total number of children changed.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.ChildIndexChangedEventArgs">
            <summary>
            Event args for <see cref="E:Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.LogicalTree.ChildIndexChangedEventArgs.#ctor(Avalonia.LogicalTree.ILogical,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.LogicalTree.ChildIndexChangedEventArgs"/> class with
            an action of <see cref="F:Avalonia.LogicalTree.ChildIndexChangedAction.ChildIndexChanged"/>.
            </summary>
            <param name="child">The child whose index was changed.</param>
            <param name="index">The new index of the child.</param>
        </member>
        <member name="P:Avalonia.LogicalTree.ChildIndexChangedEventArgs.Action">
            <summary>
            Gets the type of change action that ocurred on the list control.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ChildIndexChangedEventArgs.Child">
            <summary>
            Gets the logical child whose index was changed or null if all children should be re-evaluated.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ChildIndexChangedEventArgs.Index">
            <summary>
            Gets the new index of <see cref="P:Avalonia.LogicalTree.ChildIndexChangedEventArgs.Child"/> or -1 if all children should be re-evaluated.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ChildIndexChangedEventArgs.ChildIndexesReset">
            <summary>
            Gets an instance of the <see cref="T:Avalonia.LogicalTree.ChildIndexChangedEventArgs"/> with an action of
            <see cref="F:Avalonia.LogicalTree.ChildIndexChangedAction.ChildIndexesReset"/>.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ChildIndexChangedEventArgs.TotalCountChanged">
            <summary>
            Gets an instance of the <see cref="T:Avalonia.LogicalTree.ChildIndexChangedEventArgs"/> with an action of
            <see cref="F:Avalonia.LogicalTree.ChildIndexChangedAction.TotalCountChanged"/>.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.ControlLocator">
            <summary>
            Locates controls relative to other controls.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.IChildIndexProvider">
            <summary>
            Child's index and total count information provider used by list-controls (ListBox, StackPanel, etc.)
            </summary>
            <remarks>
            Used by nth-child and nth-last-child selectors. 
            </remarks>
        </member>
        <member name="M:Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical)">
            <summary>
            Gets child's actual index in order of the original source.
            </summary>
            <param name="child">Logical child.</param>
            <returns>Index or -1 if child was not found.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(System.Int32@)">
            <summary>
            Total children count or null if source is infinite.
            Some Avalonia features might not work if <see cref="M:Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(System.Int32@)"/> returns false, for instance: nth-last-child selector.
            </summary>
        </member>
        <member name="E:Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged">
            <summary>
            Notifies subscriber when a child's index was changed.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.ILogical">
            <summary>
            Represents a node in the logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.LogicalTree.ILogical.AttachedToLogicalTree">
            <summary>
            Raised when the control is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.LogicalTree.ILogical.DetachedFromLogicalTree">
            <summary>
            Raised when the control is detached from a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ILogical.IsAttachedToLogicalTree">
            <summary>
            Gets a value indicating whether the element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ILogical.LogicalParent">
            <summary>
            Gets the logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ILogical.LogicalChildren">
            <summary>
            Gets the logical children.
            </summary>
        </member>
        <member name="M:Avalonia.LogicalTree.ILogical.NotifyAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Notifies the control that it is being attached to a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="M:Avalonia.LogicalTree.ILogical.NotifyDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Notifies the control that it is being detached from a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="M:Avalonia.LogicalTree.ILogical.NotifyResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <summary>
            Notifies the control that a change has been made to resources that apply to it.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="T:Avalonia.LogicalTree.ILogicalRoot">
            <summary>
            Represents a root of a logical tree.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.LogicalExtensions">
            <summary>
            Provides extension methods for working with the logical tree.
            </summary>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetLogicalAncestors(Avalonia.LogicalTree.ILogical)">
            <summary>
            Enumerates the ancestors of an <see cref="T:Avalonia.LogicalTree.ILogical"/> in the logical tree.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The logical's ancestors.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetSelfAndLogicalAncestors(Avalonia.LogicalTree.ILogical)">
            <summary>
            Enumerates an <see cref="T:Avalonia.LogicalTree.ILogical"/> and its ancestors in the logical tree.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The logical and its ancestors.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.FindLogicalAncestorOfType``1(Avalonia.LogicalTree.ILogical,System.Boolean)">
            <summary>
            Finds first ancestor of given type.
            </summary>
            <typeparam name="T">Ancestor type.</typeparam>
            <param name="logical">The logical.</param>
            <param name="includeSelf">If given logical should be included in search.</param>
            <returns>First ancestor of given type.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetLogicalChildren(Avalonia.LogicalTree.ILogical)">
            <summary>
            Enumerates the children of an <see cref="T:Avalonia.LogicalTree.ILogical"/> in the logical tree.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The logical children.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetLogicalDescendants(Avalonia.LogicalTree.ILogical)">
            <summary>
            Enumerates the descendants of an <see cref="T:Avalonia.LogicalTree.ILogical"/> in the logical tree.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The logical's ancestors.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetSelfAndLogicalDescendants(Avalonia.LogicalTree.ILogical)">
            <summary>
            Enumerates an <see cref="T:Avalonia.LogicalTree.ILogical"/> and its descendants in the logical tree.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The logical and its ancestors.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.FindLogicalDescendantOfType``1(Avalonia.LogicalTree.ILogical,System.Boolean)">
            <summary>
            Finds first descendant of given type.
            </summary>
            <typeparam name="T">Descendant type.</typeparam>
            <param name="logical">The logical.</param>
            <param name="includeSelf">If given logical should be included in search.</param>
            <returns>First descendant of given type.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetLogicalParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Gets the logical parent of an <see cref="T:Avalonia.LogicalTree.ILogical"/>.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The parent, or null if the logical is unparented.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetLogicalParent``1(Avalonia.LogicalTree.ILogical)">
            <summary>
            Gets the logical parent of an <see cref="T:Avalonia.LogicalTree.ILogical"/>.
            </summary>
            <typeparam name="T">The type of the logical parent.</typeparam>
            <param name="logical">The logical.</param>
            <returns>
            The parent, or null if the logical is unparented or its parent is not of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.GetLogicalSiblings(Avalonia.LogicalTree.ILogical)">
            <summary>
            Enumerates the siblings of an <see cref="T:Avalonia.LogicalTree.ILogical"/> in the logical tree.
            </summary>
            <param name="logical">The logical.</param>
            <returns>The logical siblings.</returns>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalExtensions.IsLogicalAncestorOf(Avalonia.LogicalTree.ILogical,Avalonia.LogicalTree.ILogical)">
            <summary>
            Tests whether an <see cref="T:Avalonia.LogicalTree.ILogical"/> is an ancestor of another logical.
            </summary>
            <param name="logical">The logical.</param>
            <param name="target">The potential descendant.</param>
            <returns>
            True if <paramref name="logical"/> is an ancestor of <paramref name="target"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs">
            <summary>
            Holds the event arguments for the <see cref="E:Avalonia.LogicalTree.ILogical.AttachedToLogicalTree"/> and 
            <see cref="E:Avalonia.LogicalTree.ILogical.DetachedFromLogicalTree"/> events.
            </summary>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.#ctor(Avalonia.LogicalTree.ILogicalRoot,Avalonia.LogicalTree.ILogical,Avalonia.LogicalTree.ILogical)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs"/> class.
            </summary>
            <param name="root">The root of the logical tree.</param>
            <param name="source">The control being attached/detached.</param>
            <param name="parent">The <see cref="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Parent"/>.</param>
        </member>
        <member name="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Root">
            <summary>
            Gets the root of the logical tree that the control is being attached to or detached from.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Source">
            <summary>
            Gets the control that was attached or detached from the logical tree.
            </summary>
            <remarks>
            Logical tree attachment events travel down the attached logical tree from the point of
            attachment/detachment, so this control may be different from the control that the
            event is being raised on.
            </remarks>
        </member>
        <member name="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Parent">
            <summary>
            Gets the control that <see cref="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Source"/> is being attached to or detached from.
            </summary>
            <remarks>
            For logical tree attachment, holds the new logical parent of <see cref="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Source"/>. For
            detachment, holds the old logical parent of <see cref="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Source"/>. If the detachment event
            was caused by a top-level control being closed, then this property will be null.
            </remarks>
        </member>
        <member name="T:Avalonia.Matrix">
            <summary>
            A 3x3 matrix.
            </summary>
            <remarks>Matrix layout:
                    | 1st col | 2nd col | 3r col |
            1st row | scaleX  | skewY  | perspX  |
            2nd row | skewX  | scaleY  | perspY  |
            3rd row | transX  | transY  | perspZ  |
            
            Note: Skia.SkMatrix uses a transposed layout (where for example skewX/skewY and persp0/transX are swapped).
            </remarks>
        </member>
        <member name="M:Avalonia.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Matrix"/> struct (equivalent to a 2x3 Matrix without perspective).
            </summary>
            <param name="scaleX">The first element of the first row.</param>
            <param name="skewY">The second element of the first row.</param>
            <param name="skewX">The first element of the second row.</param>
            <param name="scaleY">The second element of the second row.</param>
            <param name="offsetX">The first element of the third row.</param>
            <param name="offsetY">The second element of the third row.</param>
        </member>
        <member name="M:Avalonia.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Matrix"/> struct.
            </summary>
            <param name="scaleX">The first element of the first row.</param>
            <param name="skewY">The second element of the first row.</param>
            <param name="perspX">The third element of the first row.</param>
            <param name="skewX">The first element of the second row.</param>
            <param name="scaleY">The second element of the second row.</param>
            <param name="perspY">The third element of the second row.</param>
            <param name="offsetX">The first element of the third row.</param>
            <param name="offsetY">The second element of the third row.</param>
            <param name="perspZ">The third element of the third row.</param>
        </member>
        <member name="P:Avalonia.Matrix.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.IsIdentity">
            <summary>
            Returns whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.HasInverse">
            <summary>
            HasInverse Property - returns true if this matrix is invertible, false otherwise.
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M11">
            <summary>
            The first element of the first row (scaleX).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M12">
            <summary>
            The second element of the first row (skewY).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M13">
            <summary>
            The third element of the first row (perspX: input x-axis perspective factor).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M21">
            <summary>
            The first element of the second row (skewX).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M22">
            <summary>
            The second element of the second row (scaleY).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M23">
            <summary>
            The third element of the second row (perspY: input y-axis perspective factor).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M31">
            <summary>
            The first element of the third row (offsetX/translateX).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M32">
            <summary>
            The second element of the third row (offsetY/translateY).
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M33">
            <summary>
            The third element of the third row (perspZ: perspective scale factor).
            </summary>
        </member>
        <member name="M:Avalonia.Matrix.op_Multiply(Avalonia.Matrix,Avalonia.Matrix)">
            <summary>
            Multiplies two matrices together and returns the resulting matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.op_UnaryNegation(Avalonia.Matrix)">
            <summary>
            Negates the given matrix by multiplying all values by -1.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.op_Equality(Avalonia.Matrix,Avalonia.Matrix)">
            <summary>
            Returns a boolean indicating whether the given matrices are equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Matrix.op_Inequality(Avalonia.Matrix,Avalonia.Matrix)">
            <summary>
            Returns a boolean indicating whether the given matrices are not equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateRotation(System.Double)">
            <summary>
            Creates a rotation matrix using the given rotation in radians.
            </summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateSkew(System.Double,System.Double)">
            <summary>
            Creates a skew matrix from the given axis skew angles in radians.
            </summary>
            <param name="xAngle">The amount of skew along the X-axis, in radians.</param>
            <param name="yAngle">The amount of skew along the Y-axis, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateScale(System.Double,System.Double)">
            <summary>
            Creates a scale matrix from the given X and Y components.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateScale(Avalonia.Vector)">
            <summary>
            Creates a scale matrix from the given vector scale.
            </summary>
            <param name="scales">The scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateTranslation(Avalonia.Vector)">
            <summary>
            Creates a translation matrix from the given vector.
            </summary>
            <param name="position">The translation position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateTranslation(System.Double,System.Double)">
            <summary>
            Creates a translation matrix from the given X and Y components.
            </summary>
            <param name="xPosition">The X position.</param>
            <param name="yPosition">The Y position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.ToRadians(System.Double)">
            <summary>
            Converts an angle in degrees to radians.
            </summary>
            <param name="angle">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Append(Avalonia.Matrix)">
            <summary>
            Appends another matrix as post-multiplication operation.
            Equivalent to this * value;
            </summary>
            <param name="value">A matrix.</param>
            <returns>Post-multiplied matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Prepend(Avalonia.Matrix)">
            <summary>
            Prepends another matrix as pre-multiplication operation.
            Equivalent to value * this;
            </summary>
            <param name="value">A matrix.</param>
            <returns>Pre-multiplied matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.GetDeterminant">
            <summary>
            Calculates the determinant for this matrix.
            </summary>
            <returns>The determinant.</returns>
            <remarks>
            The determinant is calculated by expanding the matrix with a third column whose
            values are (0,0,1).
            </remarks>
        </member>
        <member name="M:Avalonia.Matrix.Transform(Avalonia.Point)">
            <summary>
             Transforms the point with the matrix
            </summary>
            <param name="p">The point to be transformed</param>
            <returns>The transformed point</returns>
        </member>
        <member name="M:Avalonia.Matrix.Equals(Avalonia.Matrix)">
            <summary>
            Returns a boolean indicating whether the matrix is equal to the other given matrix.
            </summary>
            <param name="other">The other matrix to test equality against.</param>
            <returns>True if this matrix is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Matrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Matrix.ContainsPerspective">
            <summary>
             Determines if the current matrix contains perspective (non-affine) transforms (true) or only (affine) transforms that could be mapped into an 2x3 matrix (false).
            </summary>
        </member>
        <member name="M:Avalonia.Matrix.ToString">
            <summary>
            Returns a String representing this matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Avalonia.Matrix.TryInvert(Avalonia.Matrix@)">
            <summary>
            Attempts to invert the Matrix.
            </summary>
            <returns>The inverted matrix or <see langword="null"/> when matrix is not invertible.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Invert">
            <summary>
            Inverts the Matrix.
            </summary>
            <exception cref="T:System.InvalidOperationException">Matrix is not invertible.</exception>
            <returns>The inverted matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Matrix"/> string.
            </summary>
            <param name="s">Six or nine comma-delimited double values (m11, m12, m21, m22, offsetX, offsetY[, perspX, perspY, perspZ]) that describe the new <see cref="T:Avalonia.Matrix"/></param>
            <returns>The <see cref="T:Avalonia.Matrix"/>.</returns>
        </member>
        <member name="M:Avalonia.Matrix.TryDecomposeTransform(Avalonia.Matrix,Avalonia.Matrix.Decomposed@)">
            <summary>
            Decomposes given matrix into transform operations.
            </summary>
            <param name="matrix">Matrix to decompose.</param>
            <param name="decomposed">Decomposed matrix.</param>
            <returns>The status of the operation.</returns>        
        </member>
        <member name="T:Avalonia.Metadata.AmbientAttribute">
            <summary>
            Defines the ambient class/property
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.AvaloniaListAttribute">
            <summary>
            Defines how compiler should split avalonia list string value before parsing individual items.
            </summary>
        </member>
        <member name="P:Avalonia.Metadata.AvaloniaListAttribute.Separators">
            <summary>
            Separator used to split input string.
            Default value is ','.
            </summary>
        </member>
        <member name="P:Avalonia.Metadata.AvaloniaListAttribute.SplitOptions">
            <summary>
            Split options used to split input string.
            Default value is RemoveEmptyEntries with TrimEntries.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.ContentAttribute">
            <summary>
            Defines the property that contains the object's content in markup.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.DataTypeAttribute">
            <summary>
            Defines the property that contains type that should be used as a type information for compiled bindings.
            </summary>
            <remarks>
            Used on DataTemplate.DataType property so it can be inherited in compiled bindings inside of the template.
            </remarks>
        </member>
        <member name="T:Avalonia.Metadata.DependsOnAttribute">
            <summary>
            Indicates that the property depends on the value of another property in markup.
            </summary>
        </member>
        <member name="M:Avalonia.Metadata.DependsOnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.DependsOnAttribute"/> class.
            </summary>
            <param name="propertyName">
            The name of the property that this property depends on.
            </param>
        </member>
        <member name="P:Avalonia.Metadata.DependsOnAttribute.Name">
            <summary>
            Gets the name of the property that this property depends on.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.InheritDataTypeFromItemsAttribute">
            <summary>
            Instructs the compiler to resolve the compiled bindings data type for the item-specific properties of collection-like controls. 
            </summary>
            <remarks>
            A typical usage example is a ListBox control, where <see cref="T:Avalonia.Metadata.InheritDataTypeFromItemsAttribute"/> is defined on the ItemTemplate property,
            allowing the template to inherit the data type from the Items collection binding. 
            </remarks>
        </member>
        <member name="M:Avalonia.Metadata.InheritDataTypeFromItemsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.InheritDataTypeFromItemsAttribute"/> class.
            </summary>
            <param name="ancestorItemsProperty">The name of the property whose item type should be used on the target property.</param>
        </member>
        <member name="P:Avalonia.Metadata.InheritDataTypeFromItemsAttribute.AncestorItemsProperty">
            <summary>
            The name of the property whose item type should be used on the target property.
            </summary>
        </member>
        <member name="P:Avalonia.Metadata.InheritDataTypeFromItemsAttribute.AncestorType">
            <summary>
            The ancestor type to be used in a lookup for the <see cref="P:Avalonia.Metadata.InheritDataTypeFromItemsAttribute.AncestorItemsProperty"/>.
            If null, the declaring type of the target property is used.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.NotClientImplementableAttribute">
            <summary>
            This interface is not intended to be implemented outside of the core Avalonia framework as
            its API may change without warning.
            </summary>
            <remarks>
            This interface is stable for consumption by a client, but should not be implemented as members
            may be added to its API.
            </remarks>
        </member>
        <member name="T:Avalonia.Metadata.TemplateContentAttribute">
            <summary>
            Defines the property that contains the object's content in markup.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.UnstableAttribute">
            <summary>
            This API is unstable and is not covered by API compatibility guarantees between minor and
            patch releases.
            </summary>
        </member>
        <member name="M:Avalonia.Metadata.UnstableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.UnstableAttribute"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Metadata.UnstableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.UnstableAttribute"/> class.
            </summary>
            <param name="message">The text string that describes alternative workarounds.</param>
        </member>
        <member name="P:Avalonia.Metadata.UnstableAttribute.Message">
            <summary>
            Gets a value that indicates whether the compiler will treat usage of the obsolete program element as an error.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.WhitespaceSignificantCollectionAttribute">
            <summary>
            Indicates that a collection type should be processed as being whitespace significant by a XAML processor.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.XmlnsDefinitionAttribute">
            <summary>
            Maps an XML namespace to a CLR namespace for use in XAML.
            </summary>
        </member>
        <member name="M:Avalonia.Metadata.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.XmlnsDefinitionAttribute"/> class.
            </summary>
            <param name="xmlNamespace">The URL of the XML namespace.</param>
            <param name="clrNamespace">The CLR namespace.</param>
        </member>
        <member name="P:Avalonia.Metadata.XmlnsDefinitionAttribute.XmlNamespace">
            <summary>
            Gets or sets the URL of the XML namespace.
            </summary>
        </member>
        <member name="P:Avalonia.Metadata.XmlnsDefinitionAttribute.ClrNamespace">
            <summary>
            Gets or sets the CLR namespace.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.XmlnsPrefixAttribute">
            <summary>
            Use to predefine the prefix associated to an xml namespace in a xaml file
            </summary>
            <remarks>
            example:
            [assembly: XmlnsPrefix("https://github.com/avaloniaui", "av")]
            xaml:
            xmlns:av="https://github.com/avaloniaui"
            </remarks>
        </member>
        <member name="M:Avalonia.Metadata.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="xmlNamespace">XML namespce</param>
            <param name="prefix">recommended prefix</param>
        </member>
        <member name="P:Avalonia.Metadata.XmlnsPrefixAttribute.XmlNamespace">
            <summary>
            XML Namespace
            </summary>
        </member>
        <member name="P:Avalonia.Metadata.XmlnsPrefixAttribute.Prefix">
            <summary>
            New Xml Namespace
            </summary>
        </member>
        <member name="T:Avalonia.PixelPoint">
            <summary>
            Represents a point in device pixels.
            </summary>
        </member>
        <member name="F:Avalonia.PixelPoint.Origin">
            <summary>
            A point representing 0,0.
            </summary>
        </member>
        <member name="M:Avalonia.PixelPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelPoint"/> structure.
            </summary>
            <param name="x">The X co-ordinate.</param>
            <param name="y">The Y co-ordinate.</param>
        </member>
        <member name="P:Avalonia.PixelPoint.X">
            <summary>
            Gets the X co-ordinate.
            </summary>
        </member>
        <member name="P:Avalonia.PixelPoint.Y">
            <summary>
            Gets the Y co-ordinate.
            </summary>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Equality(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.PixelPoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Inequality(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.PixelPoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Implicit(Avalonia.PixelPoint)~Avalonia.PixelVector">
            <summary>
            Converts the <see cref="T:Avalonia.Point"/> to a <see cref="T:Avalonia.Vector"/>.
            </summary>
            <param name="p">The point.</param>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Addition(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Adds two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Addition(Avalonia.PixelPoint,Avalonia.PixelVector)">
            <summary>
            Adds a vector to a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Subtraction(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Subtracts two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Subtraction(Avalonia.PixelPoint,Avalonia.PixelVector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.PixelPoint"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.PixelPoint"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.Equals(Avalonia.PixelPoint)">
            <summary>
            Returns a boolean indicating whether the point is equal to the other given point.
            </summary>
            <param name="other">The other point to test equality against.</param>
            <returns>True if this point is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.Equals(System.Object)">
            <summary>
            Checks for equality between a point and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a point that equals the current point.
            </returns>
        </member>
        <member name="M:Avalonia.PixelPoint.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.PixelPoint"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.WithX(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelPoint"/> with the same Y co-ordinate and the specified X co-ordinate.
            </summary>
            <param name="x">The X co-ordinate.</param>
            <returns>The new <see cref="T:Avalonia.PixelPoint"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.WithY(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelPoint"/> with the same X co-ordinate and the specified Y co-ordinate.
            </summary>
            <param name="y">The Y co-ordinate.</param>
            <returns>The new <see cref="T:Avalonia.PixelPoint"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPoint(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPoint(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPointWithDpi(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPointWithDpi(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPoint(Avalonia.Point,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="point">The point.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPoint(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="point">The point.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPointWithDpi(Avalonia.Point,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="point">The point.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPointWithDpi(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="point">The point.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToString">
            <summary>
            Returns the string representation of the point.
            </summary>
            <returns>The string representation of the point.</returns>
        </member>
        <member name="T:Avalonia.PixelRect">
            <summary>
            Represents a rectangle in device pixels.
            </summary>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(Avalonia.PixelSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(Avalonia.PixelPoint,Avalonia.PixelSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="topLeft">The top left position of the rectangle.</param>
            <param name="bottomRight">The bottom right position of the rectangle.</param>
        </member>
        <member name="P:Avalonia.PixelRect.X">
            <summary>
            Gets the X position.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Y">
            <summary>
            Gets the Y position.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Position">
            <summary>
            Gets the position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Right">
            <summary>
            Gets the right position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Bottom">
            <summary>
            Gets the bottom position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.TopLeft">
            <summary>
            Gets the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.TopRight">
            <summary>
            Gets the top right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.BottomLeft">
            <summary>
            Gets the bottom left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.BottomRight">
            <summary>
            Gets the bottom right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.PixelRect.op_Equality(Avalonia.PixelRect,Avalonia.PixelRect)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.PixelRect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.op_Inequality(Avalonia.PixelRect,Avalonia.PixelRect)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.PixelRect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Contains(Avalonia.PixelPoint)">
            <summary>
            Determines whether a point in in the bounds of the rectangle.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ContainsExclusive(Avalonia.PixelPoint)">
            <summary>
            Determines whether a point is in the bounds of the rectangle, exclusive of the
            rectangle's bottom/right edge.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>    
        </member>
        <member name="M:Avalonia.PixelRect.Contains(Avalonia.PixelRect)">
            <summary>
            Determines whether the rectangle fully contains another rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <returns>true if the rectangle is fully contained; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.CenterRect(Avalonia.PixelRect)">
            <summary>
            Centers another rectangle in this rectangle.
            </summary>
            <param name="rect">The rectangle to center.</param>
            <returns>The centered rectangle.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Equals(Avalonia.PixelRect)">
            <summary>
            Returns a boolean indicating whether the rect is equal to the other given rect.
            </summary>
            <param name="other">The other rect to test equality against.</param>
            <returns>True if this rect is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given object is equal to this rectangle.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if the object is equal to this rectangle; false otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Intersect(Avalonia.PixelRect)">
            <summary>
            Gets the intersection of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The intersection.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Intersects(Avalonia.PixelRect)">
            <summary>
            Determines whether a rectangle intersects with this rectangle.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>
            True if the specified rectangle intersects with this one; otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.PixelRect.Translate(Avalonia.PixelVector)">
            <summary>
            Translates the rectangle by an offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The translated rectangle.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Union(Avalonia.PixelRect)">
            <summary>
            Gets the union of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The union.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithX(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified X position.
            </summary>
            <param name="x">The x position.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithY(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified Y position.
            </summary>
            <param name="y">The y position.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithWidth(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithHeight(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRect(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRect(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRectWithDpi(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRectWithDpi(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRect(Avalonia.Rect,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="rect">The rect.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRect(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="rect">The rect.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRectWithDpi(Avalonia.Rect,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="rect">The rect.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRectWithDpi(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="rect">The rect.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToString">
            <summary>
            Returns the string representation of the rectangle.
            </summary>
            <returns>The string representation of the rectangle.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.PixelRect"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="T:Avalonia.PixelSize">
            <summary>
            Represents a size in device pixels.
            </summary>
        </member>
        <member name="F:Avalonia.PixelSize.Empty">
            <summary>
            A size representing zero
            </summary>
        </member>
        <member name="M:Avalonia.PixelSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelSize"/> structure.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Avalonia.PixelSize.AspectRatio">
            <summary>
            Gets the aspect ratio of the size.
            </summary>
        </member>
        <member name="P:Avalonia.PixelSize.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.PixelSize.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Avalonia.PixelSize.op_Equality(Avalonia.PixelSize,Avalonia.PixelSize)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.PixelSize"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.op_Inequality(Avalonia.PixelSize,Avalonia.PixelSize)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Size"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.PixelSize"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.PixelSize"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.Equals(Avalonia.PixelSize)">
            <summary>
            Returns a boolean indicating whether the size is equal to the other given size.
            </summary>
            <param name="other">The other size to test equality against.</param>
            <returns>True if this size is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.Equals(System.Object)">
            <summary>
            Checks for equality between a size and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a size that equals the current size.
            </returns>
        </member>
        <member name="M:Avalonia.PixelSize.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.PixelSize"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.WithWidth(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelSize"/> with the same height and the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.PixelSize"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.WithHeight(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelSize"/> with the same width and the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.PixelSize"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSize(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSize(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSizeWithDpi(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSizeWithDpi(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSize(Avalonia.Size,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="size">The size.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSize(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="size">The size.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSizeWithDpi(Avalonia.Size,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="size">The size.</param>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSizeWithDpi(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="size">The size.</param>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToString">
            <summary>
            Returns the string representation of the size.
            </summary>
            <returns>The string representation of the size.</returns>
        </member>
        <member name="T:Avalonia.PixelVector">
            <summary>
            Defines a vector.
            </summary>
        </member>
        <member name="F:Avalonia.PixelVector._x">
            <summary>
            The X vector.
            </summary>
        </member>
        <member name="F:Avalonia.PixelVector._y">
            <summary>
            The Y vector.
            </summary>
        </member>
        <member name="M:Avalonia.PixelVector.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelVector"/> structure.
            </summary>
            <param name="x">The X vector.</param>
            <param name="y">The Y vector.</param>
        </member>
        <member name="P:Avalonia.PixelVector.X">
            <summary>
            Gets the X vector.
            </summary>
        </member>
        <member name="P:Avalonia.PixelVector.Y">
            <summary>
            Gets the Y vector.
            </summary>
        </member>
        <member name="M:Avalonia.PixelVector.op_Explicit(Avalonia.PixelVector)~Avalonia.PixelPoint">
            <summary>
            Converts the <see cref="T:Avalonia.PixelVector"/> to a <see cref="T:Avalonia.PixelPoint"/>.
            </summary>
            <param name="a">The vector.</param>
        </member>
        <member name="M:Avalonia.PixelVector.op_Multiply(Avalonia.PixelVector,Avalonia.PixelVector)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second vector</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Multiply(Avalonia.PixelVector,System.Int32)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Division(Avalonia.PixelVector,System.Int32)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector</param>
            <param name="scale">The divisor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="P:Avalonia.PixelVector.Length">
            <summary>
            Length of the vector
            </summary>
        </member>
        <member name="M:Avalonia.PixelVector.op_UnaryNegation(Avalonia.PixelVector)">
            <summary>
            Negates a vector.
            </summary>
            <param name="a">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Addition(Avalonia.PixelVector,Avalonia.PixelVector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Subtraction(Avalonia.PixelVector,Avalonia.PixelVector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.Equals(Avalonia.PixelVector)">
            <summary>
            Check if two vectors are equal (bitwise).
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.PixelVector.NearlyEquals(Avalonia.PixelVector)">
            <summary>
            Check if two vectors are nearly equal (numerically).
            </summary>
            <param name="other">The other vector.</param>
            <returns>True if vectors are nearly equal.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.ToString">
            <summary>
            Returns the string representation of the point.
            </summary>
            <returns>The string representation of the point.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.WithX(System.Int32)">
            <summary>
            Returns a new vector with the specified X coordinate.
            </summary>
            <param name="x">The X coordinate.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.WithY(System.Int32)">
            <summary>
            Returns a new vector with the specified Y coordinate.
            </summary>
            <param name="y">The Y coordinate.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="T:Avalonia.Platform.AlphaFormat">
            <summary>
            Describes how to interpret the alpha component of a pixel.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.AlphaFormat.Premul">
            <summary>
            All pixels have their alpha premultiplied in their color components.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.AlphaFormat.Unpremul">
            <summary>
            All pixels have their color components stored without any regard to the alpha. e.g. this is the default configuration for PNG images.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.AlphaFormat.Opaque">
            <summary>
            All pixels are stored as opaque.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.AssetLoader">
            <inheritdoc cref="T:Avalonia.Platform.IAssetLoader"/>
        </member>
        <member name="M:Avalonia.Platform.AssetLoader.SetDefaultAssembly(System.Reflection.Assembly)">
            <inheritdoc cref="M:Avalonia.Platform.IAssetLoader.SetDefaultAssembly(System.Reflection.Assembly)"/>
        </member>
        <member name="M:Avalonia.Platform.AssetLoader.Exists(System.Uri,System.Uri)">
            <inheritdoc cref="M:Avalonia.Platform.IAssetLoader.Exists(System.Uri,System.Uri)"/>
        </member>
        <member name="M:Avalonia.Platform.AssetLoader.Open(System.Uri,System.Uri)">
            <inheritdoc cref="M:Avalonia.Platform.IAssetLoader.Open(System.Uri,System.Uri)"/>
        </member>
        <member name="M:Avalonia.Platform.AssetLoader.OpenAndGetAssembly(System.Uri,System.Uri)">
            <inheritdoc cref="M:Avalonia.Platform.IAssetLoader.OpenAndGetAssembly(System.Uri,System.Uri)"/>
        </member>
        <member name="M:Avalonia.Platform.AssetLoader.GetAssembly(System.Uri,System.Uri)">
            <inheritdoc cref="M:Avalonia.Platform.IAssetLoader.GetAssembly(System.Uri,System.Uri)"/>
        </member>
        <member name="M:Avalonia.Platform.AssetLoader.GetAssets(System.Uri,System.Uri)">
            <inheritdoc cref="M:Avalonia.Platform.IAssetLoader.GetAssets(System.Uri,System.Uri)"/>
        </member>
        <member name="T:Avalonia.Platform.DefaultPlatformSettings">
            <summary>
            A default implementation of <see cref="T:Avalonia.Platform.IPlatformSettings"/> for platforms.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IAssetLoader">
            <summary>
            Loads assets compiled into the application binary.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.SetDefaultAssembly(System.Reflection.Assembly)">
            <summary>
            We need a way to override the default assembly selected by the host platform
            because right now it is selecting the wrong one for PCL based Apps. The 
            AssetLoader needs a refactor cause right now it lives in 3+ platforms which 
            can all be loaded on Windows. 
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.Exists(System.Uri,System.Uri)">
            <summary>
            Checks if an asset with the specified URI exists.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>True if the asset could be found; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.Open(System.Uri,System.Uri)">
            <summary>
            Opens the asset with the requested URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>A stream containing the asset contents.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            The asset could not be found.
            </exception>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.OpenAndGetAssembly(System.Uri,System.Uri)">
            <summary>
            Opens the asset with the requested URI and returns the asset stream and the
            assembly containing the asset.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>
            The stream containing the asset contents together with the assembly.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">
            The asset could not be found.
            </exception>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.GetAssembly(System.Uri,System.Uri)">
            <summary>
            Extracts assembly information from URI
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>Assembly associated with the Uri</returns>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.GetAssets(System.Uri,System.Uri)">
            <summary>
            Gets all assets of a folder and subfolders that match specified uri.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">The base URI.</param>
            <returns>All matching assets as a tuple of the absolute path to the asset and the assembly containing the asset</returns>
        </member>
        <member name="T:Avalonia.Platform.IBitmapImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.Imaging.Bitmap"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IBitmapImpl.Dpi">
            <summary>
            Gets the dots per inch (DPI) of the image.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IBitmapImpl.PixelSize">
            <summary>
            Gets the size of the bitmap, in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IBitmapImpl.Version">
            <summary>
            Version of the pixel data
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IBitmapImpl.Save(System.String,System.Nullable{System.Int32})">
            <summary>
            Saves the bitmap to a file.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="quality">
            The optional quality for compression if supported by the specific backend. 
            The quality value is interpreted from 0 - 100. If quality is null the default quality 
            setting of the backend is applied.
            </param>
        </member>
        <member name="M:Avalonia.Platform.IBitmapImpl.Save(System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Saves the bitmap to a stream in png format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="quality">
            The optional quality for compression if supported by the specific backend. 
            The quality value is interpreted from 0 - 100. If quality is null the default quality 
            setting of the backend is applied.
            </param>
        </member>
        <member name="T:Avalonia.Platform.ICursorImpl">
            <summary>
            Represents a platform implementation of a <see cref="T:Avalonia.Input.Cursor"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IDrawingContextImpl">
            <summary>
            Defines the interface through which drawing occurs.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IDrawingContextImpl.RenderOptions">
            <summary>
            Gets or sets the current render options used to control the rendering behavior of drawing operations.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IDrawingContextImpl.Transform">
            <summary>
            Gets or sets the current transform of the drawing context.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.Clear(Avalonia.Media.Color)">
            <summary>
            Clears the render target to the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawBitmap(Avalonia.Platform.IBitmapImpl,System.Double,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws a bitmap image.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacity">The opacity to draw with.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawBitmap(Avalonia.Platform.IBitmapImpl,Avalonia.Media.IBrush,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws a bitmap image.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacityMask">The opacity mask to draw with.</param>
            <param name="opacityMaskRect">The destination rect for the opacity mask.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the rectangle, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the rectangle, or <c>null</c> for no stroke.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="boxShadows">Box shadow effect parameters</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawEllipse(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Rect)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the ellipse, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the ellipse, or <c>null</c> for no stroke.</param>
            <param name="rect">The ellipse bounds.</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawGlyphRun(Avalonia.Media.IBrush,Avalonia.Platform.IGlyphRunImpl)">
            <summary>
            Draws a glyph run.
            </summary>
            <param name="foreground">The foreground.</param>
            <param name="glyphRun">The glyph run.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.CreateLayer(Avalonia.Size)">
            <summary>
            Creates a new <see cref="T:Avalonia.Platform.IRenderTargetBitmapImpl"/> that can be used as a render layer
            for the current render target.
            </summary>
            <param name="size">The size of the layer in DIPs.</param>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTargetBitmapImpl"/></returns>
            <remarks>
            Depending on the rendering backend used, a layer created via this method may be more
            performant than a standard render target bitmap. In particular the Direct2D backend
            has to do a format conversion each time a standard render target bitmap is rendered,
            but a layer created via this method has no such overhead.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushClip(Avalonia.Rect)">
            <summary>
            Pushes a clip rectangle.
            </summary>
            <param name="clip">The clip rectangle.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushClip(Avalonia.RoundedRect)">
            <summary>
            Pushes a clip rounded rectangle.
            </summary>
            <param name="clip">The clip rounded rectangle</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopClip">
            <summary>
            Pops the latest pushed clip rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushOpacity(System.Double,System.Nullable{Avalonia.Rect})">
            <summary>
            Pushes an opacity value.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="bounds">where to apply the opacity.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopOpacity">
            <summary>
            Pops the latest pushed opacity value.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushOpacityMask(Avalonia.Media.IBrush,Avalonia.Rect)">
            <summary>
            Pushes an opacity mask.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopOpacityMask">
            <summary>
            Pops the latest pushed opacity mask.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushGeometryClip(Avalonia.Platform.IGeometryImpl)">
            <summary>
            Pushes a clip geometry.
            </summary>
            <param name="clip">The clip geometry.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopGeometryClip">
            <summary>
            Pops the latest pushed geometry clip.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.GetFeature(System.Type)">
            <summary>
            Attempts to get an optional feature from the drawing context implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.DrawingContextImplExtensions.GetFeature``1(Avalonia.Platform.IDrawingContextImpl)">
            <summary>
            Attempts to get an optional feature from the drawing context implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextLayerImpl.Blit(Avalonia.Platform.IDrawingContextImpl)">
            <summary>
            Does optimized blit with Src blend mode.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Avalonia.Platform.IDrawingContextLayerImpl.CanBlit">
            <summary>
            Returns true if layer supports optimized blit.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IExternalObjectsRenderInterfaceContextFeature.SupportedImageHandleTypes">
            <summary>
            Returns the list of image handle types supported by the current GPU backend, see <see cref="T:Avalonia.Platform.KnownPlatformGraphicsExternalImageHandleTypes"/>
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IExternalObjectsRenderInterfaceContextFeature.SupportedSemaphoreTypes">
            <summary>
            Returns the list of semaphore types supported by the current GPU backend, see <see cref="T:Avalonia.Platform.KnownPlatformGraphicsExternalSemaphoreHandleTypes"/>
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.GetDefaultFontFamilyName">
            <summary>
                Gets the system's default font family's name.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.GetInstalledFontFamilyNames(System.Boolean)">
            <summary>
                Get all installed fonts in the system.
            <param name="checkForUpdates">If <c>true</c> the font collection is updated.</param>
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.TryMatchCharacter(System.Int32,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch,System.Globalization.CultureInfo,Avalonia.Media.Typeface@)">
            <summary>
                Tries to match a specified character to a typeface that supports specified font properties.
            </summary>
            <param name="codepoint">The codepoint to match against.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="fontStretch">The font stretch.</param>
            <param name="culture">The culture.</param>
            <param name="typeface">The matching typeface.</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Platform.IFontManagerImpl"/> could match the character to specified parameters, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.TryCreateGlyphTypeface(System.String,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontStretch,Avalonia.Media.IGlyphTypeface@)">
            <summary>
                Tries to get a glyph typeface for specified parameters.
            </summary>
            <param name="familyName">The family name.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weiht.</param>
            <param name="stretch">The font stretch.</param>
            <param name="glyphTypeface">The created glyphTypeface</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Platform.IFontManagerImpl"/> could create the glyph typeface, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.TryCreateGlyphTypeface(System.IO.Stream,Avalonia.Media.IGlyphTypeface@)">
            <summary>
                Tries to create a glyph typeface from specified stream.
            </summary>
            <param name="stream">A stream that holds the font's data.</param>
            <param name="glyphTypeface">The created glyphTypeface</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Platform.IFontManagerImpl"/> could create the glyph typeface, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="T:Avalonia.Platform.IGeometryContext">
            <summary>
            Describes a geometry using drawing commands.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.ArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <summary>
            Draws an arc to the specified point.
            </summary>
            <param name="point">The destination point.</param>
            <param name="size">The radii of an oval whose perimeter is used to draw the angle.</param>
            <param name="rotationAngle">The rotation angle (in radians) of the oval that specifies the curve.</param>
            <param name="isLargeArc">true to draw the arc greater than 180 degrees; otherwise, false.</param>
            <param name="sweepDirection">
            A value that indicates whether the arc is drawn in the Clockwise or Counterclockwise direction.
            </param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)">
            <summary>
            Begins a new figure.
            </summary>
            <param name="startPoint">The starting point for the figure.</param>
            <param name="isFilled">Whether the figure is filled.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.CubicBezierTo(Avalonia.Point,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a Bezier curve to the specified point.
            </summary>
            <param name="point1">The first control point used to specify the shape of the curve.</param>
            <param name="point2">The second control point used to specify the shape of the curve.</param>
            <param name="point3">The destination point for the end of the curve.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.QuadraticBezierTo(Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a quadratic Bezier curve to the specified point
            </summary>
            <param name="control">Control point</param>
            <param name="endPoint">DestinationPoint</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.LineTo(Avalonia.Point)">
            <summary>
            Draws a line to the specified point.
            </summary>
            <param name="point">The destination point.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.EndFigure(System.Boolean)">
            <summary>
            Ends the figure started by <see cref="M:Avalonia.Platform.IGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)"/>.
            </summary>
            <param name="isClosed">Whether the figure is closed.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.SetFillRule(Avalonia.Media.FillRule)">
            <summary>
            Sets the fill rule.
            </summary>
            <param name="fillRule">The fill rule.</param>
        </member>
        <member name="T:Avalonia.Platform.IGeometryImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.Geometry"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGeometryImpl.Bounds">
            <summary>
            Gets the geometry's bounding rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGeometryImpl.ContourLength">
            <summary>
            Gets the geometry's total length as if all its contours are placed
            in a straight line.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.GetRenderBounds(Avalonia.Media.IPen)">
            <summary>
            Gets the geometry's bounding rectangle with the specified pen.
            </summary>
            <param name="pen">The pen to use. May be null.</param>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.FillContains(Avalonia.Point)">
            <summary>
            Indicates whether the geometry's fill contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.Intersect(Avalonia.Platform.IGeometryImpl)">
            <summary>
            Intersects the geometry with another geometry.
            </summary>
            <param name="geometry">The other geometry.</param>
            <returns>A new <see cref="T:Avalonia.Platform.IGeometryImpl"/> representing the intersection or <c>null</c> when the operation failed.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.StrokeContains(Avalonia.Media.IPen,Avalonia.Point)">
            <summary>
            Indicates whether the geometry's stroke contains the specified point.
            </summary>
            <param name="pen">The stroke to use.</param>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.WithTransform(Avalonia.Matrix)">
            <summary>
            Makes a clone of the geometry with the specified transform.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The cloned geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.TryGetPointAtDistance(System.Double,Avalonia.Point@)">
            <summary>
            Attempts to get the corresponding point at the
            specified distance
            </summary>
            <param name="distance">The contour distance to get from.</param>
            <param name="point">The point in the specified distance.</param>
            <returns>If there's valid point at the specified distance.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.TryGetPointAndTangentAtDistance(System.Double,Avalonia.Point@,Avalonia.Point@)">
            <summary>
            Attempts to get the corresponding point and
            tangent from the specified distance along the
            contour of the geometry.
            </summary>
            <param name="distance">The contour distance to get from.</param>
            <param name="point">The point in the specified distance.</param>
            <param name="tangent">The tangent in the specified distance.</param>
            <returns>If there's valid point and tangent at the specified distance.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.TryGetSegment(System.Double,System.Double,System.Boolean,Avalonia.Platform.IGeometryImpl@)">
            <summary>
            Attempts to get the corresponding path segment
            given by the two distances specified.
            Imagine it like snipping a part of the current
            geometry.
            </summary>
            <param name="startDistance">The contour distance to start snipping from.</param>
            <param name="stopDistance">The contour distance to stop snipping to.</param>
            <param name="startOnBeginFigure">If ture, the resulting snipped path will start with a BeginFigure call.</param>
            <param name="segmentGeometry">The resulting snipped path.</param>
            <returns>If the snipping operation is successful.</returns>
        </member>
        <member name="T:Avalonia.Platform.IGlyphRunImpl">
            <summary>
                An immutable platform representation of a <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphRunImpl.GlyphTypeface">
            <summary>
                Gets the <see cref="T:Avalonia.Media.IGlyphTypeface"/> for the <see cref="T:Avalonia.Platform.IGlyphRunImpl"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphRunImpl.FontRenderingEmSize">
            <summary>
                Gets the em size used for rendering the <see cref="T:Avalonia.Platform.IGlyphRunImpl"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphRunImpl.BaselineOrigin">
            <summary>
                Gets the baseline origin of the glyph run./>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphRunImpl.Bounds">
            <summary>
                Gets the conservative bounding box of the glyph run./>.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IGlyphRunImpl.GetIntersections(System.Single,System.Single)">
            <summary>
            Gets the intersections of specified upper and lower limit.
            </summary>
            <param name="lowerLimit">Upper limit.</param>
            <param name="upperLimit">Lower limit.</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Address">
            <summary>
            Address of the first pixel
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Size">
            <summary>
            Gets the framebuffer size in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.RowBytes">
            <summary>
            Number of bytes per row
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Dpi">
            <summary>
            DPI of underling screen
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Format">
            <summary>
            Pixel format
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IOptionalFeatureProvider.TryGetFeature(System.Type)">
            <summary>
            Queries for an optional feature
            </summary>
            <param name="featureType">Feature type</param>
        </member>
        <member name="T:Avalonia.Platform.IPlatformBehaviorInhibition">
            <summary>
            Allows to inhibit platform specific behavior.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPlatformHandle">
            <summary>
            Represents a platform-specific handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformHandle.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformHandle.HandleDescriptor">
            <summary>
            Gets an optional string that describes what <see cref="P:Avalonia.Platform.IPlatformHandle.Handle"/> represents.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPlatformRenderInterface">
            <summary>
            Defines the main platform-specific interface for the rendering subsystem.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateEllipseGeometry(Avalonia.Rect)">
            <summary>
            Creates an ellipse geometry implementation.
            </summary>
            <param name="rect">The bounds of the ellipse.</param>
            <returns>An ellipse geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateLineGeometry(Avalonia.Point,Avalonia.Point)">
            <summary>
            Creates a line geometry implementation.
            </summary>
            <param name="p1">The start of the line.</param>
            <param name="p2">The end of the line.</param>
            <returns>A line geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateRectangleGeometry(Avalonia.Rect)">
            <summary>
            Creates a rectangle geometry implementation.
            </summary>
            <param name="rect">The bounds of the rectangle.</param>
            <returns>A rectangle.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateStreamGeometry">
            <summary>
            Creates a stream geometry implementation.
            </summary>
            <returns>An <see cref="T:Avalonia.Platform.IStreamGeometryImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateGeometryGroup(Avalonia.Media.FillRule,System.Collections.Generic.IReadOnlyList{Avalonia.Platform.IGeometryImpl})">
            <summary>
            Creates a geometry group implementation.
            </summary>
            <param name="fillRule">The fill rule.</param>
            <param name="children">The geometries to group.</param>
            <returns>A combined geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateCombinedGeometry(Avalonia.Media.GeometryCombineMode,Avalonia.Platform.IGeometryImpl,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Creates a geometry group implementation.
            </summary>
            <param name="combineMode">The combine mode</param>
            <param name="g1">The first geometry.</param>
            <param name="g2">The second geometry.</param>
            <returns>A combined geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.BuildGlyphRunGeometry(Avalonia.Media.GlyphRun)">
            <summary>
            Created a geometry implementation for the glyph run.
            </summary>
            <param name="glyphRun">The glyph run to build a geometry from.</param>
            <returns>The geometry returned contains the combined geometry of all glyphs in the glyph run.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateRenderTargetBitmap(Avalonia.PixelSize,Avalonia.Vector)">
            <summary>
            Creates a render target bitmap implementation.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTargetBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateWriteableBitmap(Avalonia.PixelSize,Avalonia.Vector,Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat)">
            <summary>
            Creates a writeable bitmap implementation.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="format">Pixel format.</param>
            <param name="alphaFormat">Alpha format .</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmap(System.String)">
            <summary>
            Loads a bitmap implementation from a file..
            </summary>
            <param name="fileName">The filename of the bitmap.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmap(System.IO.Stream)">
            <summary>
            Loads a bitmap implementation from a file..
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmapToWidth(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a WriteableBitmap implementation from a stream to a specified width maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmapToHeight(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a WriteableBitmap implementation from a stream to a specified height maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmap(System.String)">
            <summary>
            Loads a WriteableBitmap implementation from a file.
            </summary>
            <param name="fileName">The filename of the bitmap.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmap(System.IO.Stream)">
            <summary>
            Loads a WriteableBitmap implementation from a file.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmapToWidth(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a bitmap implementation from a stream to a specified width maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmapToHeight(System.IO.Stream,System.Int32,Avalonia.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a bitmap implementation from a stream to a specified height maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmap(Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <summary>
            Loads a bitmap implementation from a pixels in memory.
            </summary>
            <param name="format">The pixel format.</param>
            <param name="alphaFormat">The alpha format.</param>
            <param name="data">The pointer to source bytes.</param>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="stride">The number of bytes per row.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateGlyphRun(Avalonia.Media.IGlyphTypeface,System.Double,System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.GlyphInfo},Avalonia.Point)">
            <summary>
            Creates a platform implementation of a glyph run.
            </summary>
            <param name="glyphTypeface">The glyph typeface.</param>
            <param name="fontRenderingEmSize">The font rendering em size.</param>
            <param name="glyphInfos">The list of glyphs.</param>
            <param name="baselineOrigin">The baseline origin of the run. Can be null.</param>
            <returns>An <see cref="T:Avalonia.Platform.IGlyphRunImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateBackendContext(Avalonia.Platform.IPlatformGraphicsContext)">
            <summary>
            Creates a backend-specific object using a low-level API graphics context
            </summary>
            <param name="graphicsApiContext">An underlying low-level graphics context (e. g. wrapped OpenGL context, Vulkan device, D3DDevice, etc)</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Platform.IPlatformRenderInterface.SupportsIndividualRoundRects">
            <summary>
            Gets a value indicating whether the platform directly supports rectangles with rounded corners.
            </summary>
            <remarks>
            Some platform renderers can't directly handle rounded corners on rectangles.
            In this case, code that requires rounded corners must generate and retain a geometry instead.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.IPlatformRenderInterface.DefaultAlphaFormat">
            <summary>
            Default <see cref="T:Avalonia.Platform.AlphaFormat"/> used on this platform.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformRenderInterface.DefaultPixelFormat">
            <summary>
            Default <see cref="T:Avalonia.Platform.PixelFormat"/> used on this platform.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterfaceContext.CreateRenderTarget(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a renderer.
            </summary>
            <param name="surfaces">
            The list of native platform surfaces that can be used for output.
            </param>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTarget"/>.</returns>
        </member>
        <member name="P:Avalonia.Platform.IPlatformRenderInterfaceContext.IsLost">
            <summary>
            Indicates that the context is no longer usable. This method should be thread-safe
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPlatformSettings">
            <summary>
            The <see cref="T:Avalonia.Platform.IPlatformSettings"/> interface represents a contract for accessing platform-specific settings and information.
            Some of these settings might be changed by used globally in the OS in runtime.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformSettings.GetTapSize(Avalonia.Input.PointerType)">
            <summary>
            The size of the rectangle around the location of a pointer down that a pointer up
            must occur within in order to register a tap gesture, in device-independent pixels.
            </summary>
            <param name="type">The pointer type.</param>
        </member>
        <member name="M:Avalonia.Platform.IPlatformSettings.GetDoubleTapSize(Avalonia.Input.PointerType)">
            <summary>
            The size of the rectangle around the location of a pointer down that a pointer up
            must occur within in order to register a double-tap gesture, in device-independent
            pixels.
            </summary>
            <param name="type">The pointer type.</param>
        </member>
        <member name="M:Avalonia.Platform.IPlatformSettings.GetDoubleTapTime(Avalonia.Input.PointerType)">
            <summary>
            Gets the maximum time that may occur between the first and second click of a double-
            tap gesture.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformSettings.HoldWaitDuration">
            <summary>
            Holding duration between pointer press and when event is fired.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformSettings.HotkeyConfiguration">
            <summary>
            Get a configuration for platform-specific hotkeys in an Avalonia application.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformSettings.GetColorValues">
            <summary>
            Gets current system color values including dark mode and accent colors.
            </summary>
        </member>
        <member name="E:Avalonia.Platform.IPlatformSettings.ColorValuesChanged">
            <summary>
            Raises when current system color values are changed. Including changing of a dark mode and accent colors.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPlatformThreadingInterface">
            <summary>
            Provides platform-specific services relating to threading.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformThreadingInterface.StartTimer(Avalonia.Threading.DispatcherPriority,System.TimeSpan,System.Action)">
            <summary>
            Starts a timer.
            </summary>
            <param name="priority"></param>
            <param name="interval">The interval.</param>
            <param name="tick">The action to call on each tick.</param>
            <returns>An <see cref="T:System.IDisposable"/> used to stop the timer.</returns>
        </member>
        <member name="T:Avalonia.Platform.IRenderTarget">
            <summary>
            Defines a render target
            </summary>
            <remarks>
            The interface used for obtaining drawing context from surfaces you can render on.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IRenderTarget.CreateDrawingContext">
            <summary>
            Creates an <see cref="T:Avalonia.Platform.IDrawingContextImpl"/> for a rendering session.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IRenderTarget.IsCorrupted">
            <summary>
            Indicates if the render target is no longer usable and needs to be recreated
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IRenderTargetBitmapImpl">
            <summary>
            Defines the platform-specific interface for a
            <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IStreamGeometryContextImpl">
            <summary>
            Describes a geometry using drawing commands.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IStreamGeometryImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.StreamGeometry"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IStreamGeometryImpl.Clone">
            <summary>
            Clones the geometry.
            </summary>
            <returns>A cloned geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IStreamGeometryImpl.Open">
            <summary>
            Opens the geometry to start defining it.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Platform.IStreamGeometryContextImpl"/> which can be used to define the geometry.
            </returns>
        </member>
        <member name="T:Avalonia.Platform.ITextShaperImpl">
            <summary>
            An abstraction that is used produce shaped text.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITextShaperImpl.ShapeText(System.ReadOnlyMemory{System.Char},Avalonia.Media.TextFormatting.TextShaperOptions)">
            <summary>
            Shapes the specified region within the text and returns a shaped buffer.
            </summary>
            <param name="text">The text buffer.</param>
            <param name="options">Text shaper options to customize the shaping process.</param>
            <returns>A shaped glyph run.</returns>
        </member>
        <member name="T:Avalonia.Platform.ITransformedGeometryImpl">
            <summary>
            Represents a geometry with a transform applied.
            </summary>
            <remarks>
            An <see cref="T:Avalonia.Platform.ITransformedGeometryImpl"/> transforms a geometry without transforming its
            stroke thickness.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITransformedGeometryImpl.SourceGeometry">
            <summary>
            Gets the source geometry that the <see cref="P:Avalonia.Platform.ITransformedGeometryImpl.Transform"/> is applied to.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITransformedGeometryImpl.Transform">
            <summary>
            Gets the applied transform.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IWriteableBitmapImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.PlatformThemeVariant">
            <summary>
            System theme variant or mode.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.ColorContrastPreference">
            <summary>
            System high contrast preference.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.PlatformColorValues">
            <summary>
            Information about current system color values, including information about dark mode and accent colors.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformColorValues.ThemeVariant">
            <summary>
            System theme variant or mode.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformColorValues.ContrastPreference">
            <summary>
            System high contrast preference.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformColorValues.AccentColor1">
            <summary>
            Primary system accent color.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformColorValues.AccentColor2">
            <summary>
            Secondary system accent color. On some platforms can return the same value as <see cref="P:Avalonia.Platform.PlatformColorValues.AccentColor1"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformColorValues.AccentColor3">
            <summary>
            Tertiary system accent color. On some platforms can return the same value as <see cref="P:Avalonia.Platform.PlatformColorValues.AccentColor1"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.KnownPlatformGraphicsExternalImageHandleTypes">
            <summary>
            Describes various GPU memory handle types that are currently supported by Avalonia graphics backends
            </summary>
        </member>
        <member name="F:Avalonia.Platform.KnownPlatformGraphicsExternalImageHandleTypes.D3D11TextureGlobalSharedHandle">
            <summary>
            An DXGI global shared handle returned by IDXGIResource::GetSharedHandle D3D11_RESOURCE_MISC_SHARED or D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX flag.
            The handle does not own the reference to the underlying video memory, so the provider should make sure that the resource is valid until
            the handle has been successfully imported
            </summary>
        </member>
        <member name="F:Avalonia.Platform.KnownPlatformGraphicsExternalImageHandleTypes.D3D11TextureNtHandle">
            <summary>
            A DXGI NT handle returned by IDXGIResource1::CreateSharedHandle for a texture created with D3D11_RESOURCE_MISC_SHARED_NTHANDLE or flag
            </summary>
        </member>
        <member name="F:Avalonia.Platform.KnownPlatformGraphicsExternalImageHandleTypes.VulkanOpaquePosixFileDescriptor">
            <summary>
            A POSIX file descriptor that's exported by Vulkan using VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT or in a compatible way
            </summary>
        </member>
        <member name="T:Avalonia.Platform.KnownPlatformGraphicsExternalSemaphoreHandleTypes">
            <summary>
            Describes various GPU semaphore handle types that are currently supported by Avalonia graphics backends
            </summary>
        </member>
        <member name="F:Avalonia.Platform.KnownPlatformGraphicsExternalSemaphoreHandleTypes.VulkanOpaquePosixFileDescriptor">
            <summary>
            A POSIX file descriptor that's been exported by Vulkan using VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT or in a compatible way
            </summary>
        </member>
        <member name="F:Avalonia.Platform.KnownPlatformGraphicsExternalSemaphoreHandleTypes.VulkanOpaqueNtHandle">
            <summary>
            A NT handle that's been exported by Vulkan using VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT or in a compatible way
            </summary>
        </member>
        <member name="F:Avalonia.Platform.KnownPlatformGraphicsExternalSemaphoreHandleTypes.Direct3D12FenceNtHandle">
            A DXGI NT handle returned by ID3D12Device::CreateSharedHandle or ID3D11Fence::CreateSharedHandle
        </member>
        <member name="T:Avalonia.Platform.PlatformHandle">
            <summary>
            Represents a platform-specific handle.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.PlatformHandle.#ctor(System.IntPtr,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Platform.PlatformHandle"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="descriptor">
            An optional string that describes what <paramref name="handle"/> represents.
            </param>
        </member>
        <member name="P:Avalonia.Platform.PlatformHandle.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformHandle.HandleDescriptor">
            <summary>
            Gets an optional string that describes what <see cref="P:Avalonia.Platform.PlatformHandle.Handle"/> represents.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.StandardAssetLoader">
            <summary>
            Loads assets compiled into the application binary.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.StandardAssetLoader.SetDefaultAssembly(System.Reflection.Assembly)">
            <summary>
            Sets the default assembly from which to load assets for which no assembly is specified.
            </summary>
            <param name="assembly">The default assembly.</param>
        </member>
        <member name="M:Avalonia.Platform.StandardAssetLoader.Exists(System.Uri,System.Uri)">
            <summary>
            Checks if an asset with the specified URI exists.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>True if the asset could be found; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Platform.StandardAssetLoader.Open(System.Uri,System.Uri)">
            <summary>
            Opens the asset with the requested URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>A stream containing the asset contents.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            The asset could not be found.
            </exception>
        </member>
        <member name="M:Avalonia.Platform.StandardAssetLoader.OpenAndGetAssembly(System.Uri,System.Uri)">
            <summary>
            Opens the asset with the requested URI and returns the asset stream and the
            assembly containing the asset.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>
            The stream containing the resource contents together with the assembly.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">
            The asset could not be found.
            </exception>
        </member>
        <member name="M:Avalonia.Platform.StandardAssetLoader.GetAssets(System.Uri,System.Uri)">
            <summary>
            Gets all assets of a folder and subfolders that match specified uri.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">Base URI that is used if <paramref name="uri"/> is relative.</param>
            <returns>All matching assets as a tuple of the absolute path to the asset and the assembly containing the asset</returns>
        </member>
        <member name="T:Avalonia.Platform.Storage.FilePickerFileType">
            <summary>
            Represents a name mapped to the associated file types (extensions).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerFileType.Name">
            <summary>
            File type name.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerFileType.Patterns">
            <summary>
            List of extensions in GLOB format. I.e. "*.png" or "*.*".
            </summary>
            <remarks>
            Used on Windows, Linux and Browser platforms.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerFileType.MimeTypes">
            <summary>
            List of extensions in MIME format.
            </summary>
            <remarks>
            Used on Android, Linux and Browser platforms.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerFileType.AppleUniformTypeIdentifiers">
            <summary>
            List of extensions in Apple uniform format.
            </summary>
            <remarks>
            Used only on Apple devices.
            See https://developer.apple.com/documentation/uniformtypeidentifiers/system_declared_uniform_type_identifiers.
            </remarks>
        </member>
        <member name="T:Avalonia.Platform.Storage.FilePickerFileTypes">
            <summary>
            Dictionary of well known file types.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.Storage.FilePickerOpenOptions">
            <summary>
            Options class for <see cref="M:Avalonia.Platform.Storage.IStorageProvider.OpenFilePickerAsync(Avalonia.Platform.Storage.FilePickerOpenOptions)"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerOpenOptions.AllowMultiple">
            <summary>
            Gets or sets an option indicating whether open picker allows users to select multiple files.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerOpenOptions.FileTypeFilter">
            <summary>
            Gets or sets the collection of file types that the file open picker displays.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.Storage.FilePickerSaveOptions">
            <summary>
            Options class for <see cref="M:Avalonia.Platform.Storage.IStorageProvider.SaveFilePickerAsync(Avalonia.Platform.Storage.FilePickerSaveOptions)"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerSaveOptions.SuggestedFileName">
            <summary>
            Gets or sets the file name that the file save picker suggests to the user.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerSaveOptions.DefaultExtension">
            <summary>
            Gets or sets the default extension to be used to save the file.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerSaveOptions.FileTypeChoices">
            <summary>
            Gets or sets the collection of valid file types that the user can choose to assign to a file.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FilePickerSaveOptions.ShowOverwritePrompt">
            <summary>
            Gets or sets a value indicating whether file open picker displays a warning if the user specifies the name of a file that already exists.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.Storage.FolderPickerOpenOptions">
            <summary>
            Options class for <see cref="M:Avalonia.Platform.Storage.IStorageProvider.OpenFolderPickerAsync(Avalonia.Platform.Storage.FolderPickerOpenOptions)"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.FolderPickerOpenOptions.AllowMultiple">
            <summary>
            Gets or sets an option indicating whether open picker allows users to select multiple folders.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.Storage.IStorageFile">
            <summary>
            Represents a file. Provides information about the file and its contents, and ways to manipulate them.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageFile.OpenReadAsync">
            <summary>
            Opens a stream for read access.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageFile.OpenWriteAsync">
            <summary>
            Opens stream for writing to the file.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="T:Avalonia.Platform.Storage.IStorageFolder">
            <summary>
            Manipulates folders and their contents, and provides information about them.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageFolder.GetItemsAsync">
            <summary>
            Gets the files and subfolders in the current folder.
            </summary>
            <returns>
            When this method completes successfully, it returns a list of the files and folders in the current folder. Each item in the list is represented by an <see cref="T:Avalonia.Platform.Storage.IStorageItem"/> implementation object.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageFolder.CreateFileAsync(System.String)">
            <summary>
            Creates a file with specified name as a child of the current storage folder
            </summary>
            <param name="name">The display name</param>
            <returns>A new <see cref="T:Avalonia.Platform.Storage.IStorageFile"/> pointing to the moved file. If not null, the current storage item becomes invalid</returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageFolder.CreateFolderAsync(System.String)">
            <summary>
            Creates a folder with specified name as a child of the current storage folder
            </summary>
            <param name="name">The display name</param>
            <returns>A new <see cref="T:Avalonia.Platform.Storage.IStorageFolder"/> pointing to the moved file. If not null, the current storage item becomes invalid</returns>
        </member>
        <member name="T:Avalonia.Platform.Storage.IStorageItem">
            <summary>
            Manipulates storage items (files and folders) and their contents, and provides information about them
            </summary>
            <remarks>
            This interface inherits <see cref="T:System.IDisposable"/> . It's recommended to dispose <see cref="T:Avalonia.Platform.Storage.IStorageItem"/> when it's not used anymore.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Storage.IStorageItem.Name">
            <summary>
            Gets the name of the item including the file name extension if there is one.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.IStorageItem.Path">
            <summary>
            Gets the file-system path of the item.
            </summary>
            <remarks>
            Android backend might return file path with "content:" scheme.
            Browser and iOS backends might return relative uris.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageItem.GetBasicPropertiesAsync">
            <summary>
            Gets the basic properties of the current item.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.IStorageItem.CanBookmark">
            <summary>
            Returns true is item can be bookmarked and reused later.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageItem.SaveBookmarkAsync">
            <summary>
            Saves items to a bookmark.
            </summary>
            <returns>
            Returns identifier of a bookmark. Can be null if OS denied request.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageItem.GetParentAsync">
            <summary>
            Gets the parent folder of the current storage item.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageItem.DeleteAsync">
            <summary>
            Deletes the current storage item and it's contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageItem.MoveAsync(Avalonia.Platform.Storage.IStorageFolder)">
            <summary>
            Moves the current storage item and it's contents to a <see cref="T:Avalonia.Platform.Storage.IStorageFolder"/>
            </summary>
            <param name="destination">The <see cref="T:Avalonia.Platform.Storage.IStorageFolder"/> to move the item into</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Platform.Storage.IStorageProvider.CanOpen">
            <summary>
            Returns true if it's possible to open file picker on the current platform. 
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.OpenFilePickerAsync(Avalonia.Platform.Storage.FilePickerOpenOptions)">
            <summary>
            Opens file picker dialog.
            </summary>
            <returns>Array of selected <see cref="T:Avalonia.Platform.Storage.IStorageFile"/> or empty collection if user canceled the dialog.</returns>
        </member>
        <member name="P:Avalonia.Platform.Storage.IStorageProvider.CanSave">
            <summary>
            Returns true if it's possible to open save file picker on the current platform. 
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.SaveFilePickerAsync(Avalonia.Platform.Storage.FilePickerSaveOptions)">
            <summary>
            Opens save file picker dialog.
            </summary>
            <returns>Saved <see cref="T:Avalonia.Platform.Storage.IStorageFile"/> or null if user canceled the dialog.</returns>
        </member>
        <member name="P:Avalonia.Platform.Storage.IStorageProvider.CanPickFolder">
            <summary>
            Returns true if it's possible to open folder picker on the current platform. 
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.OpenFolderPickerAsync(Avalonia.Platform.Storage.FolderPickerOpenOptions)">
            <summary>
            Opens folder picker dialog.
            </summary>
            <returns>Array of selected <see cref="T:Avalonia.Platform.Storage.IStorageFolder"/> or empty collection if user canceled the dialog.</returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.OpenFileBookmarkAsync(System.String)">
            <summary>
            Open <see cref="T:Avalonia.Platform.Storage.IStorageBookmarkFile"/> from the bookmark ID.
            </summary>
            <param name="bookmark">Bookmark ID.</param>
            <returns>Bookmarked file or null if OS denied request.</returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.OpenFolderBookmarkAsync(System.String)">
            <summary>
            Open <see cref="T:Avalonia.Platform.Storage.IStorageBookmarkFolder"/> from the bookmark ID.
            </summary>
            <param name="bookmark">Bookmark ID.</param>
            <returns>Bookmarked folder or null if OS denied request.</returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.TryGetFileFromPathAsync(System.Uri)">
            <summary>
            Attempts to read file from the file-system by its path.
            </summary>
            <param name="filePath">The path of the item to retrieve in Uri format.</param>
            <remarks>
            Uri path is usually expected to be an absolute path with "file" scheme.
            But it can be an uri with "content" scheme on the Android.
            It also might ask user for the permission, and throw an exception if it was denied.
            </remarks>
            <returns>File or null if it doesn't exist.</returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.TryGetFolderFromPathAsync(System.Uri)">
            <summary>
            Attempts to read folder from the file-system by its path.
            </summary>
            <param name="folderPath">The path of the folder to retrieve in Uri format.</param>
            <remarks>
            Uri path is usually expected to be an absolute path with "file" scheme.
            But it can be an uri with "content" scheme on the Android. 
            It also might ask user for the permission, and throw an exception if it was denied.
            </remarks>
            <returns>Folder or null if it doesn't exist.</returns>
        </member>
        <member name="M:Avalonia.Platform.Storage.IStorageProvider.TryGetWellKnownFolderAsync(Avalonia.Platform.Storage.WellKnownFolder)">
            <summary>
            Attempts to read folder from the file-system by its path
            </summary>
            <param name="wellKnownFolder">Well known folder identifier.</param>
            <returns>Folder or null if it doesn't exist.</returns>
        </member>
        <member name="T:Avalonia.Platform.Storage.PickerOptions">
            <summary>
            Common options for <see cref="M:Avalonia.Platform.Storage.IStorageProvider.OpenFolderPickerAsync(Avalonia.Platform.Storage.FolderPickerOpenOptions)"/>, <see cref="M:Avalonia.Platform.Storage.IStorageProvider.OpenFilePickerAsync(Avalonia.Platform.Storage.FilePickerOpenOptions)"/> and <see cref="M:Avalonia.Platform.Storage.IStorageProvider.SaveFilePickerAsync(Avalonia.Platform.Storage.FilePickerSaveOptions)"/> methods. 
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.PickerOptions.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a folder dialog.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.PickerOptions.SuggestedStartLocation">
            <summary>
            Gets or sets the initial location where the file open picker looks for files to present to the user.
            Can be obtained from previously picked folder or using <see cref="M:Avalonia.Platform.Storage.IStorageProvider.TryGetFolderFromPathAsync(System.Uri)"/>
            or <see cref="M:Avalonia.Platform.Storage.IStorageProvider.TryGetWellKnownFolderAsync(Avalonia.Platform.Storage.WellKnownFolder)"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.Storage.StorageItemProperties">
            <summary>
            Provides access to the content-related properties of an item (like a file or folder).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.Storage.StorageItemProperties.Size">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <remarks>
            Can be null if property is not available.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Storage.StorageItemProperties.DateCreated">
            <summary>
            Gets the date and time that the current folder was created.
            </summary>
            <remarks>
            Can be null if property is not available.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.Storage.StorageItemProperties.DateModified">
            <summary>
            Gets the date and time of the last time the file was modified.
            </summary>
            <remarks>
            Can be null if property is not available.
            </remarks>
        </member>
        <member name="T:Avalonia.Platform.Storage.StorageProviderExtensions">
            <summary>
            Group of public extensions for <see cref="T:Avalonia.Platform.Storage.IStorageProvider"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Platform.Storage.StorageProviderExtensions.TryGetFileFromPathAsync(Avalonia.Platform.Storage.IStorageProvider,System.String)">
            <inheritdoc cref="M:Avalonia.Platform.Storage.IStorageProvider.TryGetFileFromPathAsync(System.Uri)"/>
        </member>
        <member name="M:Avalonia.Platform.Storage.StorageProviderExtensions.TryGetFolderFromPathAsync(Avalonia.Platform.Storage.IStorageProvider,System.String)">
            <inheritdoc cref="M:Avalonia.Platform.Storage.IStorageProvider.TryGetFolderFromPathAsync(System.Uri)"/>
        </member>
        <member name="M:Avalonia.Platform.Storage.StorageProviderExtensions.TryGetLocalPath(Avalonia.Platform.Storage.IStorageItem)">
            <summary>
            Gets the local file system path of the item as a string.
            </summary>
            <param name="item">Storage folder or file.</param>
            <returns>Full local path to the folder or file if possible, otherwise null.</returns>
            <remarks>
            Android platform usually uses "content:" virtual file paths
            and Browser platform has isolated access without full paths,
            so on these platforms this method will return null.
            </remarks>
        </member>
        <member name="T:Avalonia.Platform.Storage.WellKnownFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system well known folders.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.Storage.WellKnownFolder.Desktop">
            <summary>
            Current user desktop folder.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.Storage.WellKnownFolder.Documents">
            <summary>
            Current user documents folder.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.Storage.WellKnownFolder.Downloads">
            <summary>
            Current user downloads folder.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.Storage.WellKnownFolder.Music">
            <summary>
            Current user music folder
            </summary>
        </member>
        <member name="F:Avalonia.Platform.Storage.WellKnownFolder.Pictures">
            <summary>
            Current user pictures folder
            </summary>
        </member>
        <member name="F:Avalonia.Platform.Storage.WellKnownFolder.Videos">
            <summary>
            Current user videos folder
            </summary>
        </member>
        <member name="T:Avalonia.Point">
            <summary>
            Defines a point.
            </summary>
        </member>
        <member name="F:Avalonia.Point._x">
            <summary>
            The X position.
            </summary>
        </member>
        <member name="F:Avalonia.Point._y">
            <summary>
            The Y position.
            </summary>
        </member>
        <member name="M:Avalonia.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Point"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
        </member>
        <member name="P:Avalonia.Point.X">
            <summary>
            Gets the X position.
            </summary>
        </member>
        <member name="P:Avalonia.Point.Y">
            <summary>
            Gets the Y position.
            </summary>
        </member>
        <member name="M:Avalonia.Point.op_Implicit(Avalonia.Point)~Avalonia.Vector">
            <summary>
            Converts the <see cref="T:Avalonia.Point"/> to a <see cref="T:Avalonia.Vector"/>.
            </summary>
            <param name="p">The point.</param>
        </member>
        <member name="M:Avalonia.Point.op_UnaryNegation(Avalonia.Point)">
            <summary>
            Negates a point.
            </summary>
            <param name="a">The point.</param>
            <returns>The negated point.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Equality(Avalonia.Point,Avalonia.Point)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.Point"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Inequality(Avalonia.Point,Avalonia.Point)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Point"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Addition(Avalonia.Point,Avalonia.Point)">
            <summary>
            Adds two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Addition(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Adds a vector to a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Subtraction(Avalonia.Point,Avalonia.Point)">
            <summary>
            Subtracts two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Subtraction(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Multiply(Avalonia.Point,System.Double)">
            <summary>
            Multiplies a point by a factor coordinate-wise
            </summary>
            <param name="p">Point to multiply</param>
            <param name="k">Factor</param>
            <returns>Points having its coordinates multiplied</returns>
        </member>
        <member name="M:Avalonia.Point.op_Multiply(System.Double,Avalonia.Point)">
            <summary>
            Multiplies a point by a factor coordinate-wise
            </summary>
            <param name="p">Point to multiply</param>
            <param name="k">Factor</param>
            <returns>Points having its coordinates multiplied</returns>
        </member>
        <member name="M:Avalonia.Point.op_Division(Avalonia.Point,System.Double)">
            <summary>
            Divides a point by a factor coordinate-wise
            </summary>
            <param name="p">Point to divide by</param>
            <param name="k">Factor</param>
            <returns>Points having its coordinates divided</returns>
        </member>
        <member name="M:Avalonia.Point.op_Multiply(Avalonia.Point,Avalonia.Matrix)">
            <summary>
            Applies a matrix to a point.
            </summary>
            <param name="point">The point.</param>
            <param name="matrix">The matrix.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Avalonia.Point.Distance(Avalonia.Point,Avalonia.Point)">
            <summary>
            Computes the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The Euclidean distance.</returns>
        </member>
        <member name="M:Avalonia.Point.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Point"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Point"/>.</returns>
        </member>
        <member name="M:Avalonia.Point.Equals(Avalonia.Point)">
            <summary>
            Returns a boolean indicating whether the point is equal to the other given point (bitwise).
            </summary>
            <param name="other">The other point to test equality against.</param>
            <returns>True if this point is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Point.NearlyEquals(Avalonia.Point)">
            <summary>
            Returns a boolean indicating whether the point is equal to the other given point
            (numerically).
            </summary>
            <param name="other">The other point to test equality against.</param>
            <returns>True if this point is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Point.Equals(System.Object)">
            <summary>
            Checks for equality between a point and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a point that equals the current point.
            </returns>
        </member>
        <member name="M:Avalonia.Point.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.Point"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Point.ToString">
            <summary>
            Returns the string representation of the point.
            </summary>
            <returns>The string representation of the point.</returns>
        </member>
        <member name="M:Avalonia.Point.Transform(Avalonia.Matrix)">
            <summary>
            Transforms the point by a matrix.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Avalonia.Point.WithX(System.Double)">
            <summary>
            Returns a new point with the specified X coordinate.
            </summary>
            <param name="x">The X coordinate.</param>
            <returns>The new point.</returns>
        </member>
        <member name="M:Avalonia.Point.WithY(System.Double)">
            <summary>
            Returns a new point with the specified Y coordinate.
            </summary>
            <param name="y">The Y coordinate.</param>
            <returns>The new point.</returns>
        </member>
        <member name="M:Avalonia.Point.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the point into its X and Y coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="T:Avalonia.PropertyStore.EffectiveValue">
            <summary>
            Represents the active value for a property in a <see cref="T:Avalonia.PropertyStore.ValueStore"/>.
            </summary>
            <remarks>
            This class is an abstract base for the generic <see cref="T:Avalonia.PropertyStore.EffectiveValue`1"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.Value">
            <summary>
            Gets the current effective value as a boxed value.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.Priority">
            <summary>
            Gets the priority of the current effective value.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.BasePriority">
            <summary>
            Gets the priority of the current base value.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.ValueEntry">
            <summary>
            Gets the active value entry for the current effective value.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.BaseValueEntry">
            <summary>
            Gets the active value entry for the current base value.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.HasCoercion">
            <summary>
            Gets a value indicating whether the property has a coercion function.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.IsOverridenCurrentValue">
            <summary>
            Gets a value indicating whether the <see cref="P:Avalonia.PropertyStore.EffectiveValue.Value"/> was overridden by a call to 
            <see cref="M:Avalonia.AvaloniaObject.SetCurrentValue``1(Avalonia.StyledProperty{``0},``0)"/>.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue.IsCoercedDefaultValue">
            <summary>
            Gets a value indicating whether the <see cref="P:Avalonia.PropertyStore.EffectiveValue.Value"/> is the result of the 
            
            </summary>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.BeginReevaluation(System.Boolean)">
            <summary>
            Begins a reevaluation pass on the effective value.
            </summary>
            <param name="clearLocalValue">
            Determines whether any current local value should be cleared.
            </param>
            <remarks>
            This method resets the <see cref="P:Avalonia.PropertyStore.EffectiveValue.Priority"/> and <see cref="P:Avalonia.PropertyStore.EffectiveValue.BasePriority"/> properties
            to Unset, pending reevaluation.
            </remarks>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.EndReevaluation(Avalonia.PropertyStore.ValueStore,Avalonia.AvaloniaProperty)">
            <summary>
            Ends a reevaluation pass on the effective value.
            </summary>
            <param name="owner">The associated value store.</param>
            <param name="property">The property being reevaluated.</param>
            <remarks>
            Handles coercing the default value if necessary.
            </remarks>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.CanRemove">
            <summary>
            Gets a value indicating whether the effective value represents the default value of the
            property and can be removed.
            </summary>
            <returns>True if the effective value van be removed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.UnsubscribeIfNecessary">
            <summary>
            Unsubscribes from any unused value entries.
            </summary>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.SetAndRaise(Avalonia.PropertyStore.ValueStore,Avalonia.PropertyStore.IValueEntry,Avalonia.Data.BindingPriority)">
            <summary>
            Sets the value and base value for a non-LocalValue priority, raising 
            <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> where necessary.
            </summary>
            <param name="owner">The associated value store.</param>
            <param name="value">The new value of the property.</param>
            <param name="priority">The priority of the new value.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.RaiseInheritedValueChanged(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,Avalonia.PropertyStore.EffectiveValue,Avalonia.PropertyStore.EffectiveValue)">
            <summary>
            Raises <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> in response to an inherited value
            change.
            </summary>
            <param name="owner">The owner object.</param>
            <param name="property">The property being changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.RemoveAnimationAndRaise(Avalonia.PropertyStore.ValueStore,Avalonia.AvaloniaProperty)">
            <summary>
            Removes the current animation value and reverts to the base value, raising
            <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> where necessary.
            </summary>
            <param name="owner">The associated value store.</param>
            <param name="property">The property being changed.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.CoerceValue(Avalonia.PropertyStore.ValueStore,Avalonia.AvaloniaProperty)">
            <summary>
            Coerces the property value.
            </summary>
            <param name="owner">The associated value store.</param>
            <param name="property">The property to coerce.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.DisposeAndRaiseUnset(Avalonia.PropertyStore.ValueStore,Avalonia.AvaloniaProperty)">
            <summary>
            Disposes the effective value, raising <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/>
            where necessary.
            </summary>
            <param name="owner">The associated value store.</param>
            <param name="property">The property being cleared.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.CoerceDefaultValueAndRaise(Avalonia.PropertyStore.ValueStore,Avalonia.AvaloniaProperty)">
            <summary>
            Coerces the default value, raising <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/>
            where necessary.
            </summary>
            <param name="owner">The associated value store.</param>
            <param name="property">The property being coerced.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.EffectiveValue.GetBoxedValue">
            <summary>
            Gets the current effective value as a boxed value.
            </summary>
        </member>
        <member name="T:Avalonia.PropertyStore.EffectiveValue`1">
            <summary>
            Represents the active value for a property in a <see cref="T:Avalonia.PropertyStore.ValueStore"/>.
            </summary>
            <remarks>
            Stores the active value in an <see cref="T:Avalonia.AvaloniaObject"/>'s <see cref="T:Avalonia.PropertyStore.ValueStore"/>
            for a single property, when the value is not inherited or unset/default.
            </remarks>
        </member>
        <member name="P:Avalonia.PropertyStore.EffectiveValue`1.Value">
            <summary>
            Gets the current effective value.
            </summary>
        </member>
        <member name="T:Avalonia.PropertyStore.ImmediateValueFrame">
            <summary>
            Holds values in a <see cref="T:Avalonia.PropertyStore.ValueStore"/> set by one of the SetValue or AddBinding
            overloads with non-LocalValue priority.
            </summary>
        </member>
        <member name="T:Avalonia.PropertyStore.IValueEntry">
            <summary>
            Represents an untyped value entry in a <see cref="T:Avalonia.PropertyStore.ValueFrame"/>.
            </summary>
        </member>
        <member name="P:Avalonia.PropertyStore.IValueEntry.Property">
            <summary>
            Gets the property that this value applies to.
            </summary>
        </member>
        <member name="M:Avalonia.PropertyStore.IValueEntry.GetValue">
            <summary>
            Gets the value associated with the entry.
            </summary>
            <exception cref="T:Avalonia.AvaloniaInternalException">
            The entry has no value.
            </exception>
        </member>
        <member name="M:Avalonia.PropertyStore.IValueEntry.GetDataValidationState(Avalonia.Data.BindingValueType@,System.Exception@)">
            <summary>
            Gets the data validation state if supported.
            </summary>
            <param name="state">The binding validation state.</param>
            <param name="error">The current binding error, if any.</param>
            <returns>
            True if the entry supports data validation, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.PropertyStore.IValueEntry.Unsubscribe">
            <summary>
            Called when the value entry is removed from the value store.
            </summary>
        </member>
        <member name="T:Avalonia.PropertyStore.IValueEntry`1">
            <summary>
            Represents a typed value entry in a <see cref="T:Avalonia.PropertyStore.ValueFrame"/>.
            </summary>
        </member>
        <member name="M:Avalonia.PropertyStore.IValueEntry`1.GetValue">
            <summary>
            Gets the value associated with the entry.
            </summary>
            <exception cref="T:Avalonia.AvaloniaInternalException">
            The entry has no value.
            </exception>
        </member>
        <member name="T:Avalonia.PropertyStore.PropertyNotifying">
            <summary>
            Raises <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> where necessary.
            </summary>
            <remarks>
            Uses the disposable pattern to ensure that the closing Notifying call is made even in the
            presence of exceptions. 
            </remarks>
        </member>
        <member name="T:Avalonia.PropertyStore.SourceUntypedBindingEntry`1">
            <summary>
            An <see cref="T:Avalonia.PropertyStore.IValueEntry"/> that holds a binding whose source observable is untyped and
            target property is typed.
            </summary>
        </member>
        <member name="T:Avalonia.PropertyStore.TypedBindingEntry`1">
            <summary>
            An <see cref="T:Avalonia.PropertyStore.IValueEntry"/> that holds a binding whose source observable and target
            property are both typed.
            </summary>
        </member>
        <member name="T:Avalonia.PropertyStore.UntypedBindingEntry">
            <summary>
            An <see cref="T:Avalonia.PropertyStore.IValueEntry"/> that holds a binding whose source observable and target
            property are both untyped.
            </summary>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnBindingValueChanged(Avalonia.PropertyStore.IValueEntry,Avalonia.Data.BindingPriority)">
            <summary>
            Called by non-LocalValue binding entries to re-evaluate the effective value when the
            binding produces a new value.
            </summary>
            <param name="entry">The binding entry.</param>
            <param name="priority">The priority of binding which produced a new value.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnFrameActivationChanged(Avalonia.PropertyStore.ValueFrame)">
            <summary>
            Called by a <see cref="T:Avalonia.PropertyStore.ValueFrame"/> when its <see cref="P:Avalonia.PropertyStore.ValueFrame.IsActive"/>
            state changes.
            </summary>
            <param name="frame">The frame which produced the change.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnInheritanceAncestorChanged(Avalonia.PropertyStore.ValueStore)">
            <summary>
            Called by the parent value store when its inheritance ancestor changes.
            </summary>
            <param name="ancestor">The new inheritance ancestor.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnInheritedEffectiveValueChanged``1(Avalonia.StyledProperty{``0},``0,Avalonia.PropertyStore.EffectiveValue{``0})">
            <summary>
            Called by <see cref="T:Avalonia.PropertyStore.EffectiveValue`1"/> when an property with inheritance enabled
            changes its value on this value store.
            </summary>
            <param name="property">The property whose value changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="value">The effective value instance.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnInheritedEffectiveValueDisposed``1(Avalonia.StyledProperty{``0},``0,``0)">
            <summary>
            Called by <see cref="T:Avalonia.PropertyStore.EffectiveValue`1"/> when an property with inheritance enabled
            is removed from the effective values.
            </summary>
            <param name="property">The property whose value changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnLocalValueBindingCompleted(Avalonia.AvaloniaProperty,System.IDisposable)">
            <summary>
            Called when a <see cref="T:Avalonia.PropertyStore.LocalValueBindingObserver`1"/> or
            <see cref="T:Avalonia.PropertyStore.DirectBindingObserver`1"/> completes.
            </summary>
            <param name="property">The previously bound property.</param>
            <param name="observer">The observer.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnAncestorInheritedValueChanged``1(Avalonia.StyledProperty{``0},``0,``0)">
            <summary>
            Called when an inherited property changes on the value store of the inheritance ancestor.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="property">The property.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.OnValueEntryRemoved(Avalonia.PropertyStore.ValueFrame,Avalonia.AvaloniaProperty)">
            <summary>
            Called by a <see cref="T:Avalonia.PropertyStore.ValueFrame"/> to re-evaluate the effective value when a value
            is removed.
            </summary>
            <param name="frame">The frame on which the change occurred.</param>
            <param name="property">The property whose value was removed.</param>
        </member>
        <member name="M:Avalonia.PropertyStore.ValueStore.AddEffectiveValueAndRaise(Avalonia.AvaloniaProperty,Avalonia.PropertyStore.IValueEntry,Avalonia.Data.BindingPriority)">
            <summary>
            Adds a new effective value, raises the initial <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/>
            event and notifies inheritance children if necessary .
            </summary>
            <param name="property">The property.</param>
            <param name="entry">The value entry.</param>
            <param name="priority">The value priority.</param>
        </member>
        <member name="T:Avalonia.Reactive.AnonymousObserver`1">
            <summary>
            Class to create an <see cref="T:System.IObserver`1"/> instance from delegate-based implementations of the On* methods.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> class with the specified number of disposables.
            </summary>
            <param name="capacity">The number of disposables that the new CompositeDisposable can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.#ctor(System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Any of the disposables in the <paramref name="disposables"/> collection is <c>null</c>.</exception>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.#ctor(System.Collections.Generic.IList{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Any of the disposables in the <paramref name="disposables"/> collection is <c>null</c>.</exception>
        </member>
        <member name="P:Avalonia.Reactive.CompositeDisposable.Count">
            <summary>
            Gets the number of disposables contained in the <see cref="T:Avalonia.Reactive.CompositeDisposable"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.Add(System.IDisposable)">
            <summary>
            Adds a disposable to the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> or disposes the disposable if the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> is disposed.
            </summary>
            <param name="item">Disposable to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.Remove(System.IDisposable)">
            <summary>
            Removes and disposes the first occurrence of a disposable from the <see cref="T:Avalonia.Reactive.CompositeDisposable"/>.
            </summary>
            <param name="item">Disposable to remove.</param>
            <returns>true if found; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.Dispose">
            <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.Clear">
            <summary>
            Removes and disposes all disposables from the <see cref="T:Avalonia.Reactive.CompositeDisposable"/>, but does not dispose the <see cref="T:Avalonia.Reactive.CompositeDisposable"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.Contains(System.IDisposable)">
            <summary>
            Determines whether the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> contains a specific disposable.
            </summary>
            <param name="item">Disposable to search for.</param>
            <returns>true if the disposable was found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
            <summary>
            Copies the disposables contained in the <see cref="T:Avalonia.Reactive.CompositeDisposable"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">Array to copy the contained disposables to.</param>
            <param name="arrayIndex">Target index at which to copy the first disposable of the group.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero. -or - <paramref name="arrayIndex"/> is larger than or equal to the array length.</exception>
        </member>
        <member name="P:Avalonia.Reactive.CompositeDisposable.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Avalonia.Reactive.CompositeDisposable"/>.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="M:Avalonia.Reactive.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Avalonia.Reactive.CompositeDisposable"/>.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="P:Avalonia.Reactive.CompositeDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="F:Avalonia.Reactive.CompositeDisposable.EmptyEnumerator">
            <summary>
            An empty enumerator for the <see cref="M:Avalonia.Reactive.CompositeDisposable.GetEnumerator"/>
            method to avoid allocation on disposed or empty composites.
            </summary>
        </member>
        <member name="T:Avalonia.Reactive.CompositeDisposable.CompositeEnumerator">
            <summary>
            An enumerator for an array of disposables.
            </summary>
        </member>
        <member name="T:Avalonia.Reactive.Disposable">
            <summary>
            Provides a set of static methods for creating <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="T:Avalonia.Reactive.Disposable.EmptyDisposable">
            <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
        </member>
        <member name="P:Avalonia.Reactive.Disposable.Empty">
            <summary>
            Gets the disposable that does nothing when disposed.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.Disposable.Create(System.Action)">
            <summary>
            Creates a disposable object that invokes the specified action when disposed.
            </summary>
            <param name="dispose">Action to run during the first call to <see cref="M:System.IDisposable.Dispose"/>. The action is guaranteed to be run at most once.</param>
            <returns>The disposable object that runs the given action upon disposal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dispose"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Avalonia.Reactive.Disposable.Create``1(``0,System.Action{``0})">
            <summary>
            Creates a disposable object that invokes the specified action when disposed.
            </summary>
            <param name="state">The state to be passed to the action.</param>
            <param name="dispose">Action to run during the first call to <see cref="M:System.IDisposable.Dispose"/>. The action is guaranteed to be run at most once.</param>
            <returns>The disposable object that runs the given action upon disposal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dispose"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Avalonia.Reactive.DisposableMixin">
            <summary>
            Extension methods associated with the IDisposable interface.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.DisposableMixin.DisposeWith``1(``0,Avalonia.Reactive.CompositeDisposable)">
            <summary>
            Ensures the provided disposable is disposed with the specified <see cref="T:Avalonia.Reactive.CompositeDisposable"/>.
            </summary>
            <typeparam name="T">
            The type of the disposable.
            </typeparam>
            <param name="item">
            The disposable we are going to want to be disposed by the CompositeDisposable.
            </param>
            <param name="compositeDisposable">
            The <see cref="T:Avalonia.Reactive.CompositeDisposable"/> to which <paramref name="item"/> will be added.
            </param>
            <returns>
            The disposable.
            </returns>
        </member>
        <member name="T:Avalonia.Reactive.LightweightObservableBase`1">
            <summary>
            Lightweight base class for observable implementations.
            </summary>
            <typeparam name="T">The observable type.</typeparam>
            <remarks>
            ObservableBase{T} is rather heavyweight in terms of allocations and memory
            usage. This class provides a more lightweight base for some internal observable types
            in the Avalonia framework.
            </remarks>
        </member>
        <member name="T:Avalonia.Reactive.Observable">
            <summary>
            Provides common observable methods as a replacement for the Rx framework.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.Observable.SingleValue``1(``0)">
            <summary>
            Returns an observable that fires once with the specified value and never completes.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The observable.</returns>
        </member>
        <member name="M:Avalonia.Reactive.Operators.Sink`1.Dispose(System.Boolean)">
            <summary>
            Override this method to dispose additional resources.
            The method is guaranteed to be called at most once.
            </summary>
            <param name="disposing">If true, the method was called from <see cref="M:Avalonia.Reactive.Operators.Sink`1.Dispose"/>.</param>
        </member>
        <member name="T:Avalonia.Reactive.SerialDisposableValue">
            <summary>
            Represents a disposable resource whose underlying disposable resource can be replaced by another disposable resource, causing automatic disposal of the previous underlying disposable resource.
            </summary>
        </member>
        <member name="T:Avalonia.Rect">
            <summary>
            Defines a rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._x">
            <summary>
            The X position.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._y">
            <summary>
            The Y position.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:Avalonia.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Avalonia.Rect.#ctor(Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.Rect.#ctor(Avalonia.Point,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.Rect.#ctor(Avalonia.Point,Avalonia.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="topLeft">The top left position of the rectangle.</param>
            <param name="bottomRight">The bottom right position of the rectangle.</param>
        </member>
        <member name="P:Avalonia.Rect.X">
            <summary>
            Gets the X position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Y">
            <summary>
            Gets the Y position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Position">
            <summary>
            Gets the position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Right">
            <summary>
            Gets the right position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Bottom">
            <summary>
            Gets the bottom position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Left">
            <summary>
            Gets the left position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Top">
            <summary>
            Gets the top position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.TopLeft">
            <summary>
            Gets the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.TopRight">
            <summary>
            Gets the top right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.BottomLeft">
            <summary>
            Gets the bottom left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.BottomRight">
            <summary>
            Gets the bottom right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.Rect.op_Equality(Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.Rect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Inequality(Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Rect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Multiply(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Multiplies a rectangle by a scaling vector.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">The vector scale.</param>
            <returns>The scaled rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Multiply(Avalonia.Rect,System.Double)">
            <summary>
            Multiplies a rectangle by a scale.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">The scale.</param>
            <returns>The scaled rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Division(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Divides a rectangle by a vector.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">The vector scale.</param>
            <returns>The scaled rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Contains(Avalonia.Point)">
            <summary>
            Determines whether a point is in the bounds of the rectangle.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.ContainsExclusive(Avalonia.Point)">
            <summary>
            Determines whether a point is in the bounds of the rectangle, exclusive of the
            rectangle's bottom/right edge.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>    
        </member>
        <member name="M:Avalonia.Rect.Contains(Avalonia.Rect)">
            <summary>
            Determines whether the rectangle fully contains another rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <returns>true if the rectangle is fully contained; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.CenterRect(Avalonia.Rect)">
            <summary>
            Centers another rectangle in this rectangle.
            </summary>
            <param name="rect">The rectangle to center.</param>
            <returns>The centered rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Inflate(System.Double)">
            <summary>
            Inflates the rectangle.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The inflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Inflate(Avalonia.Thickness)">
            <summary>
            Inflates the rectangle.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The inflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Deflate(System.Double)">
            <summary>
            Deflates the rectangle.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The deflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Deflate(Avalonia.Thickness)">
            <summary>
            Deflates the rectangle by a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The deflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Equals(Avalonia.Rect)">
            <summary>
            Returns a boolean indicating whether the rect is equal to the other given rect.
            </summary>
            <param name="other">The other rect to test equality against.</param>
            <returns>True if this rect is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Rect.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given object is equal to this rectangle.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if the object is equal to this rectangle; false otherwise.</returns>
        </member>
        <member name="M:Avalonia.Rect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Rect.Intersect(Avalonia.Rect)">
            <summary>
            Gets the intersection of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The intersection.</returns>
        </member>
        <member name="M:Avalonia.Rect.Intersects(Avalonia.Rect)">
            <summary>
            Determines whether a rectangle intersects with this rectangle.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>
            True if the specified rectangle intersects with this one; otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Rect.TransformToAABB(Avalonia.Matrix)">
            <summary>
            Returns the axis-aligned bounding box of a transformed rectangle.
            </summary>
            <param name="matrix">The transform.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="M:Avalonia.Rect.Translate(Avalonia.Vector)">
            <summary>
            Translates the rectangle by an offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The translated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Normalize">
            <summary>
            Normalizes the rectangle so both the <see cref="P:Avalonia.Rect.Width"/> and <see 
            cref="P:Avalonia.Rect.Height"/> are positive, without changing the location of the rectangle
            </summary>
            <returns>Normalized Rect</returns>
            <remarks>
            Empty rect will be return when Rect contains invalid values. Like NaN.
            </remarks>
        </member>
        <member name="M:Avalonia.Rect.Union(Avalonia.Rect)">
            <summary>
            Gets the union of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The union.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithX(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified X position.
            </summary>
            <param name="x">The x position.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithY(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified Y position.
            </summary>
            <param name="y">The y position.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithWidth(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithHeight(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.ToString">
            <summary>
            Returns the string representation of the rectangle.
            </summary>
            <returns>The string representation of the rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Rect"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.IsEmpty">
            <summary>
            This method should be used internally to check for the rect emptiness
            Once we add support for WPF-like empty rects, there will be an actual implementation
            For now it's internal to keep some loud community members happy about the API being pretty 
            </summary>
        </member>
        <member name="T:Avalonia.RelativeUnit">
            <summary>
            Defines the reference point units of an <see cref="T:Avalonia.RelativePoint"/> or 
            <see cref="T:Avalonia.RelativeRect"/>.
            </summary>
        </member>
        <member name="F:Avalonia.RelativeUnit.Relative">
            <summary>
            The point is expressed as a fraction of the containing element's size.
            </summary>
        </member>
        <member name="F:Avalonia.RelativeUnit.Absolute">
            <summary>
            The point is absolute (i.e. in pixels).
            </summary>
        </member>
        <member name="T:Avalonia.RelativePoint">
            <summary>
            Defines a point that may be defined relative to a containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativePoint.TopLeft">
            <summary>
            A point at the top left of the containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativePoint.Center">
            <summary>
            A point at the center of the containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativePoint.BottomRight">
            <summary>
            A point at the bottom right of the containing element.
            </summary>
        </member>
        <member name="M:Avalonia.RelativePoint.#ctor(System.Double,System.Double,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativePoint"/> struct.
            </summary>
            <param name="x">The X point.</param>
            <param name="y">The Y point</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Avalonia.RelativePoint.#ctor(Avalonia.Point,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativePoint"/> struct.
            </summary>
            <param name="point">The point.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:Avalonia.RelativePoint.Point">
            <summary>
            Gets the point.
            </summary>
        </member>
        <member name="P:Avalonia.RelativePoint.Unit">
            <summary>
            Gets the unit.
            </summary>
        </member>
        <member name="M:Avalonia.RelativePoint.op_Equality(Avalonia.RelativePoint,Avalonia.RelativePoint)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.RelativePoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.op_Inequality(Avalonia.RelativePoint,Avalonia.RelativePoint)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.RelativePoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativePoint"/> equals another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.Equals(Avalonia.RelativePoint)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativePoint"/> equals another point.
            </summary>
            <param name="p">The other point.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.GetHashCode">
            <summary>
            Gets a hashcode for a <see cref="T:Avalonia.RelativePoint"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.ToPixels(Avalonia.Size)">
            <summary>
            Converts a <see cref="T:Avalonia.RelativePoint"/> into pixels.
            </summary>
            <param name="size">The size of the visual.</param>
            <returns>The origin point in pixels.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.RelativePoint"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.RelativePoint"/>.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.ToString">
            <summary>
            Returns a String representing this RelativePoint instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:Avalonia.RelativeRect">
            <summary>
            Defines a rectangle that may be defined relative to a containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativeRect.Fill">
            <summary>
            A rectangle that represents 100% of an area.
            </summary>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(System.Double,System.Double,System.Double,System.Double,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Rect,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Size,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="size">The size of the rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Point,Avalonia.Size,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Point,Avalonia.Point,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="topLeft">The top left position of the rectangle.</param>
            <param name="bottomRight">The bottom right position of the rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="P:Avalonia.RelativeRect.Unit">
            <summary>
            Gets the unit of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.RelativeRect.Rect">
            <summary>
            Gets the rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.RelativeRect.op_Equality(Avalonia.RelativeRect,Avalonia.RelativeRect)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.RelativeRect"/>s.
            </summary>
            <param name="left">The first rectangle.</param>
            <param name="right">The second rectangle.</param>
            <returns>True if the rectangles are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.op_Inequality(Avalonia.RelativeRect,Avalonia.RelativeRect)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.RelativeRect"/>s.
            </summary>
            <param name="left">The first rectangle.</param>
            <param name="right">The second rectangle.</param>
            <returns>True if the rectangles are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativeRect"/> equals another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.Equals(Avalonia.RelativeRect)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativeRect"/> equals another rectangle.
            </summary>
            <param name="p">The other rectangle.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.GetHashCode">
            <summary>
            Gets a hashcode for a <see cref="T:Avalonia.RelativeRect"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.ToPixels(Avalonia.Size)">
            <summary>
            Converts a <see cref="T:Avalonia.RelativeRect"/> into pixels.
            </summary>
            <param name="size">The size of the visual.</param>
            <returns>The origin point in pixels.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.RelativeRect"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.RelativeRect"/>.</returns>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.AnimationInstanceBase">
            <summary>
            The base class for both key-frame and expression animation instances
            Is responsible for activation tracking and for subscribing to properties used in dependencies
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.CompositionAnimation">
            <summary>
            This is the base class for ExpressionAnimation and KeyFrameAnimation.
            </summary>
            <remarks>
            Use the <see cref="M:Avalonia.Rendering.Composition.CompositionObject.StartAnimation(System.String,Avalonia.Rendering.Composition.Animations.CompositionAnimation)"/> method to start the animation.
            Value parameters (as opposed to reference parameters which are set using <see cref="M:Avalonia.Rendering.Composition.Animations.CompositionAnimation.SetReferenceParameter(System.String,Avalonia.Rendering.Composition.CompositionObject)"/>)
            are copied and "embedded" into an expression at the time CompositionObject.StartAnimation is called.
            Changing the value of the variable after <see cref="M:Avalonia.Rendering.Composition.CompositionObject.StartAnimation(System.String,Avalonia.Rendering.Composition.Animations.CompositionAnimation)"/> is called will not affect
            the value of the ExpressionAnimation.
            See the remarks section of ExpressionAnimation for additional information.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Animations.CompositionAnimation.ClearAllParameters">
            <summary>
            Clears all of the parameters of the animation.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Animations.CompositionAnimation.ClearParameter(System.String)">
            <summary>
            Clears a parameter from the animation.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.ExpressionAnimation">
            <summary>
            A Composition Animation that uses a mathematical equation to calculate the value for an animating property every frame.
            </summary>
            <remarks>
            The core of ExpressionAnimations allows a developer to define a mathematical equation that can be used to calculate the value
            of a targeted animating property each frame.
            This contrasts <see cref="T:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation"/>s, which use an interpolator to define how the animating
            property changes over time. The mathematical equation can be defined using references to properties
            of Composition objects, mathematical functions and operators and Input.
            Use the <see cref="M:Avalonia.Rendering.Composition.CompositionObject.StartAnimation(System.String,Avalonia.Rendering.Composition.Animations.CompositionAnimation)"/> method to start the animation.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.ExpressionAnimation.Expression">
            <summary>
            The mathematical equation specifying how the animated value is calculated each frame.
            The Expression is the core of an <see cref="T:Avalonia.Rendering.Composition.Animations.ExpressionAnimation"/> and represents the equation
            the system will use to calculate the value of the animation property each frame.
            The equation is set on this property in the form of a string.
            Although expressions can be defined by simple mathematical equations such as "2+2",
            the real power lies in creating mathematical relationships where the input values can change frame over frame.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.ExpressionAnimationInstance">
            <summary>
            Server-side counterpart of <see cref="T:Avalonia.Rendering.Composition.Animations.ExpressionAnimation"/> with values baked-in.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase">
            <summary>
            Base class for composition animations.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.ImplicitAnimationCollection">
             <summary>
             A collection of animations triggered when a condition is met.
             </summary>
             <remarks>
             Implicit animations let you drive animations by specifying trigger conditions rather than requiring the manual definition of animation behavior.
             They help decouple animation start logic from core app logic. You define animations and the events that should trigger these animations.
             Currently the only available trigger is animated property change.
            
             When expression is used in ImplicitAnimationCollection a special keyword `this.FinalValue` will represent
             the final value of the animated property that was changed 
             </remarks>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.IInterpolator`1">
            <summary>
             An interface to define interpolation logic for a particular type
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation">
            <summary>
            A time-based animation with one or more key frames.
            These frames are markers, allowing developers to specify values at specific times for the animating property.
            KeyFrame animations can be further customized by specifying how the animation interpolates between keyframes.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.DelayBehavior">
            <summary>
            The delay behavior of the key frame animation.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.DelayTime">
            <summary>
            Delay before the animation starts after <see cref="M:Avalonia.Rendering.Composition.CompositionObject.StartAnimation(System.String,Avalonia.Rendering.Composition.Animations.CompositionAnimation)"/> is called.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.Direction">
            <summary>
            The direction the animation is playing.
            The Direction property allows you to drive your animation from start to end or end to start or alternate
            between start and end or end to start if animation has an <see cref="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.IterationCount"/> greater than one.
            This gives an easy way for customizing animation definitions.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.Duration">
            <summary>
            The duration of the animation.
            Minimum allowed value is 1ms and maximum allowed value is 24 days.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.IterationBehavior">
            <summary>
            The iteration behavior for the key frame animation.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.IterationCount">
            <summary>
            The number of times to repeat the key frame animation.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.StopBehavior">
            <summary>
            Specifies how to set the property value when animation is stopped
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Animations.KeyFrameAnimation.InsertExpressionKeyFrame(System.Single,System.String,Avalonia.Animation.Easings.Easing)">
            <summary>
            Inserts an expression keyframe.
            </summary>
            <param name="normalizedProgressKey">
            The time the key frame should occur at, expressed as a percentage of the animation Duration. Allowed value is from 0.0 to 1.0.
            </param>
            <param name="value">The expression used to calculate the value of the key frame.</param>
            <param name="easingFunction">The easing function to use when interpolating between frames.</param>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.AnimationDelayBehavior">
            <summary>
            Specifies the animation delay behavior.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationDelayBehavior.SetInitialValueAfterDelay">
            <summary>
            If a DelayTime is specified, it delays starting the animation according to delay time and after delay
            has expired it applies animation to the object property.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationDelayBehavior.SetInitialValueBeforeDelay">
            <summary>
            Applies the initial value of the animation (i.e. the value at Keyframe 0) to the object before the delay time
            is elapsed (when there is a DelayTime specified), it then delays starting the animation according to the DelayTime.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.AnimationIterationBehavior">
            <summary>
            Specifies if the animation should loop.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationIterationBehavior.Count">
            <summary>
            The animation should loop the specified number of times.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationIterationBehavior.Forever">
            <summary>
            The animation should loop forever.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.AnimationStopBehavior">
            <summary>
            Specifies the behavior of an animation when it stops.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationStopBehavior.LeaveCurrentValue">
            <summary>
            Leave the animation at its current value.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationStopBehavior.SetToInitialValue">
            <summary>
            Reset the animation to its initial value.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.Animations.AnimationStopBehavior.SetToFinalValue">
            <summary>
            Set the animation to its final value.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.KeyFrameAnimationInstance`1">
            <summary>
            Server-side counterpart of KeyFrameAnimation with values baked-in
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.KeyFrames`1">
            <summary>
            Collection of composition animation key frames
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.KeyFrame`1">
            <summary>
            Composition animation key frame
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.ServerKeyFrame`1">
            <summary>
            Server-side composition animation key frame
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Animations.PropertySetSnapshot">
            <summary>
            A snapshot of properties used by an animation
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.DiagnosticTextRenderer">
            <summary>
            A class used to render diagnostic strings (only!), with caching of ASCII glyph runs.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.CompositorDrawingContextProxy">
            <summary>
            A bunch of hacks to make the existing rendering operations and IDrawingContext
            to work with composition rendering infrastructure.
            1) Keeps and applies the transform of the current visual since drawing operations think that
            they have information about the full render transform (they are not)
            2) Keeps the draw list for the VisualBrush contents of the current drawing operation.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.FpsCounter">
            <summary>
            An FPS counter helper that can draw itself on the render thread
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.FrameTimeGraph">
            <summary>
            Represents a simple time graph for diagnostics purpose, used to show layout and render times.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ReadbackIndices">
            <summary>
            A helper class used to manage the current slots for writing data from the render thread
            and reading it from the UI thread.
            Used mostly by hit-testing which needs to know the last transform of the visual
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerCompositionContainerVisual">
            <summary>
            Server-side counterpart of <see cref="T:Avalonia.Rendering.Composition.CompositionContainerVisual"/>.
            Mostly propagates update and render calls, but is also responsible
            for updating adorners in deferred manner
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerCompositionDrawListVisual">
            <summary>
            Server-side counterpart of <see cref="T:Avalonia.Rendering.Composition.CompositionDrawListVisual"/>
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerCompositionTarget">
            <summary>
            Server-side counterpart of the <see cref="T:Avalonia.Rendering.Composition.CompositionTarget"/>
            That's the place where we update visual transforms, track dirty rects and actually do rendering
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerCompositionVisual">
            <summary>
            Server-side <see cref="T:Avalonia.Rendering.Composition.CompositionVisual"/> counterpart.
            Is responsible for computing the transformation matrix, for applying various visual
            properties before calling visual-specific drawing code and for notifying the
            <see cref="T:Avalonia.Rendering.Composition.Server.ServerCompositionTarget"/> for new dirty rects
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Server.ServerCompositionVisual.GetReadback(System.Int32)">
            <summary>
            Obtains "readback" data - the data that is sent from the render thread to the UI thread
            in non-blocking manner. Used mostly by hit-testing
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerCompositionVisual.ReadbackData">
            <summary>
            Data that can be read from the UI thread
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerCompositor">
            <summary>
            Server-side counterpart of the <see cref="T:Avalonia.Rendering.Composition.Compositor"/>.
            1) manages deserialization of changes received from the UI thread
            2) triggers animation ticks
            3) asks composition targets to render themselves
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerList`1">
            <summary>
            A server-side list container capable of receiving changes from the UI thread
            Right now it's quite dumb since it always receives the full list
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Server.ServerObject">
            <summary>
            Server-side <see cref="T:Avalonia.Rendering.Composition.CompositionObject" /> counterpart.
            Is responsible for animation activation and invalidation
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositingRenderer">
            <summary>
            A renderer that utilizes <see cref="T:Avalonia.Rendering.Composition.Compositor"/> to render the visual tree 
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.CompositingRenderer.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.Composition.CompositingRenderer.Compositor">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.#ctor(Avalonia.Rendering.IRenderRoot,Avalonia.Rendering.Composition.Compositor,System.Func{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Initializes a new instance of <see cref="T:Avalonia.Rendering.Composition.CompositingRenderer"/>
            </summary>
            <param name="root">The render root using this renderer.</param>
            <param name="compositor">The associated compositors.</param>
            <param name="surfaces">
            A function returning the list of native platform's surfaces that can be consumed by rendering subsystems.
            </param>
        </member>
        <member name="E:Avalonia.Rendering.Composition.CompositingRenderer.SceneInvalidated">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.AddDirty(Avalonia.Visual)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.HitTest(Avalonia.Point,Avalonia.Visual,System.Func{Avalonia.Visual,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.HitTestFirst(Avalonia.Point,Avalonia.Visual,System.Func{Avalonia.Visual,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.RecalculateChildren(Avalonia.Visual)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.Resized(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.Paint(Avalonia.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.Start">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.Stop">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.TryGetRenderInterfaceFeature(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositingRenderer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionDrawingSurface.UpdateWithKeyedMutexAsync(Avalonia.Rendering.Composition.ICompositionImportedGpuImage,System.UInt32,System.UInt32)">
            <summary>
            Updates the surface contents using an imported memory image using a keyed mutex as the means of synchronization
            </summary>
            <param name="image">GPU image with new surface contents</param>
            <param name="acquireIndex">The mutex key to wait for before accessing the image</param>
            <param name="releaseIndex">The mutex key to release for after accessing the image </param>
            <returns>A task that completes when update operation is completed and user code is free to destroy or dispose the image</returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionDrawingSurface.UpdateWithSemaphoresAsync(Avalonia.Rendering.Composition.ICompositionImportedGpuImage,Avalonia.Rendering.Composition.ICompositionImportedGpuSemaphore,Avalonia.Rendering.Composition.ICompositionImportedGpuSemaphore)">
            <summary>
            Updates the surface contents using an imported memory image using a semaphore pair as the means of synchronization
            </summary>
            <param name="image">GPU image with new surface contents</param>
            <param name="waitForSemaphore">The semaphore to wait for before accessing the image</param>
            <param name="signalSemaphore">The semaphore to signal after accessing the image</param>
            <returns>A task that completes when update operation is completed and user code is free to destroy or dispose the image</returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionDrawingSurface.UpdateAsync(Avalonia.Rendering.Composition.ICompositionImportedGpuImage)">
            <summary>
            Updates the surface contents using an unspecified automatic means of synchronization
            provided by the underlying platform
            </summary>
            <param name="image">GPU image with new surface contents</param>
            <returns>A task that completes when update operation is completed and user code is free to destroy or dispose the image</returns>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionDrawListVisual">
            <summary>
            A composition visual that holds a list of drawing commands issued by <see cref="T:Avalonia.Visual"/>
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.CompositionDrawListVisual.Visual">
            <summary>
            The associated <see cref="T:Avalonia.Visual"/>
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.CompositionDrawListVisual.DrawList">
            <summary>
            The list of drawing commands
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuInterop.SupportedImageHandleTypes">
            <summary>
            Returns the list of image handle types supported by the current GPU backend, see <see cref="T:Avalonia.Platform.KnownPlatformGraphicsExternalImageHandleTypes"/>
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuInterop.SupportedSemaphoreTypes">
            <summary>
            Returns the list of semaphore types supported by the current GPU backend, see <see cref="T:Avalonia.Platform.KnownPlatformGraphicsExternalSemaphoreHandleTypes"/>
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ICompositionGpuInterop.GetSynchronizationCapabilities(System.String)">
            <summary>
            Returns the supported ways to synchronize access to the imported GPU image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ICompositionGpuInterop.ImportImage(Avalonia.Platform.IPlatformHandle,Avalonia.Platform.PlatformGraphicsExternalImageProperties)">
            <summary>
            Asynchronously imports a texture. The returned object is immediately usable.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ICompositionGpuInterop.ImportImage(Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextImage)">
            <summary>
            Asynchronously imports a texture. The returned object is immediately usable.
            If import operation fails, the caller is responsible for destroying the handle
            </summary>
            <param name="image">An image that belongs to the same GPU context or the same GPU context sharing group as one used by compositor</param>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ICompositionGpuInterop.ImportSemaphore(Avalonia.Platform.IPlatformHandle)">
            <summary>
            Asynchronously imports a semaphore object. The returned object is immediately usable.
            If import operation fails, the caller is responsible for destroying the handle
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ICompositionGpuInterop.ImportSemaphore(Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextSemaphore)">
            <summary>
            Asynchronously imports a semaphore object. The returned object is immediately usable.
            </summary>
            <param name="image">A semaphore that belongs to the same GPU context or the same GPU context sharing group as one used by compositor</param>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuInterop.IsLost">
            <summary>
            Indicates if the device context this instance is associated with is no longer available
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuInterop.DeviceLuid">
            <summary>
            The LUID of the graphics adapter used by the compositor
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuInterop.DeviceUuid">
            <summary>
            The UUID of the graphics adapter used by the compositor
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities.Semaphores">
            <summary>
            Pre-render and after-render semaphores must be provided alongside with the image
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities.KeyedMutex">
            <summary>
            Image must be created with D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX or in other compatible way
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities.Automatic">
            <summary>
            Synchronization and ordering is somehow handled by the underlying platform
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ICompositionGpuImportedObject">
            <summary>
            An imported GPU object that's usable by composition APIs 
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuImportedObject.ImportCompeted">
            <summary>
            Tracks the import status of the object. Once the task is completed,
            the user code is allowed to free the resource owner in case when a non-owning
            sharing handle was used
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.ICompositionGpuImportedObject.IsLost">
            <summary>
            Indicates if the device context this instance is associated with is no longer available
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ICompositionImportedGpuImage">
            <summary>
            An imported GPU image object that's usable by composition APIs 
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ICompositionImportedGpuSemaphore">
            <summary>
            An imported GPU semaphore object that's usable by composition APIs 
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextObject">
            <summary>
            An GPU object descriptor obtained from a context from the same share group as one used by the compositor
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextImage">
            <summary>
            An GPU image descriptor obtained from a context from the same share group as one used by the compositor
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextSemaphore">
            <summary>
            An GPU semaphore descriptor obtained from a context from the same share group as one used by the compositor
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionObject">
            <summary>
            Base class of the composition API representing a node in the visual tree structure.
            Composition objects are the visual tree structure on which all other features of the composition API use and build on.
            The API allows developers to define and create one or many <see cref="T:Avalonia.Rendering.Composition.CompositionVisual" /> objects each representing a single node in a Visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.CompositionObject.ImplicitAnimations">
            <summary>
            The collection of implicit animations attached to this object.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Composition.CompositionObject.Compositor">
            <summary>
            The associated Compositor
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionObject.StartAnimation(System.String,Avalonia.Rendering.Composition.Animations.CompositionAnimation)">
            <summary>
            Connects an animation with the specified property of the object and starts the animation.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionObject.StartAnimationGroup(Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase)">
            <summary>
            Starts an animation group.
            The StartAnimationGroup method on CompositionObject lets you start CompositionAnimationGroup.
            All the animations in the group will be started at the same time on the object.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionPropertySet">
            <summary>
            <see cref="T:Avalonia.Rendering.Composition.CompositionPropertySet"/>s are <see cref="T:Avalonia.Rendering.Composition.CompositionObject"/>s that allow storage of key values pairs
            that can be shared across the application and are not tied to the lifetime of another composition object.
            <see cref="T:Avalonia.Rendering.Composition.CompositionPropertySet"/>s are most commonly used with animations, where they maintain key-value pairs
            that are referenced to drive portions of composition animations. <see cref="T:Avalonia.Rendering.Composition.CompositionPropertySet"/>s
            provide the ability to insert key-value pairs or retrieve a value for a given key.
            <see cref="T:Avalonia.Rendering.Composition.CompositionPropertySet"/> does not support a delete function – ensure you use <see cref="T:Avalonia.Rendering.Composition.CompositionPropertySet"/>
            to store values that will be shared across the application.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionTarget">
            <summary>
            Represents the composition output (e. g. a window, embedded control, entire screen)
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionTarget.TryHitTest(Avalonia.Point,Avalonia.Rendering.Composition.CompositionVisual,System.Func{Avalonia.Rendering.Composition.CompositionVisual,System.Boolean})">
            <summary>
            Attempts to perform a hit-tst
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionTarget.TryTransformToVisual(Avalonia.Rendering.Composition.CompositionVisual,Avalonia.Point)">
            <summary>
            Attempts to transform a point to a particular CompositionVisual coordinate space
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.CompositionTarget.RequestRedraw">
            <summary>
            Registers the composition target for explicit redraw
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Compositor">
            <summary>
            The Compositor class manages communication between UI-thread and render-thread parts of the composition engine.
            It also serves as a factory to create UI-thread parts of various composition objects 
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Compositor.#ctor(Avalonia.Platform.IPlatformGraphics,System.Boolean)">
            <summary>
            Creates a new compositor on a specified render loop that would use a particular GPU
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Compositor.RequestCommitAsync">
            <summary>
            Requests pending changes in the composition objects to be serialized and sent to the render thread
            </summary>
            <returns>A task that completes when sent changes are applied and rendered on the render thread</returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Compositor.RequestCompositionUpdate(System.Action)">
            <summary>
            Enqueues a callback to be called before the next scheduled commit.
            If there is no scheduled commit it automatically schedules one
            This is useful for updating your composition tree objects after binding
            and layout passes have completed
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Compositor.TryGetRenderInterfaceFeature(System.Type)">
            <summary>
            Attempts to query for a feature from the platform render interface
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Compositor.CreateCompositionTarget(System.Func{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Creates a new CompositionTarget
            </summary>
            <param name="surfaces">A factory method to create IRenderTarget to be called from the render thread</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionContainerVisual">
            <summary>
            A node in the visual tree that can have children.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Drawing.Nodes.IRenderDataItem.Invoke(Avalonia.Rendering.Composition.Drawing.Nodes.RenderDataNodeRenderContext@)">
            <summary>
            Renders the node to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="P:Avalonia.Rendering.Composition.Drawing.Nodes.IRenderDataItem.Bounds">
            <summary>
            Gets the bounds of the visible content in the node in global coordinates.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.Drawing.Nodes.IRenderDataItem.HitTest(Avalonia.Point)">
            <summary>
            Hit test the geometry in this node.
            </summary>
            <param name="p">The point in global coordinates.</param>
            <returns>True if the point hits the node's geometry; otherwise false.</returns>
            <remarks>
            This method does not recurse to childs, if you want
            to hit test children they must be hit tested manually.
            </remarks>
        </member>
        <member name="T:Avalonia.Rendering.Composition.ElementComposition">
            <summary>
            Enables access to composition visual objects that back XAML elements in the XAML composition tree.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ElementComposition.GetElementVisual(Avalonia.Visual)">
            <summary>
            Gets CompositionVisual that backs a Visual
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ElementComposition.SetElementChildVisual(Avalonia.Visual,Avalonia.Rendering.Composition.CompositionVisual)">
            <summary>
            Sets a custom <see cref="T:Avalonia.Rendering.Composition.CompositionVisual"/> as the last child of the element’s visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Composition.ElementComposition.GetElementChildVisual(Avalonia.Visual)">
            <summary>
            Retrieves a <see cref="T:Avalonia.Rendering.Composition.CompositionVisual"/> object previously set by a call to <see cref="M:Avalonia.Rendering.Composition.ElementComposition.SetElementChildVisual(Avalonia.Visual,Avalonia.Rendering.Composition.CompositionVisual)" />.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Clear">
            <summary>No regions are enabled. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_clr.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Src">
            <summary>Only the source will be present. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Dst">
            <summary>Only the destination will be present. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.SrcOver">
            <summary>Source is placed over the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-over.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.DstOver">
            <summary>Destination is placed over the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-over.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.SrcIn">
            <summary>The source that overlaps the destination, replaces the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-in.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.DstIn">
            <summary>Destination which overlaps the source, replaces the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-in.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.SrcOut">
            <summary>Source is placed, where it falls outside of the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-out.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.DstOut">
            <summary>Destination is placed, where it falls outside of the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-out.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.SrcATop">
            <summary>Source which overlaps the destination, replaces the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-atop.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.DstATop">
            <summary>Destination which overlaps the source replaces the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-atop.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Xor">
            <summary>The non-overlapping regions of source and destination are combined. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_xor.svg)</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Plus">
            <summary>Display the sum of the source image and destination image. [Porter Duff Compositing Operators]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Modulate">
            <summary>Multiplies all components (= alpha and color). [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Screen">
            <summary>Multiplies the complements of the backdrop and source CompositionColorvalues, then complements the result. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Overlay">
            <summary>Multiplies or screens the colors, depending on the backdrop CompositionColorvalue. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Darken">
            <summary>Selects the darker of the backdrop and source colors. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Lighten">
            <summary>Selects the lighter of the backdrop and source colors. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.ColorDodge">
            <summary>Brightens the backdrop CompositionColorto reflect the source color. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.ColorBurn">
            <summary>Darkens the backdrop CompositionColorto reflect the source color. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.HardLight">
            <summary>Multiplies or screens the colors, depending on the source CompositionColorvalue. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.SoftLight">
            <summary>Darkens or lightens the colors, depending on the source CompositionColorvalue. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Difference">
            <summary>Subtracts the darker of the two constituent colors from the lighter color. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Exclusion">
            <summary>Produces an effect similar to that of the Difference mode but lower in contrast. [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Multiply">
            <summary>The source CompositionColoris multiplied by the destination CompositionColorand replaces the destination [Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Hue">
            <summary>Creates a CompositionColorwith the hue of the source CompositionColorand the saturation and luminosity of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Saturation">
            <summary>Creates a CompositionColorwith the saturation of the source CompositionColorand the hue and luminosity of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Color">
            <summary>Creates a CompositionColorwith the hue and saturation of the source CompositionColorand the luminosity of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:Avalonia.Rendering.Composition.CompositionBlendMode.Luminosity">
            <summary>Creates a CompositionColorwith the luminosity of the source CompositionColorand the hue and saturation of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Expressions.BuiltInExpressionFfi">
            <summary>
            Built-in functions for Foreign Function Interface available from composition animation expressions
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Expressions.DelegateExpressionFfi">
            <summary>
            Foreign function interface for composition animations based on calling delegates
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Expressions.Expression">
            <summary>
            A parsed composition expression
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Expressions.ExpressionVariant">
            <summary>
            A VARIANT type used in expression animations. Can represent multiple value types
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Expressions.TokenParser">
            <summary>
            Helper class for composition expression parser
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Transport.Batch">
            <summary>
            Represents a group of serialized changes from the UI thread to be atomically applied at the render thread
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Transport.BatchStreamData">
            <summary>
            The batch data is separated into 2 "streams":
            - objects: CLR reference types that are references to either server-side or common objects
            - structs: blittable types like int, Matrix, Color
            Each "stream" consists of memory segments that are pooled 
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Transport.BatchStreamPoolBase`1">
            <summary>
            A pool that keeps a number of elements that was used in the last 10 seconds 
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.Transport.ServerListProxyHelper`2">
            <summary>
            A helper class used from generated UI-thread-side collections of composition objects.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionVisual">
            <summary>
            The base visual object in the composition visual hierarchy.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.Composition.CompositionVisualCollection">
            <summary>
            A collection of CompositionVisual objects
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.DefaultRenderTimer">
            <summary>
            Defines a default render timer that uses a standard timer.
            </summary>
            <remarks>
            This class may be overridden by platform implementations to use a specialized timer
            implementation.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.DefaultRenderTimer"/> class.
            </summary>
            <param name="framesPerSecond">
            The number of frames per second at which the loop should run.
            </param>
        </member>
        <member name="P:Avalonia.Rendering.DefaultRenderTimer.FramesPerSecond">
            <summary>
            Gets the number of frames per second at which the loop runs.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.DefaultRenderTimer.Tick">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.DefaultRenderTimer.RunsInBackground">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.StartCore(System.Action{System.TimeSpan})">
            <summary>
            Provides the implementation of starting the timer.
            </summary>
            <param name="tick">The method to call on each tick.</param>
            <remarks>
            This can be overridden by platform implementations to use a specialized timer
            implementation.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.ICustomHitTest">
            <summary>
            Allows customization of hit-testing
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.ICustomHitTest.HitTest(Avalonia.Point)">
            <param name="point">The point to hit test in global coordinate space.</param>
        </member>
        <member name="T:Avalonia.Rendering.ImmediateRenderer">
            <summary>
            This class is used to render the visual tree into a DrawingContext by doing
            a simple tree traversal.
            It's currently used mostly for RenderTargetBitmap.Render and VisualBrush
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Render(Avalonia.Visual,Avalonia.Media.DrawingContext)">
            <summary>
            Renders a visual to a drawing context.
            </summary>
            <param name="visual">The visual.</param>
            <param name="context">The drawing context.</param>
        </member>
        <member name="T:Avalonia.Rendering.IRenderer">
            <summary>
            Defines the interface for a renderer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderer.Diagnostics">
            <summary>
            Gets a value indicating whether the renderer should draw specific diagnostics.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.IRenderer.SceneInvalidated">
            <summary>
            Raised when a portion of the scene has been invalidated.
            </summary>
            <remarks>
            Indicates that the underlying low-level scene information has been updated. Used to
            signal that an update to the current pointer-over state may be required.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.AddDirty(Avalonia.Visual)">
            <summary>
            Mark a visual as dirty and needing re-rendering.
            </summary>
            <param name="visual">The visual.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.RecalculateChildren(Avalonia.Visual)">
            <summary>
            Informs the renderer that the z-ordering of a visual's children has changed.
            </summary>
            <param name="visual">The visual.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Resized(Avalonia.Size)">
            <summary>
            Called when a resize notification is received by the control being rendered.
            </summary>
            <param name="size">The new size of the window.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Paint(Avalonia.Rect)">
            <summary>
            Called when a paint notification is received by the control being rendered.
            </summary>
            <param name="rect">The dirty rectangle.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Start">
            <summary>
            Starts the renderer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Stop">
            <summary>
            Stops the renderer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.TryGetRenderInterfaceFeature(System.Type)">
            <summary>
            Attempts to query for a feature from the platform render interface
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRendererWithCompositor.Compositor">
            <summary>
            The associated <see cref="T:Avalonia.Rendering.Composition.Compositor"/> object
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IHitTester.HitTest(Avalonia.Point,Avalonia.Visual,System.Func{Avalonia.Visual,System.Boolean})">
            <summary>
            Hit tests a location to find the visuals at the specified point.
            </summary>
            <param name="p">The point, in client coordinates.</param>
            <param name="root">The root of the subtree to search.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visuals at the specified point, topmost first.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IHitTester.HitTestFirst(Avalonia.Point,Avalonia.Visual,System.Func{Avalonia.Visual,System.Boolean})">
            <summary>
            Hit tests a location to find first visual at the specified point.
            </summary>
            <param name="p">The point, in client coordinates.</param>
            <param name="root">The root of the subtree to search.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visual at the specified point, topmost first.</returns>
        </member>
        <member name="T:Avalonia.Rendering.IRenderLoop">
            <summary>
            The application render loop.
            </summary>
            <remarks>
            The render loop is responsible for advancing the animation timer and updating the scene
            graph for visible windows.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.IRenderLoop.Add(Avalonia.Rendering.IRenderLoopTask)">
            <summary>
            Adds an update task.
            </summary>
            <param name="i">The update task.</param>
            <remarks>
            Registered update tasks will be polled on each tick of the render loop after the
            animation timer has been pulsed.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.IRenderLoop.Remove(Avalonia.Rendering.IRenderLoopTask)">
            <summary>
            Removes an update task.
            </summary>
            <param name="i">The update task.</param>
        </member>
        <member name="P:Avalonia.Rendering.IRenderLoop.RunsInBackground">
            <summary>
            Indicates if the rendering is done on a non-UI thread.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.IRenderRoot">
            <summary>
            Represents the root of a renderable tree.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderRoot.ClientSize">
            <summary>
            Gets the client size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderRoot.Renderer">
            <summary>
            Gets the renderer for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderRoot.RenderScaling">
            <summary>
            The scaling factor to use in rendering.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IRenderRoot.PointToClient(Avalonia.PixelPoint)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="point">The point in screen device coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IRenderRoot.PointToScreen(Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen device coordinates.</returns>
        </member>
        <member name="T:Avalonia.Rendering.IRenderTimer">
            <summary>
            Defines the interface implemented by an application render timer.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.IRenderTimer.Tick">
            <summary>
            Raised when the render timer ticks to signal a new frame should be drawn.
            </summary>
            <remarks>
            This event can be raised on any thread; it is the responsibility of the subscriber to
            switch execution to the right thread.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.IRenderTimer.RunsInBackground">
            <summary>
            Indicates if the timer ticks on a non-UI thread
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.IVisualBrushInitialize">
            <summary>
            Internal interface for initializing controls that are to be used as the visual in a
            <see cref="T:Avalonia.Media.VisualBrush"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IVisualBrushInitialize.EnsureInitialized">
            <summary>
            Ensures that the control is ready to use as the visual in a visual brush.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.LayoutPassTiming">
            <summary>
            Represents a single layout pass timing.
            </summary>
            <param name="PassCounter">The number of the layout pass.</param>
            <param name="Elapsed">The elapsed time during the layout pass.</param>
        </member>
        <member name="M:Avalonia.Rendering.LayoutPassTiming.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Represents a single layout pass timing.
            </summary>
            <param name="PassCounter">The number of the layout pass.</param>
            <param name="Elapsed">The elapsed time during the layout pass.</param>
        </member>
        <member name="P:Avalonia.Rendering.LayoutPassTiming.PassCounter">
            <summary>The number of the layout pass.</summary>
        </member>
        <member name="P:Avalonia.Rendering.LayoutPassTiming.Elapsed">
            <summary>The elapsed time during the layout pass.</summary>
        </member>
        <member name="T:Avalonia.Rendering.RendererDebugOverlays">
            <summary>
            Represents the various types of overlays that can be drawn by a renderer.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.RendererDebugOverlays.None">
            <summary>
            Do not draw any overlay.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.RendererDebugOverlays.Fps">
            <summary>
            Draw a FPS counter.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.RendererDebugOverlays.DirtyRects">
            <summary>
            Draw invalidated rectangles each frame.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.RendererDebugOverlays.LayoutTimeGraph">
            <summary>
            Draw a graph of past layout times.
            </summary>
        </member>
        <member name="F:Avalonia.Rendering.RendererDebugOverlays.RenderTimeGraph">
            <summary>
            Draw a graph of past render times.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.RendererDiagnostics">
            <summary>
            Manages configurable diagnostics that can be displayed by a renderer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.RendererDiagnostics.DebugOverlays">
            <summary>
            Gets or sets which debug overlays are displayed by the renderer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.RendererDiagnostics.LastLayoutPassTiming">
            <summary>
            Gets or sets the last layout pass timing that the renderer may display.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.RendererDiagnostics.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.RendererDiagnostics.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property changes on the object.
            </summary>
            <param name="args">The property change details.</param>
        </member>
        <member name="T:Avalonia.Rendering.RenderLoop">
            <summary>
            The application render loop.
            </summary>
            <remarks>
            The render loop is responsible for advancing the animation timer and updating the scene
            graph for visible windows.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.#ctor(Avalonia.Rendering.IRenderTimer)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.RenderLoop"/> class.
            </summary>
            <param name="timer">The render timer.</param>
        </member>
        <member name="P:Avalonia.Rendering.RenderLoop.Timer">
            <summary>
            Gets the render timer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.Add(Avalonia.Rendering.IRenderLoopTask)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.Remove(Avalonia.Rendering.IRenderLoopTask)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.RenderLoop.RunsInBackground">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ICustomDrawOperation.Bounds">
            <summary>
            Gets the bounds of the visible content in the node in global coordinates.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ICustomDrawOperation.HitTest(Avalonia.Point)">
            <summary>
            Hit test the geometry in this node.
            </summary>
            <param name="p">The point in global coordinates.</param>
            <returns>True if the point hits the node's geometry; otherwise false.</returns>
            <remarks>
            This method does not recurse to childs, if you want
            to hit test children they must be hit tested manually.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ICustomDrawOperation.Render(Avalonia.Media.ImmediateDrawingContext)">
            <summary>
            Renders the node to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryBoundsHelper.CalculateBoundsWithLineCaps(Avalonia.Rect,Avalonia.Media.IPen)">
            <summary>
            Calculates the bounds of a given geometry with respect to the pens <see cref="P:Avalonia.Media.IPen.LineCap"/>
            </summary>
            <param name="originalBounds">The calculated bounds without <see cref="P:Avalonia.Media.IPen.LineCap"/>s</param>
            <param name="pen">The pen with information about the <see cref="P:Avalonia.Media.IPen.LineCap"/>s</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Rendering.SceneInvalidatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Rendering.IRenderer.SceneInvalidated"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneInvalidatedEventArgs.#ctor(Avalonia.Rendering.IRenderRoot,Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneInvalidatedEventArgs"/> class.
            </summary>
            <param name="root">The render root that has been updated.</param>
            <param name="dirtyRect">The updated area.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneInvalidatedEventArgs.DirtyRect">
            <summary>
            Gets the invalidated area.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneInvalidatedEventArgs.RenderRoot">
            <summary>
            Gets the render root that has been invalidated.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.SwapchainBase`1">
            <summary>
            A helper class for composition-backed swapchains, should not be a public API yet
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.UiThreadRenderTimer">
            <summary>
            Render timer that ticks on UI thread. Useful for debugging or bootstrapping on new platforms 
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.UiThreadRenderTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.UiThreadRenderTimer"/> class.
            </summary>
            <param name="framesPerSecond">The number of frames per second at which the loop should run.</param>
        </member>
        <member name="P:Avalonia.Rendering.UiThreadRenderTimer.RunsInBackground">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.UiThreadRenderTimer.StartCore(System.Action{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.Utilities.TileBrushCalculator.#ctor(Avalonia.Media.ITileBrush,Avalonia.Size,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.Utilities.TileBrushCalculator"/> class.
            </summary>
            <param name="brush">The brush to be rendered.</param>
            <param name="contentSize">The size of the content of the tile brush.</param>
            <param name="targetSize">The size of the control to which the brush is being rendered.</param>
        </member>
        <member name="M:Avalonia.Rendering.Utilities.TileBrushCalculator.#ctor(Avalonia.Media.TileMode,Avalonia.Media.Stretch,Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,Avalonia.RelativeRect,Avalonia.RelativeRect,Avalonia.Size,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.Utilities.TileBrushCalculator"/> class.
            </summary>
            <param name="tileMode">The brush's tile mode.</param>
            <param name="stretch">The brush's stretch.</param>
            <param name="alignmentX">The brush's horizontal alignment.</param>
            <param name="alignmentY">The brush's vertical alignment.</param>
            <param name="sourceRect">The brush's source rect</param>
            <param name="destinationRect">The brush's destination rect.</param>
            <param name="contentSize">The size of the content of the tile brush.</param>
            <param name="targetSize">The size of the control to which the brush is being rendered.</param>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.DestinationRect">
            <summary>
            Gets the rectangle on the destination control to which content should be rendered.
            </summary>
            <remarks>
            If <see cref="T:Avalonia.Media.TileMode"/> of the brush is repeating then this is describes rectangle
            of a single repeat of the tiled content.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.IntermediateClip">
            <summary>
            Gets the clip rectangle on the intermediate image with which the brush content should be
            drawn when <see cref="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.IntermediateSize">
            <summary>
            Gets the size of the intermediate image that should be created when
            <see cref="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.IntermediateTransform">
            <summary>
            Gets the transform to be used when rendering to the intermediate image when
            <see cref="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate">
            <summary>
            Gets a value indicating whether an intermediate image should be created in order to
            render the tile brush.
            </summary>
            <remarks>
            Intermediate images are required when a brush's <see cref="T:Avalonia.Media.TileMode"/> is not repeating
            but the source and destination aspect ratios are unequal, as all of the currently
            supported rendering backends do not support non-tiled image brushes.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.SourceRect">
            <summary>
            Gets the area of the source content to be rendered.
            </summary>
        </member>
        <member name="M:Avalonia.RoundedRect.IsEmpty">
            <summary>
            This method should be used internally to check for the rect emptiness
            Once we add support for WPF-like empty rects, there will be an actual implementation
            For now it's internal to keep some loud community members happy about the API being pretty 
            </summary>
        </member>
        <member name="T:Avalonia.Size">
            <summary>
            Defines a size.
            </summary>
        </member>
        <member name="F:Avalonia.Size.Infinity">
            <summary>
            A size representing infinity.
            </summary>
        </member>
        <member name="F:Avalonia.Size._width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:Avalonia.Size._height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:Avalonia.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Size"/> structure.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Avalonia.Size.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Size"/> structure.
            </summary>
            <param name="vector2">The vector to take values from.</param>
        </member>
        <member name="P:Avalonia.Size.AspectRatio">
            <summary>
            Gets the aspect ratio of the size.
            </summary>
        </member>
        <member name="P:Avalonia.Size.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.Size.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Avalonia.Size.op_Equality(Avalonia.Size,Avalonia.Size)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.Size"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Inequality(Avalonia.Size,Avalonia.Size)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Size"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Multiply(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Division(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Division(Avalonia.Size,Avalonia.Size)">
            <summary>
            Divides a size by another size to produce a scaling factor.
            </summary>
            <param name="left">The first size</param>
            <param name="right">The second size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Multiply(Avalonia.Size,System.Double)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Division(Avalonia.Size,System.Double)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Size"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Size"/>.</returns>
        </member>
        <member name="M:Avalonia.Size.Constrain(Avalonia.Size)">
            <summary>
            Constrains the size.
            </summary>
            <param name="constraint">The size to constrain to.</param>
            <returns>The constrained size.</returns>
        </member>
        <member name="M:Avalonia.Size.Deflate(Avalonia.Thickness)">
            <summary>
            Deflates the size by a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <param name="thickness">The thickness.</param>
            <returns>The deflated size.</returns>
            <remarks>The deflated size cannot be less than 0.</remarks>
        </member>
        <member name="M:Avalonia.Size.Equals(Avalonia.Size)">
            <summary>
            Returns a boolean indicating whether the size is equal to the other given size (bitwise).
            </summary>
            <param name="other">The other size to test equality against.</param>
            <returns>True if this size is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Size.NearlyEquals(Avalonia.Size)">
            <summary>
            Returns a boolean indicating whether the size is equal to the other given size (numerically).
            </summary>
            <param name="other">The other size to test equality against.</param>
            <returns>True if this size is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Size.Equals(System.Object)">
            <summary>
            Checks for equality between a size and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a size that equals the current size.
            </returns>
        </member>
        <member name="M:Avalonia.Size.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.Size"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Size.Inflate(Avalonia.Thickness)">
            <summary>
            Inflates the size by a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <param name="thickness">The thickness.</param>
            <returns>The inflated size.</returns>
        </member>
        <member name="M:Avalonia.Size.WithWidth(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Size"/> with the same height and the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.Size"/>.</returns>
        </member>
        <member name="M:Avalonia.Size.WithHeight(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Size"/> with the same width and the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.Size"/>.</returns>
        </member>
        <member name="M:Avalonia.Size.ToString">
            <summary>
            Returns the string representation of the size.
            </summary>
            <returns>The string representation of the size.</returns>
        </member>
        <member name="M:Avalonia.Size.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the size into its Width and Height values.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:Avalonia.StyledElement">
            <summary>
            Extends an <see cref="T:Avalonia.Animation.Animatable"/> with the following features:
            
            - An inherited <see cref="P:Avalonia.StyledElement.DataContext"/>.
            - Implements <see cref="T:Avalonia.Styling.IStyleable"/> to allow styling to work on the styled element.
            - Implements <see cref="T:Avalonia.LogicalTree.ILogical"/> to form part of a logical tree.
            - A collection of class strings for custom styling.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.DataContextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.DataContext"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.NameProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.Name"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.ParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.Parent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.TemplatedParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.TemplatedParent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.ThemeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.Theme"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.StyledElement"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledElement"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.AttachedToLogicalTree">
            <summary>
            Raised when the styled element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.DetachedFromLogicalTree">
            <summary>
            Raised when the styled element is detached from a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.DataContextChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.StyledElement.DataContext"/> property changes.
            </summary>
            <remarks>
            This event will be raised when the <see cref="P:Avalonia.StyledElement.DataContext"/> property has changed and
            all subscribers to that change have been notified.
            </remarks>
        </member>
        <member name="E:Avalonia.StyledElement.Initialized">
            <summary>
            Occurs when the styled element has finished initialization.
            </summary>
            <remarks>
            The Initialized event indicates that all property values on the styled element have been set.
            When loading the styled element from markup, it occurs when 
            <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> is called *and* the styled element
            is attached to a rooted logical tree. When the styled element is created by code and
            <see cref="T:System.ComponentModel.ISupportInitialize"/> is not used, it is called when the styled element is attached
            to the visual tree.
            </remarks>
        </member>
        <member name="E:Avalonia.StyledElement.ResourcesChanged">
            <summary>
            Occurs when a resource in this styled element or a parent styled element has changed.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.ActualThemeVariantChanged">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.StyledElement.Name">
            <summary>
            Gets or sets the name of the styled element.
            </summary>
            <remarks>
            An element's name is used to uniquely identify an element within the element's name
            scope. Once the element is added to a logical tree, its name cannot be changed.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Classes">
            <summary>
            Gets or sets the styled element's classes.
            </summary>
            <remarks>
            <para>
            Classes can be used to apply user-defined styling to styled elements, or to allow styled elements
            that share a common purpose to be easily selected.
            </para>
            <para>
            Even though this property can be set, the setter is only intended for use in object
            initializers. Assigning to this property does not change the underlying collection,
            it simply clears the existing collection and adds the contents of the assigned
            collection.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.DataContext">
            <summary>
            Gets or sets the control's data context.
            </summary>
            <remarks>
            The data context is an inherited property that specifies the default object that will
            be used for data binding.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.IsInitialized">
            <summary>
            Gets a value that indicates whether the element has finished initialization.
            </summary>
            <remarks>
            For more information about when IsInitialized is set, see the <see cref="E:Avalonia.StyledElement.Initialized"/>
            event.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Styles">
            <summary>
            Gets the styles for the styled element.
            </summary>
            <remarks>
            Styles for the entire application are added to the Application.Styles collection, but
            each styled element may in addition define its own styles which are applied to the styled element
            itself and its children.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.StyleKey">
            <summary>
            Gets the type by which the element is styled.
            </summary>
            <remarks>
            Usually controls are styled by their own type, but there are instances where you want
            an element to be styled by its base type, e.g. creating SpecialButton that
            derives from Button and adds extra functionality but is still styled as a regular
            Button. To change the style for a control class, override the <see cref="P:Avalonia.StyledElement.StyleKeyOverride"/>
            property
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Resources">
            <summary>
            Gets or sets the styled element's resource dictionary.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.TemplatedParent">
            <summary>
            Gets the styled element whose lookless template this styled element is part of.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Theme">
            <summary>
            Gets or sets the theme to be applied to the element.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.LogicalChildren">
            <summary>
            Gets the styled element's logical children.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.PseudoClasses">
            <summary>
            Gets the <see cref="P:Avalonia.StyledElement.Classes"/> collection in a form that allows adding and removing
            pseudoclasses.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.StyleKeyOverride">
            <summary>
            Gets the type by which the element is styled.
            </summary>
            <remarks>
            Usually controls are styled by their own type, but there are instances where you want
            an element to be styled by its base type, e.g. creating SpecialButton that
            derives from Button and adds extra functionality but is still styled as a regular
            Button. Override this property to change the style for a control class, returning the
            type that you wish the elements to be styled as.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#IsAttachedToLogicalTree">
            <summary>
            Gets a value indicating whether the element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Parent">
            <summary>
            Gets the styled element's logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.ActualThemeVariant">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#LogicalParent">
            <summary>
            Gets the styled element's logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#LogicalChildren">
            <summary>
            Gets the styled element's logical children.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Controls#IResourceNode#HasResources">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleable#Classes">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleHost#IsStylesInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleHost#StylingParent">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.ApplyStyling">
            <summary>
            Applies styling to the control if the control is initialized and styling is not
            already applied.
            </summary>
            <remarks>
            The styling system will automatically apply styling when required, so it should not
            usually be necessary to call this method manually.
            </remarks>
            <returns>
            A value indicating whether styling is now applied to the control.
            </returns>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#NotifyAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#NotifyDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#NotifyResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#Controls#IResourceHost#NotifyHostedResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.TryGetResource(System.Object,Avalonia.Styling.ThemeVariant,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#Controls#ISetLogicalParent#SetParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Sets the styled element's logical parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#Controls#ISetInheritanceParent#SetParent(Avalonia.AvaloniaObject)">
            <summary>
            Sets the styled element's inheritance parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.StyledElement.NotifyChildResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <summary>
            Notifies child controls that a change has been made to resources that apply to them.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Called when the styled element is added to a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Called when the styled element is removed from a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnDataContextChanged(System.EventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.StyledElement.DataContext"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnDataContextBeginUpdate">
            <summary>
            Called when the <see cref="P:Avalonia.StyledElement.DataContext"/> begins updating.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.OnDataContextEndUpdate">
            <summary>
            Called when the <see cref="P:Avalonia.StyledElement.DataContext"/> finishes updating.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.OnInitialized">
            <summary>
            Called when the control finishes initialization.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.GetStyleKey(Avalonia.StyledElement)">
            <summary>
            Internal getter for <see cref="P:Avalonia.Styling.IStyleable.StyleKey"/> so that we only need to suppress the obsolete
            warning in one place.
            </summary>
            <param name="e">The element</param>
            <remarks>
            <see cref="T:Avalonia.Styling.IStyleable"/> is obsolete and will be removed in a future version, but for backwards
            compatibility we need to support code which overrides <see cref="P:Avalonia.Styling.IStyleable.StyleKey"/>.
            </remarks>
        </member>
        <member name="T:Avalonia.StyledProperty`1">
            <summary>
            A styled avalonia property.
            </summary>
        </member>
        <member name="M:Avalonia.StyledProperty`1.#ctor(System.String,System.Type,System.Type,Avalonia.StyledPropertyMetadata{`0},System.Boolean,System.Func{`0,System.Boolean},System.Action{Avalonia.AvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledProperty`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="hostType">The class that the property being is registered on.</param>
            <param name="metadata">The property metadata.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="validate">
            <para>A method which returns "false" for values that are never valid for this property.</para>
            <para>This method is not part of the property's metadata and so cannot be changed after registration.</para>
            </param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="P:Avalonia.StyledProperty`1.ValidateValue">
            <summary>
            A method which returns "false" for values that are never valid for this property.
            </summary>
        </member>
        <member name="M:Avalonia.StyledProperty`1.AddOwner``1(Avalonia.StyledPropertyMetadata{`0})">
            <summary>
            Registers the property on another type.
            </summary>
            <typeparam name="TOwner">The type of the additional owner.</typeparam>
            <returns>The property.</returns>        
        </member>
        <member name="M:Avalonia.StyledProperty`1.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Avalonia.StyledProperty`1.GetMetadata(System.Type)">
            <summary>
            Gets the property metadata for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The property metadata.
            </returns>
        </member>
        <member name="M:Avalonia.StyledProperty`1.OverrideDefaultValue``1(`0)">
            <summary>
            Overrides the default value for the property on the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Avalonia.StyledProperty`1.OverrideDefaultValue(System.Type,`0)">
            <summary>
            Overrides the default value for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Avalonia.StyledProperty`1.OverrideMetadata``1(Avalonia.StyledPropertyMetadata{`0})">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Avalonia.StyledProperty`1.OverrideMetadata(System.Type,Avalonia.StyledPropertyMetadata{`0})">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Avalonia.StyledProperty`1.ToString">
            <summary>
            Gets the string representation of the property.
            </summary>
            <returns>The property's string representation.</returns>
        </member>
        <member name="M:Avalonia.StyledProperty`1.Avalonia#IStyledPropertyAccessor#GetDefaultValue(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledProperty`1.RouteClearValue(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledProperty`1.RouteGetValue(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledProperty`1.RouteGetBaseValue(Avalonia.AvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledProperty`1.RouteSetValue(Avalonia.AvaloniaObject,System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.StyledPropertyMetadata`1">
            <summary>
            Metadata for styled avalonia properties.
            </summary>
        </member>
        <member name="M:Avalonia.StyledPropertyMetadata`1.#ctor(Avalonia.Data.Optional{`0},Avalonia.Data.BindingMode,System.Func{Avalonia.AvaloniaObject,`0,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyMetadata`1"/> class.
            </summary>
            <param name="defaultValue">The default value of the property.</param>
            <param name="defaultBindingMode">The default binding mode.</param>
            <param name="coerce">A value coercion callback.</param>
            <param name="enableDataValidation">Whether the property is interested in data validation.</param>
        </member>
        <member name="P:Avalonia.StyledPropertyMetadata`1.DefaultValue">
            <summary>
            Gets the default value for the property.
            </summary>
        </member>
        <member name="P:Avalonia.StyledPropertyMetadata`1.CoerceValue">
            <summary>
            Gets the value coercion callback, if any.
            </summary>
        </member>
        <member name="M:Avalonia.StyledPropertyMetadata`1.Merge(Avalonia.AvaloniaPropertyMetadata,Avalonia.AvaloniaProperty)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.Activators.AndActivator">
            <summary>
            An aggregate <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/> which is active when all of its inputs are
            active.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.AndActivatorBuilder">
            <summary>
            Builds an <see cref="T:Avalonia.Styling.Activators.AndActivator"/>.
            </summary>
            <remarks>
            When ANDing style activators, if there is more than one input then creates an instance of
            <see cref="T:Avalonia.Styling.Activators.AndActivator"/>. If there is only one input, returns the input directly.
            </remarks>
        </member>
        <member name="T:Avalonia.Styling.Activators.IStyleActivator">
            <summary>
            Defines a style activator.
            </summary>
            <remarks>
            A style activator is very similar to an `IObservable{bool}` but is optimized for the
            particular use-case of activating a style according to a selector. It differs from
            an observable in three major ways:
            
            - Can only have a single subscription
            - The activation state can be re-evaluated at any time by calling <see cref="M:Avalonia.Styling.Activators.IStyleActivator.GetIsActive"/>
            - No error or completion messages
            </remarks>
        </member>
        <member name="P:Avalonia.Styling.Activators.IStyleActivator.IsSubscribed">
            <summary>
            Gets a value indicating whether the style is subscribed.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Activators.IStyleActivator.GetIsActive">
            <summary>
            Gets the current activation state.
            </summary>
            <remarks>
            This method should read directly from its inputs and not rely on any subscriptions 
            to fire in order to be up-to-date. If a change in active state occurs when reading
            this method then any subscribed <see cref="T:Avalonia.Styling.Activators.IStyleActivatorSink"/> should not be
            notified of the change.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.Activators.IStyleActivator.Subscribe(Avalonia.Styling.Activators.IStyleActivatorSink)">
            <summary>
            Subscribes to the activator.
            </summary>
            <param name="sink">The listener.</param>
            <remarks>
            This method should not call <see cref="M:Avalonia.Styling.Activators.IStyleActivatorSink.OnNext(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.Activators.IStyleActivator.Unsubscribe(Avalonia.Styling.Activators.IStyleActivatorSink)">
            <summary>
            Unsubscribes from the activator.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.IStyleActivatorSink">
            <summary>
            Receives notifications from an <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Activators.IStyleActivatorSink.OnNext(System.Boolean)">
            <summary>
            Called when the subscribed activator value changes.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="T:Avalonia.Styling.Activators.NotActivator">
            <summary>
            An <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/> which inverts the state of an input activator.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.NthChildActivator">
            <summary>
            An <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/> which is active when control's index was changed.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.OrActivator">
            <summary>
            An aggregate <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/> which is active when any of its inputs are
            active.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.OrActivatorBuilder">
            <summary>
            Builds an <see cref="T:Avalonia.Styling.Activators.OrActivator"/>.
            </summary>
            <remarks>
            When ORing style activators, if there is more than one input then creates an instance of
            <see cref="T:Avalonia.Styling.Activators.OrActivator"/>. If there is only one input, returns the input directly.
            </remarks>
        </member>
        <member name="T:Avalonia.Styling.Activators.PropertyEqualsActivator">
            <summary>
            An <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/> which listens to a property value on a control.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.StyleActivatorBase">
            <summary>
            Base class implementation of <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Activators.StyleActivatorBase.EvaluateIsActive">
            <summary>
            Evaluates the activation state.
            </summary>
            <remarks>
            This method should read directly from its inputs and not rely on any subscriptions to
            fire in order to be up-to-date.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.Activators.StyleActivatorBase.ReevaluateIsActive">
            <summary>
            Called from a derived class when the activation state should be re-evaluated and the 
            subscriber notified of any change.
            </summary>
            <returns>
            The evaluated active state;
            </returns>
        </member>
        <member name="M:Avalonia.Styling.Activators.StyleActivatorBase.Initialize">
            <summary>
            Called in response to a <see cref="M:Avalonia.Styling.Activators.StyleActivatorBase.Subscribe(Avalonia.Styling.Activators.IStyleActivatorSink)"/> to allow the
            derived class to set up any necessary subscriptions.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Activators.StyleActivatorBase.Deinitialize">
            <summary>
            Called in response to an <see cref="M:Avalonia.Styling.Activators.StyleActivatorBase.Unsubscribe(Avalonia.Styling.Activators.IStyleActivatorSink)"/> or
            <see cref="M:Avalonia.Styling.Activators.StyleActivatorBase.Dispose"/> to allow the derived class to dispose any active subscriptions.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Activators.StyleClassActivator">
            <summary>
            An <see cref="T:Avalonia.Styling.Activators.IStyleActivator"/> which is active when a set of classes match those on a
            control.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ChildSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.ChildSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.ChildSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.ControlTheme">
            <summary>
            Defines a switchable theme for a control.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.ControlTheme.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.ControlTheme"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.ControlTheme.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.ControlTheme"/> class.
            </summary>
            <param name="targetType">The value for <see cref="P:Avalonia.Styling.ControlTheme.TargetType"/>.</param>
        </member>
        <member name="P:Avalonia.Styling.ControlTheme.TargetType">
            <summary>
            Gets or sets the type for which this control theme is intended.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ControlTheme.BasedOn">
            <summary>
            Gets or sets a control theme that is the basis of the current theme.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.DescendantSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.DescendantSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.DescendantSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.IGlobalStyles">
            <summary>
            Defines the style host that provides styles global to the application.
            </summary>
        </member>
        <member name="E:Avalonia.Styling.IGlobalStyles.GlobalStylesAdded">
            <summary>
            Raised when styles are added to <see cref="T:Avalonia.Styling.Styles"/> or a nested styles collection.
            </summary>
        </member>
        <member name="E:Avalonia.Styling.IGlobalStyles.GlobalStylesRemoved">
            <summary>
            Raised when styles are removed from <see cref="T:Avalonia.Styling.Styles"/> or a nested styles collection.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.ISetterInstance">
            <summary>
            Represents a <see cref="T:Avalonia.Styling.Setter"/> that has been instanced on a control.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.ISetterValue">
            <summary>
            Customizes the behavior of a class when added as a value to a <see cref="T:Avalonia.Styling.SetterBase"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.ISetterValue.Initialize(Avalonia.Styling.SetterBase)">
            <summary>
            Notifies that the object has been added as a setter value.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IStyle">
            <summary>
            Defines the interface for styles.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyle.Children">
            <summary>
            Gets a collection of child styles.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IStyleable">
            <summary>
            Interface for styleable elements.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.Classes">
            <summary>
            Gets the list of classes for the control.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.StyleKey">
            <summary>
            Gets the type by which the control is styled.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.TemplatedParent">
            <summary>
            Gets the template parent of this element if the control comes from a template.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IStyleHost">
            <summary>
            Defines an element that has a <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> collection.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleHost.IsStylesInitialized">
            <summary>
            Gets a value indicating whether <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> is initialized.
            </summary>
            <remarks>
            The <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> property may be lazily initialized, if so this property
            indicates whether it has been initialized.
            </remarks>
        </member>
        <member name="P:Avalonia.Styling.IStyleHost.Styles">
            <summary>
            Gets the styles for the element.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleHost.StylingParent">
            <summary>
            Gets the parent style host element.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.IStyleHost.StylesAdded(System.Collections.Generic.IReadOnlyList{Avalonia.Styling.IStyle})">
            <summary>
            Called when styles are added to <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> or a nested styles collection.
            </summary>
            <param name="styles">The added styles.</param>
        </member>
        <member name="M:Avalonia.Styling.IStyleHost.StylesRemoved(System.Collections.Generic.IReadOnlyList{Avalonia.Styling.IStyle})">
            <summary>
            Called when styles are removed from <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> or a nested styles collection.
            </summary>
            <param name="styles">The removed styles.</param>
        </member>
        <member name="T:Avalonia.Styling.IStyleInstance">
            <summary>
            Represents a <see cref="T:Avalonia.Styling.Style"/> that has been instanced on a control.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleInstance.Source">
            <summary>
            Gets the source style.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleInstance.HasActivator">
            <summary>
            Gets a value indicating whether this style instance has an activator.
            </summary>
            <remarks>
            A style instance without an activator will always be active.
            </remarks>
        </member>
        <member name="P:Avalonia.Styling.IStyleInstance.IsActive">
            <summary>
            Gets a value indicating whether this style is active.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IThemeVariantHost">
            <summary>
            Interface for the host element with a theme variant.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IThemeVariantHost.ActualThemeVariant">
            <summary>
            Gets the UI theme that is currently used by the element, which might be different than the RequestedThemeVariantProperty.
            </summary>
            <returns>
            If current control is contained in the ThemeVariantScope, TopLevel or Application with non-default RequestedThemeVariant, that value will be returned.
            Otherwise, current OS theme variant is returned.
            </returns>
        </member>
        <member name="E:Avalonia.Styling.IThemeVariantHost.ActualThemeVariantChanged">
            <summary>
            Raised when the theme variant is changed on the element or an ancestor of the element.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.NestingSelector">
            <summary>
            The `^` nesting style selector.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.NotSelector">
            <summary>
            The `:not()` style selector.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.NotSelector.#ctor(Avalonia.Styling.Selector,Avalonia.Styling.Selector)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.NotSelector"/> class.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="argument">The selector to be not-ed.</param>
        </member>
        <member name="P:Avalonia.Styling.NotSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.NotSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.NotSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.NotSelector.ToString(Avalonia.Styling.Style)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.NthChildSelector">
            <summary>
            The :nth-child() pseudo-class matches elements based on their position in a group of siblings.
            </summary>
            <remarks>
            Element indices are 1-based.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.NthChildSelector.#ctor(Avalonia.Styling.Selector,System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Avalonia.Styling.NthChildSelector"/>
            </summary>
            <param name="previous">Previous selector.</param>
            <param name="step">Position step.</param>
            <param name="offset">Initial index offset.</param>
        </member>
        <member name="T:Avalonia.Styling.NthLastChildSelector">
            <summary>
            The :nth-child() pseudo-class matches elements based on their position among a group of siblings, counting from the end.
            </summary>
            <remarks>
            Element indices are 1-based.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.NthLastChildSelector.#ctor(Avalonia.Styling.Selector,System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Avalonia.Styling.NthLastChildSelector"/>
            </summary>
            <param name="previous">Previous selector.</param>
            <param name="step">Position step.</param>
            <param name="offset">Initial index offset, counting from the end.</param>
        </member>
        <member name="T:Avalonia.Styling.OrSelector">
            <summary>
            The OR style selector.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.OrSelector.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Styling.Selector})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.OrSelector"/> class.
            </summary>
            <param name="selectors">The selectors to OR.</param>
        </member>
        <member name="P:Avalonia.Styling.OrSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.OrSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.OrSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.OrSelector.ToString(Avalonia.Styling.Style)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.PropertyEqualsSelector">
            <summary>
            A selector that matches the common case of a type and/or name followed by a collection of
            style classes and pseudoclasses.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.PropertyEqualsSelector.ToString(Avalonia.Styling.Style)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.PropertyEqualsSelector.Evaluate(Avalonia.StyledElement,Avalonia.Styling.IStyle,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.PropertySetterInstance`1">
            <summary>
            A <see cref="T:Avalonia.Styling.Setter"/> which has been instanced on a control.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
        </member>
        <member name="T:Avalonia.Styling.Selector">
            <summary>
            A selector in a <see cref="T:Avalonia.Styling.Style"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Selector.InTemplate">
            <summary>
            Gets a value indicating whether either this selector or a previous selector has moved
            into a template.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Selector.IsCombinator">
            <summary>
            Gets a value indicating whether this selector is a combinator.
            </summary>
            <remarks>
            A combinator is a selector such as Child or Descendent which links simple selectors.
            </remarks>
        </member>
        <member name="P:Avalonia.Styling.Selector.TargetType">
            <summary>
            Gets the target type of the selector, if available.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Selector.Match(Avalonia.StyledElement,Avalonia.Styling.IStyle,System.Boolean)">
            <summary>
            Tries to match the selector with a control.
            </summary>
            <param name="control">The control.</param>
            <param name="parent">
            The parent style, if the style containing the selector is a nested style.
            </param>
            <param name="subscribe">
            Whether the match should subscribe to changes in order to track the match over time,
            or simply return an immediate result.
            </param>
            <returns>A <see cref="T:Avalonia.Styling.SelectorMatch"/>.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selector.ToString(Avalonia.Styling.Style)">
            <summary>
            Gets a string representing the selector, with the nesting separator (`^`) replaced with
            the parent selector.
            </summary>
            <param name="owner">The owner style.</param>
        </member>
        <member name="M:Avalonia.Styling.Selector.Evaluate(Avalonia.StyledElement,Avalonia.Styling.IStyle,System.Boolean)">
            <summary>
            Evaluates the selector for a match.
            </summary>
            <param name="control">The control.</param>
            <param name="parent">
            The parent style, if the style containing the selector is a nested style.
            </param>
            <param name="subscribe">
            Whether the match should subscribe to changes in order to track the match over time,
            or simply return an immediate result.
            </param>
            <returns>A <see cref="T:Avalonia.Styling.SelectorMatch"/>.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selector.MovePrevious">
            <summary>
            Moves to the previous selector.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Selector.MovePreviousOrParent">
            <summary>
            Moves to the previous selector or the parent selector.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.SelectorMatchResult">
            <summary>
            Describes how a <see cref="T:Avalonia.Styling.SelectorMatch"/> matches a control and its type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.NeverThisType">
            <summary>
            The selector never matches this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.NeverThisInstance">
            <summary>
            The selector never matches this instance, but can match this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.Sometimes">
            <summary>
            The selector matches this instance based on the <see cref="P:Avalonia.Styling.SelectorMatch.Activator"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisInstance">
            <summary>
            The selector always matches this instance, but doesn't always match this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisType">
            <summary>
            The selector always matches this type.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.SelectorMatch">
            <summary>
            Holds the result of a <see cref="T:Avalonia.Styling.Selector"/> match.
            </summary>
            <remarks>
            A selector match describes whether and how a <see cref="T:Avalonia.Styling.Selector"/> matches a control, and
            in addition whether the selector can ever match a control of the same type.
            </remarks>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.NeverThisType">
            <summary>
            A selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.NeverThisType"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.NeverThisInstance">
            <summary>
            A selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.NeverThisInstance"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.AlwaysThisType">
            <summary>
            A selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisType"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.AlwaysThisInstance">
            <summary>
            Gets a selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisInstance"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.SelectorMatch.#ctor(Avalonia.Styling.Activators.IStyleActivator)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.SelectorMatch"/> class with a 
            <see cref="F:Avalonia.Styling.SelectorMatchResult.Sometimes"/> result.
            </summary>
            <param name="match">The match activator.</param>
        </member>
        <member name="M:Avalonia.Styling.SelectorMatch.#ctor(Avalonia.Styling.SelectorMatchResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.SelectorMatch"/> class with the specified result.
            </summary>
            <param name="result">The match result.</param>
        </member>
        <member name="P:Avalonia.Styling.SelectorMatch.IsMatch">
            <summary>
            Gets a value indicating whether the match was positive.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.SelectorMatch.Result">
            <summary>
            Gets the result of the match.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.SelectorMatch.Activator">
            <summary>
            Gets an activator which tracks the selector match, in the case of selectors that can
            change over time.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.SelectorMatch.And(Avalonia.Styling.SelectorMatch@)">
            <summary>
            Logical ANDs this <see cref="T:Avalonia.Styling.SelectorMatch"/> with another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Styling.SelectorMatch.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.Selectors">
            <summary>
            Extension methods for <see cref="T:Avalonia.Styling.Selector"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Child(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a previous selector's child.
            </summary>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Class(Avalonia.Styling.Selector,System.String)">
            <summary>
            Returns a selector which matches a control's style class.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="name">The name of the style class.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Descendant(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a descendant of a previous selector.
            </summary>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Is(Avalonia.Styling.Selector,System.Type)">
            <summary>
            Returns a selector which matches a type or a derived type.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="type">The type.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Is``1(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a type or a derived type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Name(Avalonia.Styling.Selector,System.String)">
            <summary>
            Returns a selector which matches a control's Name.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="name">The name.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Not(Avalonia.Styling.Selector,System.Func{Avalonia.Styling.Selector,Avalonia.Styling.Selector})">
            <summary>
            Returns a selector which inverts the results of selector argument.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="argument">The selector to be not-ed.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Not(Avalonia.Styling.Selector,Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which inverts the results of selector argument.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="argument">The selector to be not-ed.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.NthChild(Avalonia.Styling.Selector,System.Int32,System.Int32)">
            <inheritdoc cref="T:Avalonia.Styling.NthChildSelector"/>
            <inheritdoc cref="M:Avalonia.Styling.NthChildSelector.#ctor(Avalonia.Styling.Selector,System.Int32,System.Int32)"/>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.NthLastChild(Avalonia.Styling.Selector,System.Int32,System.Int32)">
            <inheritdoc cref="T:Avalonia.Styling.NthLastChildSelector"/>
            <inheritdoc cref="M:Avalonia.Styling.NthLastChildSelector.#ctor(Avalonia.Styling.Selector,System.Int32,System.Int32)"/>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.OfType(Avalonia.Styling.Selector,System.Type)">
            <summary>
            Returns a selector which matches a type.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="type">The type.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.OfType``1(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Or(Avalonia.Styling.Selector[])">
            <summary>
            Returns a selector which ORs selectors.
            </summary>
            <param name="selectors">The selectors to be OR'd.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Or(System.Collections.Generic.IReadOnlyList{Avalonia.Styling.Selector})">
            <summary>
            Returns a selector which ORs selectors.
            </summary>
            <param name="selectors">The selectors to be OR'd.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.PropertyEquals``1(Avalonia.Styling.Selector,Avalonia.AvaloniaProperty{``0},System.Object)">
            <summary>
            Returns a selector which matches a control with the specified property value.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="previous">The previous selector.</param>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.PropertyEquals(Avalonia.Styling.Selector,Avalonia.AvaloniaProperty,System.Object)">
            <summary>
            Returns a selector which matches a control with the specified property value.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Template(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which enters a lookless control's template.
            </summary>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="T:Avalonia.Styling.Setter">
            <summary>
            A setter for a <see cref="T:Avalonia.Styling.Style"/>.
            </summary>
            <remarks>
            A <see cref="T:Avalonia.Styling.Setter"/> is used to set a <see cref="T:Avalonia.AvaloniaProperty"/> value on a
            <see cref="T:Avalonia.AvaloniaObject"/> depending on a condition.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.Setter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Setter"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Setter.#ctor(Avalonia.AvaloniaProperty,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Setter"/> class.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="P:Avalonia.Styling.Setter.Property">
            <summary>
            Gets or sets the property to set.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Setter.Value">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.SetterBase">
            <summary>
            Represents the base class for value setters.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Style">
            <summary>
            Defines a style.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Style"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Style.#ctor(System.Func{Avalonia.Styling.Selector,Avalonia.Styling.Selector})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Style"/> class.
            </summary>
            <param name="selector">The style selector.</param>
        </member>
        <member name="P:Avalonia.Styling.Style.Selector">
            <summary>
            Gets or sets the style's selector.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Style.ToString">
            <summary>
            Returns a string representation of the style.
            </summary>
            <returns>A string representation of the style.</returns>
        </member>
        <member name="T:Avalonia.Styling.StyleBase">
            <summary>
            Base class for <see cref="T:Avalonia.Styling.Style"/> and <see cref="T:Avalonia.Styling.ControlTheme"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.StyleInstance">
            <summary>
            Stores state for a <see cref="T:Avalonia.Styling.Style"/> that has been instanced on a control.
            </summary>
            <remarks>
            <see cref="T:Avalonia.Styling.StyleInstance"/> is based on <see cref="T:Avalonia.PropertyStore.ValueFrame"/> meaning that it is 
            injected directly into the value store of an <see cref="T:Avalonia.AvaloniaObject"/>. Depending on
            the setters present on the style, it may be possible to share a single style instance
            among all controls that the style is applied to, meaning that a single style instance can
            apply to multiple controls.
            </remarks>
        </member>
        <member name="T:Avalonia.Styling.Styles">
            <summary>
            A style that consists of a number of child styles.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Styles.Resources">
            <summary>
            Gets or sets a dictionary of style resources.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Styles.TryGetResource(System.Object,Avalonia.Styling.ThemeVariant,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.AddRange(System.Collections.Generic.IEnumerable{Avalonia.Styling.IStyle})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Avalonia.Styling.IStyle})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Move(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.MoveRange(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.RemoveAll(System.Collections.Generic.IEnumerable{Avalonia.Styling.IStyle})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.IndexOf(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Insert(System.Int32,Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Add(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Contains(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.CopyTo(Avalonia.Styling.IStyle[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Remove(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.System#Collections#Generic#IEnumerable{Avalonia#Styling#IStyle}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Avalonia#Controls#IResourceProvider#AddOwner(Avalonia.Controls.IResourceHost)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Avalonia#Controls#IResourceProvider#RemoveOwner(Avalonia.Controls.IResourceHost)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TemplateSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TemplateSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TemplateSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.ThemeVariant">
            <summary>
            Specifies a UI theme variant that should be used for the Control and Application types.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.ThemeVariant.ActualThemeVariantProperty">
            <summary>
            Defines the ActualThemeVariant property.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.ThemeVariant.RequestedThemeVariantProperty">
            <summary>
            Defines the RequestedThemeVariant property.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.ThemeVariant.#ctor(System.Object,Avalonia.Styling.ThemeVariant)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Styling.ThemeVariant"/>
            </summary>
            <param name="key">Key of the theme variant by which variants are compared.</param>
            <param name="inheritVariant">Reference to a theme variant which should be used, if resource wasn't found for the requested variant.</param>
            <exception cref="T:System.ArgumentException">Thrown if inheritVariant is a reference to the <see cref="P:Avalonia.Styling.ThemeVariant.Default"/> which is ambiguous value to inherit.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if key is null.</exception>
        </member>
        <member name="P:Avalonia.Styling.ThemeVariant.Key">
            <summary>
            Key of the theme variant by which variants are compared.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ThemeVariant.InheritVariant">
            <summary>
            Reference to a theme variant which should be used, if resource wasn't found for the requested variant.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ThemeVariant.Default">
            <summary>
            Inherit theme variant from the parent. If set on Application, system theme is inherited.
            Using Default as the ResourceDictionary.Key marks this dictionary as a fallback in case the theme variant or resource key is not found in other theme dictionaries.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ThemeVariant.Light">
            <summary>
            Use the Light theme variant.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ThemeVariant.Dark">
            <summary>
            Use the Dark theme variant.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.TypeNameAndClassSelector">
            <summary>
            A selector that matches the common case of a type and/or name followed by a collection of
            style classes and pseudoclasses.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.Name">
            <summary>
            Gets the name of the control to match.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.IsConcreteType">
            <summary>
            Whether the selector matches the concrete <see cref="P:Avalonia.Styling.TypeNameAndClassSelector.TargetType"/> or any object which
            implements <see cref="P:Avalonia.Styling.TypeNameAndClassSelector.TargetType"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.Classes">
            <summary>
            The style classes which the selector matches.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.TypeNameAndClassSelector.ToString(Avalonia.Styling.Style)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.TypeNameAndClassSelector.Evaluate(Avalonia.StyledElement,Avalonia.Styling.IStyle,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._left">
            <summary>
            The thickness on the left.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._top">
            <summary>
            The thickness on the top.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._right">
            <summary>
            The thickness on the right.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._bottom">
            <summary>
            The thickness on the bottom.
            </summary>
        </member>
        <member name="M:Avalonia.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Thickness"/> structure.
            </summary>
            <param name="uniformLength">The length that should be applied to all sides.</param>
        </member>
        <member name="M:Avalonia.Thickness.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Thickness"/> structure.
            </summary>
            <param name="horizontal">The thickness on the left and right.</param>
            <param name="vertical">The thickness on the top and bottom.</param>
        </member>
        <member name="M:Avalonia.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Thickness"/> structure.
            </summary>
            <param name="left">The thickness on the left.</param>
            <param name="top">The thickness on the top.</param>
            <param name="right">The thickness on the right.</param>
            <param name="bottom">The thickness on the bottom.</param>
        </member>
        <member name="P:Avalonia.Thickness.Left">
            <summary>
            Gets the thickness on the left.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.Top">
            <summary>
            Gets the thickness on the top.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.Right">
            <summary>
            Gets the thickness on the right.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.Bottom">
            <summary>
            Gets the thickness on the bottom.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.IsUniform">
            <summary>
            Gets a value indicating whether all sides are equal.
            </summary>
        </member>
        <member name="M:Avalonia.Thickness.op_Equality(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Compares two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Inequality(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Compares two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The inequality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Addition(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Adds two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Subtraction(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Subtracts two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Multiply(Avalonia.Thickness,System.Double)">
            <summary>
            Multiplies a Thickness to a scalar.
            </summary>
            <param name="a">The thickness.</param>
            <param name="b">The scalar.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Addition(Avalonia.Size,Avalonia.Thickness)">
            <summary>
            Adds a Thickness to a Size.
            </summary>
            <param name="size">The size.</param>
            <param name="thickness">The thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Subtraction(Avalonia.Size,Avalonia.Thickness)">
            <summary>
            Subtracts a Thickness from a Size.
            </summary>
            <param name="size">The size.</param>
            <param name="thickness">The thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Thickness"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Thickness"/>.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Equals(Avalonia.Thickness)">
            <summary>
            Returns a boolean indicating whether the thickness is equal to the other given point.
            </summary>
            <param name="other">The other thickness to test equality against.</param>
            <returns>True if this thickness is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Equals(System.Object)">
            <summary>
            Checks for equality between a thickness and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a size that equals the current size.
            </returns>
        </member>
        <member name="M:Avalonia.Thickness.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Thickness.ToString">
            <summary>
            Returns the string representation of the thickness.
            </summary>
            <returns>The string representation of the thickness.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Deconstructor the thickness into its left, top, right and bottom thickness values.
            </summary>
            <param name="left">The thickness on the left.</param>
            <param name="top">The thickness on the top.</param>
            <param name="right">The thickness on the right.</param>
            <param name="bottom">The thickness on the bottom.</param>
        </member>
        <member name="T:Avalonia.Threading.AvaloniaSynchronizationContext">
            <summary>
            SynchronizationContext to be used on main thread
            </summary>
        </member>
        <member name="P:Avalonia.Threading.AvaloniaSynchronizationContext.AutoInstall">
            <summary>
            Controls if SynchronizationContext should be installed in InstallIfNeeded. Used by Designer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaSynchronizationContext.InstallIfNeeded">
            <summary>
            Installs synchronization context in current thread
            </summary>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Threading.Dispatcher">
            <summary>
            Provides services for managing work items on a thread.
            </summary>
            <remarks>
            In Avalonia, there is usually only a single <see cref="T:Avalonia.Threading.Dispatcher"/> in the application -
            the one for the UI thread, retrieved via the <see cref="P:Avalonia.Threading.Dispatcher.UIThread"/> property.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.CheckAccess">
            <summary>
            Checks that the current thread is the UI thread.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.VerifyAccess">
            <summary>
            Checks that the current thread is the UI thread and throws if not.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The current thread is not the UI thread.
            </exception>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke(System.Action)">
            <summary>
                Executes the specified Action synchronously on the thread that
                the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <remarks>
                Note that the default priority is DispatcherPriority.Send.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
                Executes the specified Action synchronously on the thread that
                the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke(System.Action,Avalonia.Threading.DispatcherPriority,System.Threading.CancellationToken)">
            <summary>
                Executes the specified Action synchronously on the thread that
                the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used to cancel the operation.
                If the operation has not started, it will be aborted when the
                cancellation token is canceled.  If the operation has started,
                the operation can cooperate with the cancellation request.
            </param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke(System.Action,Avalonia.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
            <summary>
                Executes the specified Action synchronously on the thread that
                the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used to cancel the operation.
                If the operation has not started, it will be aborted when the
                cancellation token is canceled.  If the operation has started,
                the operation can cooperate with the cancellation request.
            </param>
            <param name="timeout">
                The minimum amount of time to wait for the operation to start.
                Once the operation has started, it will complete before this method
                returns.
            </param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke``1(System.Func{``0})">
            <summary>
                Executes the specified Func&lt;TResult&gt; synchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <returns>
                The return value from the delegate being invoked.
            </returns>
            <remarks>
                Note that the default priority is DispatcherPriority.Send.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke``1(System.Func{``0},Avalonia.Threading.DispatcherPriority)">
            <summary>
                Executes the specified Func&lt;TResult&gt; synchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <returns>
                The return value from the delegate being invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke``1(System.Func{``0},Avalonia.Threading.DispatcherPriority,System.Threading.CancellationToken)">
            <summary>
                Executes the specified Func&lt;TResult&gt; synchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used to cancel the operation.
                If the operation has not started, it will be aborted when the
                cancellation token is canceled.  If the operation has started,
                the operation can cooperate with the cancellation request.
            </param>
            <returns>
                The return value from the delegate being invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Invoke``1(System.Func{``0},Avalonia.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
            <summary>
                Executes the specified Func&lt;TResult&gt; synchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used to cancel the operation.
                If the operation has not started, it will be aborted when the
                cancellation token is canceled.  If the operation has started,
                the operation can cooperate with the cancellation request.
            </param>
            <param name="timeout">
                The minimum amount of time to wait for the operation to start.
                Once the operation has started, it will complete before this method
                returns.
            </param>
            <returns>
                The return value from the delegate being invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Action)">
            <summary>
                Executes the specified Action asynchronously on the thread
                that the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
            <remarks>
                Note that the default priority is DispatcherPriority.Default.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
                Executes the specified Action asynchronously on the thread
                that the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Action,Avalonia.Threading.DispatcherPriority,System.Threading.CancellationToken)">
            <summary>
                Executes the specified Action asynchronously on the thread
                that the Dispatcher was created on.
            </summary>
            <param name="callback">
                An Action delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used to cancel the operation.
                If the operation has not started, it will be aborted when the
                cancellation token is canceled.  If the operation has started,
                the operation can cooperate with the cancellation request.
            </param>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
            <summary>
                Executes the specified Func&lt;TResult&gt; asynchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
            <remarks>
                Note that the default priority is DispatcherPriority.Default.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},Avalonia.Threading.DispatcherPriority)">
            <summary>
                Executes the specified Func&lt;TResult&gt; asynchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},Avalonia.Threading.DispatcherPriority,System.Threading.CancellationToken)">
            <summary>
                Executes the specified Func&lt;TResult&gt; asynchronously on the
                thread that the Dispatcher was created on.
            </summary>
            <param name="callback">
                A Func&lt;TResult&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used to cancel the operation.
                If the operation has not started, it will be aborted when the
                cancellation token is canceled.  If the operation has started,
                the operation can cooperate with the cancellation request.
            </param>
            <returns>
                An operation representing the queued delegate to be invoked.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Post(System.Action,Avalonia.Threading.DispatcherPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the specified Func&lt;Task&gt; asynchronously on the
                thread that the Dispatcher was created on
            </summary>
            <param name="callback">
                A Func&lt;Task&gt; delegate to invoke through the dispatcher.
            </param>
            <returns>
                An task that completes after the task returned from callback finishes.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task},Avalonia.Threading.DispatcherPriority)">
            <summary>
                Executes the specified Func&lt;Task&gt; asynchronously on the
                thread that the Dispatcher was created on
            </summary>
            <param name="callback">
                A Func&lt;Task&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <returns>
                An task that completes after the task returned from callback finishes
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Executes the specified Func&lt;Task&lt;TResult&gt;&gt; asynchronously on the
                thread that the Dispatcher was created on
            </summary>
            <param name="action">
                A Func&lt;Task&lt;TResult&gt;&gt; delegate to invoke through the dispatcher.
            </param>
            <returns>
                An task that completes after the task returned from callback finishes
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Avalonia.Threading.DispatcherPriority)">
            <summary>
                Executes the specified Func&lt;Task&lt;TResult&gt;&gt; asynchronously on the
                thread that the Dispatcher was created on
            </summary>
            <param name="action">
                A Func&lt;Task&lt;TResult&gt;&gt; delegate to invoke through the dispatcher.
            </param>
            <param name="priority">
                The priority that determines in what order the specified
                callback is invoked relative to the other pending operations
                in the Dispatcher.
            </param>
            <returns>
                An task that completes after the task returned from callback finishes
            </returns>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Post(System.Threading.SendOrPostCallback,System.Object,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Posts an action that will be invoked on the dispatcher thread.
            </summary>
            <param name="action">The method.</param>
            <param name="arg">The argument of method to call.</param>
            <param name="priority">The priority with which to invoke the method.</param>
        </member>
        <member name="E:Avalonia.Threading.Dispatcher.ShutdownStarted">
            <summary>
                Raised when the dispatcher is shutting down.
            </summary>
        </member>
        <member name="E:Avalonia.Threading.Dispatcher.ShutdownFinished">
            <summary>
                Raised when the dispatcher is shut down.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.PushFrame(Avalonia.Threading.DispatcherFrame)">
            <summary>
                Push an execution frame.
            </summary>
            <param name="frame">
                The frame for the dispatcher to process.
            </param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.MainLoop(System.Threading.CancellationToken)">
            <summary>
            Runs the dispatcher's main loop.
            </summary>
            <param name="cancellationToken">
            A cancellation token used to exit the main loop.
            </param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.ExitAllFrames">
            <summary>
                Requests that all nested frames exit.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.BeginInvokeShutdown(Avalonia.Threading.DispatcherPriority)">
            <summary>
                Begins the process of shutting down the dispatcher.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeShutdown">
            <summary>
            Initiates the shutdown process of the Dispatcher synchronously.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.DisableProcessing">
            <summary>
                Disable the event processing of the dispatcher.
            </summary>
            <remarks>
                This is an advanced method intended to eliminate the chance of
                unrelated reentrancy.  The effect of disabling processing is:
                1) CLR locks will not pump messages internally.
                2) No one is allowed to push a frame.
                3) No message processing is permitted.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.RunJobs(System.Nullable{Avalonia.Threading.DispatcherPriority})">
            <summary>
            Force-runs all dispatcher operations ignoring any pending OS events, use with caution
            </summary>
        </member>
        <member name="T:Avalonia.Threading.DispatcherFrame">
            <summary>
                Representation of Dispatcher frame.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherFrame.#ctor">
            <summary>
                Constructs a new instance of the DispatcherFrame class.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherFrame.#ctor(System.Boolean)">
            <summary>
                Constructs a new instance of the DispatcherFrame class.
            </summary>
            <param name="exitWhenRequested">
                Indicates whether or not this frame will exit when all frames
                are requested to exit.
                <p/>
                Dispatcher frames typically break down into two categories:
                1) Long running, general purpose frames, that exit only when
                   told to.  These frames should exit when requested.
                2) Short running, very specific frames that exit themselves
                   when an important criteria is met.  These frames may
                   consider not exiting when requested in favor of waiting
                   for their important criteria to be met.  These frames
                   should have a timeout associated with them.
            </param>
        </member>
        <member name="P:Avalonia.Threading.DispatcherFrame.Continue">
            <summary>
                Indicates that this dispatcher frame should exit.
            </summary>
        </member>
        <member name="E:Avalonia.Threading.DispatcherOperation.Aborted">
            <summary>
                An event that is raised when the operation is aborted or canceled.
            </summary>
        </member>
        <member name="E:Avalonia.Threading.DispatcherOperation.Completed">
            <summary>
                An event that is raised when the operation completes.
            </summary>
            <remarks>
                Completed indicates that the operation was invoked and has
                either completed successfully or faulted. Note that a canceled
                or aborted operation is never is never considered completed.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.DispatcherOperation.Wait">
            <summary>
                Waits for this operation to complete.
            </summary>
            <returns>
                The status of the operation.  To obtain the return value
                of the invoked delegate, use the the Result property.
            </returns>
        </member>
        <member name="M:Avalonia.Threading.DispatcherOperation.Wait(System.TimeSpan)">
            <summary>
                Waits for this operation to complete.
            </summary>
            <param name="timeout">
                The maximum amount of time to wait.
            </param>
        </member>
        <member name="M:Avalonia.Threading.DispatcherOperation.GetAwaiter">
            <summary>
                Returns an awaiter for awaiting the completion of the operation.
            </summary>
            <remarks>
                This method is intended to be used by compilers.
            </remarks>
        </member>
        <member name="T:Avalonia.Threading.DispatcherPriority">
            <summary>
            Defines the priorities with which jobs can be invoked on a <see cref="T:Avalonia.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherPriority.Value">
            <summary>
            The integer value of the priority
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Default">
            <summary>
            The lowest foreground dispatcher priority
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Input">
            <summary>
            The job will be processed with the same priority as input.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Background">
            <summary>
            The job will be processed after other non-idle operations have completed.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.ContextIdle">
            <summary>
            The job will be processed after background operations have completed.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.ApplicationIdle">
            <summary>
            The job will be processed when the application is idle.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.SystemIdle">
            <summary>
            The job will be processed when the system is idle.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.MinimumActiveValue">
            <summary>
            Minimum possible priority that's actually dispatched, default value
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Inactive">
            <summary>
            A dispatcher priority for jobs that shouldn't be executed yet
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.MinValue">
            <summary>
            Minimum valid priority
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Invalid">
            <summary>
            Used internally in dispatcher code
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Loaded">
            <summary>
            The job will be processed after layout and render but before input.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.UiThreadRender">
            <summary>
            A special priority for platforms with UI render timer or for forced full rasterization requests
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.AfterRender">
            <summary>
            A special priority to synchronize native control host positions, IME, etc
            We should probably have a better API for that, so the priority is internal
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Render">
            <summary>
            The job will be processed with the same priority as render.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.BeforeRender">
            <summary>
            A special platform hook for jobs to be executed before the normal render cycle
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.AsyncRenderTargetResize">
            <summary>
            A special priority for platforms that resize the render target in asynchronous-ish matter,
            should be changed into event grouping in the platform backend render
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.DataBind">
            <summary>
            The job will be processed with the same priority as data binding.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Normal">
            <summary>
            The job will be processed with normal priority.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Send">
            <summary>
            The job will be processed before other asynchronous operations.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.MaxValue">
            <summary>
            Maximum possible priority
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherPriority.Equals(Avalonia.Threading.DispatcherPriority)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Threading.DispatcherPriority.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Threading.DispatcherPriority.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Threading.DispatcherPriority.CompareTo(Avalonia.Threading.DispatcherPriority)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Threading.DispatcherTimer">
            <summary>
                A timer that is integrated into the Dispatcher queues, and will
                be processed after a given amount of time at a specified priority.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor">
            <summary>
                Creates a timer that uses theUI thread's Dispatcher2 to
                process the timer event at background priority.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor(Avalonia.Threading.DispatcherPriority)">
            <summary>
                Creates a timer that uses the UI thread's Dispatcher2 to
                process the timer event at the specified priority.
            </summary>
            <param name="priority">
                The priority to process the timer at.
            </param>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor(Avalonia.Threading.DispatcherPriority,Avalonia.Threading.Dispatcher)">
            <summary>
                Creates a timer that uses the specified Dispatcher2 to
                process the timer event at the specified priority.
            </summary>
            <param name="priority">
                The priority to process the timer at.
            </param>
            <param name="dispatcher">
                The dispatcher to use to process the timer.
            </param>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor(System.TimeSpan,Avalonia.Threading.DispatcherPriority,System.EventHandler)">
            <summary>
                Creates a timer that uses the UI thread's Dispatcher2 to
                process the timer event at the specified priority after the specified timeout.
            </summary>
            <param name="interval">
                The interval to tick the timer after.
            </param>
            <param name="priority">
                The priority to process the timer at.
            </param>
            <param name="callback">
                The callback to call when the timer ticks.
            </param>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.Dispatcher">
            <summary>
                Gets the dispatcher this timer is associated with.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.IsEnabled">
            <summary>
                Gets or sets whether the timer is running.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.Interval">
            <summary>
                Gets or sets the time between timer ticks.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Start">
            <summary>
                Starts the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Stop">
            <summary>
                Stops the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Run(System.Func{System.Boolean},System.TimeSpan,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Starts a new timer.
            </summary>
            <param name="action">
            The method to call on timer tick. If the method returns false, the timer will stop.
            </param>
            <param name="interval">The interval at which to tick.</param>
            <param name="priority">The priority to use.</param>
            <returns>An <see cref="T:System.IDisposable"/> used to cancel the timer.</returns>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.RunOnce(System.Action,System.TimeSpan,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Runs a method once, after the specified interval.
            </summary>
            <param name="action">
            The method to call after the interval has elapsed.
            </param>
            <param name="interval">The interval after which to call the method.</param>
            <param name="priority">The priority to use.</param>
            <returns>An <see cref="T:System.IDisposable"/> used to cancel the timer.</returns>
        </member>
        <member name="E:Avalonia.Threading.DispatcherTimer.Tick">
            <summary>
                Occurs when the specified timer interval has elapsed and the
                timer is enabled.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.Tag">
            <summary>
                Any data that the caller wants to pass along with the timer.
            </summary>
        </member>
        <member name="T:Avalonia.Threading.IDispatcher">
            <summary>
            Dispatches jobs to a thread.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.CheckAccess">
            <summary>
            Determines whether the calling thread is the thread associated with this <see cref="T:Avalonia.Threading.IDispatcher"/>.
            </summary>
            <returns>True if he calling thread is the thread associated with the dispatched, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.VerifyAccess">
            <summary>
            Throws an exception if the calling thread is not the thread associated with this <see cref="T:Avalonia.Threading.IDispatcher"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.Post(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Posts an action that will be invoked on the dispatcher thread.
            </summary>
            <param name="action">The method.</param>
            <param name="priority">The priority with which to invoke the method.</param>
        </member>
        <member name="T:Avalonia.Utilities.ArrayBuilder`1">
            <summary>
            A helper type for avoiding allocations while building arrays.
            </summary>
            <typeparam name="T">The type of item contained in the array.</typeparam>
        </member>
        <member name="P:Avalonia.Utilities.ArrayBuilder`1.Length">
            <summary>
            Gets or sets the number of items in the array.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ArrayBuilder`1.Capacity">
            <summary>
            Gets the current capacity of the array.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ArrayBuilder`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the array.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:Avalonia.Utilities.ArrayBuilder`1.Length"/>.
            </exception>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.Add(System.Int32,System.Boolean)">
            <summary>
            Appends a given number of empty items to the array returning
            the items as a slice.
            </summary>
            <param name="length">The number of items in the slice.</param>
            <param name="clear">Whether to clear the new slice, Defaults to <see langword="true"/>.</param>
            <returns>The <see cref="T:Avalonia.Utilities.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.Add(Avalonia.Utilities.ArraySlice{`0}@)">
            <summary>
            Appends the slice to the array copying the data across.
            </summary>
            <param name="value">The array slice.</param>
            <returns>The <see cref="T:Avalonia.Utilities.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.AddItem(`0)">
            <summary>
            Appends an item.
            </summary>
            <param name="value">The item to append.</param>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.Clear">
            <summary>
            Clears the array.
            Allocated memory is left intact for future usage.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.AsSlice">
            <summary>
            Returns the current state of the array as a slice.
            </summary>
            <returns>The <see cref="T:Avalonia.Utilities.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.AsSlice(System.Int32)">
            <summary>
            Returns the current state of the array as a slice.
            </summary>
            <param name="length">The number of items in the slice.</param>
            <returns>The <see cref="T:Avalonia.Utilities.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.AsSlice(System.Int32,System.Int32)">
            <summary>
            Returns the current state of the array as a slice.
            </summary>
            <param name="start">The index at which to begin the slice.</param>
            <param name="length">The number of items in the slice.</param>
            <returns>The <see cref="T:Avalonia.Utilities.ArraySlice`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArrayBuilder`1.AsSpan">
            <summary>
            Returns the current state of the array as a span.
            </summary>
            <returns>The <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="T:Avalonia.Utilities.ArraySlice`1">
            <summary>
            ArraySlice represents a contiguous region of arbitrary memory similar
            to <see cref="T:System.Memory`1"/> and <see cref="T:System.Span`1"/> though constrained
            to arrays.
            Unlike <see cref="T:System.Span`1"/>, it is not a byref-like type.
            </summary>
            <typeparam name="T">The type of item contained in the slice.</typeparam>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.Empty">
            <summary>
            Gets an empty <see cref="T:Avalonia.Utilities.ArraySlice`1"/>
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Utilities.ArraySlice`1"/> struct.
            </summary>
            <param name="data">The underlying data buffer.</param>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Utilities.ArraySlice`1"/> struct.
            </summary>
            <param name="data">The underlying data buffer.</param>
            <param name="start">The offset position in the underlying buffer this slice was created from.</param>
            <param name="length">The number of items in the slice.</param>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.IsEmpty">
            <summary>
                Gets a value that indicates whether this instance of <see cref="T:Avalonia.Utilities.ArraySlice`1"/> is Empty.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.Start">
            <summary>
            Gets the offset position in the underlying buffer this slice was created from.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.Length">
            <summary>
            Gets the number of items in the slice.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.Span">
            <summary>
            Gets a <see cref="T:System.Span`1"/> representing this slice.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the slice.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:Avalonia.Utilities.ArraySlice`1.Length"/>.
            </exception>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.op_Implicit(`0[])~Avalonia.Utilities.ArraySlice{`0}">
            <summary>
            Defines an implicit conversion of an array to a <see cref="T:Avalonia.Utilities.ArraySlice`1"/>
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.Fill(`0)">
            <summary>
            Fills the contents of this slice with the given value.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the given slice, beginning at 'start', of given length
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice (exclusive).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="start"/> or end index is not in range (&lt;0 or &gt;Length).
            </exception>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.Take(System.Int32)">
            <summary>
                Returns a specified number of contiguous elements from the start of the slice.
            </summary>
            <param name="length">The number of elements to return.</param>
            <returns>A <see cref="T:Avalonia.Utilities.ArraySlice`1"/> that contains the specified number of elements from the start of this slice.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.Skip(System.Int32)">
            <summary>
                Bypasses a specified number of elements in the slice and then returns the remaining elements.
            </summary>
            <param name="length">The number of elements to skip before returning the remaining elements.</param>
            <returns>A <see cref="T:Avalonia.Utilities.ArraySlice`1"/> that contains the elements that occur after the specified index in this slice.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Utilities.ArraySlice`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Utilities.ArraySlice`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Utilities.AvaloniaPropertyDictionary`1">
            <summary>
            Stores values with <see cref="T:Avalonia.AvaloniaProperty"/> as key.
            </summary>
            <typeparam name="TValue">Stored value type.</typeparam>
            <remarks>
            This struct implements the most commonly-used part of the dictionary API, but does
            not implement <see cref="T:System.Collections.Generic.IDictionary`2"/>. In particular, this struct
            is not enumerable. Enumeration is intended to be done by index for better performance.
            </remarks>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Utilities.AvaloniaPropertyDictionary`1"/>
            class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Utilities.AvaloniaPropertyDictionary`1"/>
            class that is empty and has the specified initial capacity.
            </summary>
            <param name="capactity">
            The initial number of elements that the collection can contain.
            </param>
        </member>
        <member name="P:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Count">
            <summary>
            Gets the number of key/value pairs contained in the collection.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Item(Avalonia.AvaloniaProperty)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="property">The key to get or set.</param>
            <returns>
            The value associated with the specified key. If the key is not found, a get operation 
            throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a
            new element for the specified key.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The key does not exist in the collection.
            </exception>
        </member>
        <member name="P:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">
            The index of the entry, between 0 and <see cref="P:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Count"/> - 1.
            </param>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Add(Avalonia.AvaloniaProperty,`0)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="property">The key.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Clear">
            <summary>
            Removes all keys and values from the collection.
            </summary>
            <remarks>
            The Count property is set to 0, and references to other objects from elements of the
            collection are also released. The capacity remains unchanged.
            </remarks>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.ContainsKey(Avalonia.AvaloniaProperty)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="property">The key.</param>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.GetKeyValue(System.Int32,Avalonia.AvaloniaProperty@,`0@)">
            <summary>
            Gets the key and value at the specified index.
            </summary>
            <param name="index">
            The index of the entry, between 0 and <see cref="P:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Count"/> - 1.
            </param>
            <param name="key">
            When this method returns, contains the key at the specified index.
            </param>
            <param name="value">
            When this method returns, contains the value at the specified index.
            </param>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Remove(Avalonia.AvaloniaProperty)">
            <summary>
            Removes the value of the specified key from the collection.
            </summary>
            <param name="property">The key.</param>
            <returns>
            true if the element is successfully found and removed; otherwise, false. This method
            returns false if key is not found in the collection.
            </returns>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.Remove(Avalonia.AvaloniaProperty,`0@)">
            <summary>
            Removes the value of the specified key from the collection, and copies the element to
            the value parameter.
            </summary>
            <param name="property">The key.</param>
            <param name="value">The removed element.</param>
            <returns>
            true if the element is successfully found and removed; otherwise, false. This method
            returns false if key is not found in the collection.
            </returns>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.TryAdd(Avalonia.AvaloniaProperty,`0)">
            <summary>
            Attempts to add the specified key and value to the collection.
            </summary>
            <param name="property">The key.</param>
            <param name="value">The value of the element to add.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Utilities.AvaloniaPropertyDictionary`1.TryGetValue(Avalonia.AvaloniaProperty,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="property">The property key.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key,
            if the property is found; otherwise, null. This parameter is passed uninitialized.
            </param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Utilities.BidiDictionary`2">
            <summary>
            A simple bi-directional dictionary.
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.BinarySearchExtension">
            <summary>
            Extension methods for binary searching an IReadOnlyList collection
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.BinarySearchExtension.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search on the entire contents of an IReadOnlyList
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The list to be searched</param>
            <param name="value">The value to search for</param>
            <param name="comparer">The comparer</param>
            <returns>The index of the found item; otherwise the bitwise complement of the index of the next larger item</returns>
        </member>
        <member name="M:Avalonia.Utilities.BinarySearchExtension.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search on a a subset of an IReadOnlyList
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The list to be searched</param>
            <param name="index">The start of the range to be searched</param>
            <param name="length">The length of the range to be searched</param>
            <param name="value">The value to search for</param>
            <param name="comparer">A comparer</param>
            <returns>The index of the found item; otherwise the bitwise complement of the index of the next larger item</returns>
        </member>
        <member name="M:Avalonia.Utilities.DisposableLock.TryLock">
            <summary>
            Tries to take a lock
            </summary>
            <returns>IDisposable if succeeded to obtain the lock</returns>
        </member>
        <member name="M:Avalonia.Utilities.DisposableLock.Lock">
            <summary>
            Enters a waiting lock
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.FrugalListBase`1.Count">
            <summary>
            Number of entries in this store
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.FrugalListBase`1.Capacity">
            <summary>
            Capacity of this store
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.Clear">
            <summary>
            Removes all values from the store
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.Contains(`0)">
            <summary>
            Returns true if the store contains the entry.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.IndexOf(`0)">
            <summary>
            Returns the index into the store that contains the item.
            -1 is returned if the item is not in the store.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.Insert(System.Int32,`0)">
            <summary>
            Insert item into the store at index, grows if needed
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.Remove(`0)">
            <summary>
            Removes the item from the store. If the item was not
            in the store false is returned.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item from the store
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.EntryAt(System.Int32)">
            <summary>
            Return the item at index in the store
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.Promote(Avalonia.Utilities.FrugalListBase{`0})">
            <summary>
            Promotes the values in the current store to the next larger
            and more complex storage model.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.ToArray">
            <summary>
            Returns the entries as an array
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entries to the given array starting at the
            specified index
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.FrugalListBase`1.Clone">
            <summary>
            Creates a shallow copy of the  list
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SingleItemList`1">
            <summary>
            A simple class to handle a single item
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.ThreeItemList`1">
            <summary>
            A simple class to handle a list with 3 items.  Perf analysis showed
            that this yielded better memory locality and perf than an object and an array.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SixItemList`1">
            <summary>
            A simple class to handle a list with 6 items.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.ArrayItemList`1">
            <summary>
            A simple class to handle an array of 7 or more items.  It is unsorted and uses
            a linear search.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.IWeakEventSubscriber`1">
            <summary>
            Defines a listener to a event subscribed vis the <see cref="T:Avalonia.Utilities.WeakEvent`2"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.MappedArraySlice`1">
            <summary>
            Provides a mapped view of an underlying slice, selecting arbitrary indices
            from the source array.
            </summary>
            <typeparam name="T">The type of item contained in the underlying array.</typeparam>
        </member>
        <member name="M:Avalonia.Utilities.MappedArraySlice`1.#ctor(Avalonia.Utilities.ArraySlice{`0}@,Avalonia.Utilities.ArraySlice{System.Int32}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Utilities.MappedArraySlice`1"/> struct.
            </summary>
            <param name="data">The data slice.</param>
            <param name="map">The map slice.</param>
        </member>
        <member name="P:Avalonia.Utilities.MappedArraySlice`1.Length">
            <summary>
            Gets the number of items in the map.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.MappedArraySlice`1.Item(System.Int32)">
            <summary>
            Returns a reference to specified element of the slice.
            </summary>
            <param name="index">The index of the element to return.</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to <see cref="P:Avalonia.Utilities.MappedArraySlice`1.Length"/>.
            </exception>
        </member>
        <member name="T:Avalonia.Utilities.MathUtilities">
            <summary>
            Provides math utilities not provided in System.Math.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.AreClose(System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.
            </summary> 
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.AreClose(System.Double,System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or
            not they are within epsilon of each other.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
            <param name="eps"> The fixed epsilon value used to compare.</param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.AreClose(System.Single,System.Single)">
            <summary>
            AreClose - Returns whether or not two floats are "close".  That is, whether or 
            not they are within epsilon of each other.
            </summary> 
            <param name="value1"> The first float to compare. </param>
            <param name="value2"> The second float to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.LessThan(System.Double,System.Double)">
            <summary>
            LessThan - Returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.LessThan(System.Single,System.Single)">
            <summary>
            LessThan - Returns whether or not the first float is less than the second float.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.
            </summary>
            <param name="value1"> The first single float to compare. </param>
            <param name="value2"> The second single float to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan - Returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GreaterThan(System.Single,System.Single)">
            <summary>
            GreaterThan - Returns whether or not the first float is greater than the second float.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.
            </summary>
            <param name="value1"> The first float to compare. </param>
            <param name="value2"> The second float to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose - Returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.LessThanOrClose(System.Single,System.Single)">
            <summary>
            LessThanOrClose - Returns whether or not the first float is less than or close to
            the second float.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.
            </summary>
            <param name="value1"> The first float to compare. </param>
            <param name="value2"> The second float to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose - Returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GreaterThanOrClose(System.Single,System.Single)">
            <summary>
            GreaterThanOrClose - Returns whether or not the first float is greater than or close to
            the second float.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.
            </summary>
            <param name="value1"> The first float to compare. </param>
            <param name="value2"> The second float to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.IsOne(System.Double)">
            <summary>
            IsOne - Returns whether or not the double is "close" to 1.  Same as AreClose(double, 1),
            but this is faster.
            </summary>
            <param name="value"> The double to compare to 1. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.IsOne(System.Single)">
            <summary>
            IsOne - Returns whether or not the float is "close" to 1.  Same as AreClose(float, 1),
            but this is faster.
            </summary>
            <param name="value"> The float to compare to 1. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.IsZero(System.Double)">
            <summary>
            IsZero - Returns whether or not the double is "close" to 0.  Same as AreClose(double, 0),
            but this is faster.
            </summary>
            <param name="value"> The double to compare to 0. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.IsZero(System.Single)">
            <summary>
            IsZero - Returns whether or not the float is "close" to 0.  Same as AreClose(float, 0),
            but this is faster.
            </summary>
            <param name="value"> The float to compare to 0. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="val">The value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="val">The value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="val">The value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Deg2Rad(System.Double)">
            <summary>
            Converts an angle in degrees to radians.
            </summary>
            <param name="angle">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Grad2Rad(System.Double)">
            <summary>
            Converts an angle in gradians to radians.
            </summary>
            <param name="angle">The angle in gradians.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Turn2Rad(System.Double)">
            <summary>
            Converts an angle in turns to radians.
            </summary>
            <param name="angle">The angle in turns.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GetEllipsePoint(Avalonia.Point,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the point of an angle on an ellipse.
            </summary>
            <param name="centre">The centre point of the ellipse.</param>
            <param name="radiusX">The x radius of the ellipse.</param>
            <param name="radiusY">The y radius of the ellipse.</param>
            <param name="angle">The angle in radians.</param>
            <returns>A point on the ellipse.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GetMinMax(System.Double,System.Double)">
            <summary>
            Gets the minimum and maximum from the specified numbers.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>A tuple containing the minimum and maximum of the two specified numbers.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GetMinMaxFromDelta(System.Double,System.Double)">
            <summary>
            Gets the minimum and maximum from the specified number and the difference with that number.
            </summary>
            <param name="initialValue">The initial value to use.</param>
            <param name="delta">The difference for <paramref name="initialValue"/>.</param>
            <returns>A tuple containing the minimum and maximum of the specified number and the difference with that number.</returns>
        </member>
        <member name="M:Avalonia.Utilities.PooledInlineList`1.#ctor(System.Object)">
            <summary>
             For compositor serialization purposes only, takes the ownership of previously transferred state
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.PooledInlineList`1.TransferRawState">
            <summary>
             For compositor serialization purposes only, gives up the ownership of the internal state and returns it
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.IRef`1">
            <summary>
            A ref-counted wrapper for a disposable object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Avalonia.Utilities.IRef`1.Item">
            <summary>
            The item that is being ref-counted.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.IRef`1.Clone">
            <summary>
            Create another reference to this object and increment the refcount.
            </summary>
            <returns>A new reference to this object.</returns>
        </member>
        <member name="M:Avalonia.Utilities.IRef`1.CloneAs``1">
            <summary>
            Create another reference to the same object, but cast the object to a different type.
            </summary>
            <typeparam name="TResult">The type of the new reference.</typeparam>
            <returns>A reference to the value as the new type but sharing the refcount.</returns>
        </member>
        <member name="P:Avalonia.Utilities.IRef`1.RefCount">
            <summary>
            The current refcount of the object tracked in this reference. For debugging/unit test use only.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.RefCountable.Create``1(``0)">
            <summary>
            Create a reference counted object wrapping the given item.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="item">The item to refcount.</param>
            <returns>The refcounted reference to the item.</returns>
        </member>
        <member name="T:Avalonia.Utilities.RefTrackingDictionary`1">
            <summary>
            Maintains a set of objects with reference counts
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.RefTrackingDictionary`1.AddRef(`0)">
            <summary>
            Increase reference count for a key by 1.
            </summary>
            <returns>true if key was added to the dictionary, false otherwise</returns>
        </member>
        <member name="M:Avalonia.Utilities.RefTrackingDictionary`1.ReleaseRef(`0)">
            <summary>
            Decrease reference count for a key by 1.
            </summary>
            <returns>true if key was removed to the dictionary, false otherwise</returns>
        </member>
        <member name="T:Avalonia.Utilities.SafeEnumerableList`1">
            <summary>
            Implements a simple list which is safe to modify during enumeration.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <remarks>
            Implements a list which, when written to while enumerating, performs a copy of the list
            items. Note this this class doesn't actually implement <see cref="T:System.Collections.Generic.IList`1"/> as it's not
            currently needed - feel free to add missing methods etc.
            </remarks>
        </member>
        <member name="T:Avalonia.Utilities.SingleOrDictionary`2">
            <summary>
            Stores either a single key value pair or constructs a dictionary when more than one value is stored.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.SingleOrQueue`1">
            <summary>
            FIFO Queue optimized for holding zero or one items.
            </summary>
            <typeparam name="T">The type of items held in the queue.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.SpanVector">
            <summary>
            VECTOR: A series of spans
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.GetEnumerator">
            <summary>
            Get enumerator to vector
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.Add(Avalonia.Utilities.Span)">
            <summary>
            Add a new span to vector
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.Delete(System.Int32,System.Int32,Avalonia.Utilities.SpanPosition@)">
            <summary>
            Delete n elements of vector
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.Insert(System.Int32,System.Int32)">
            <summary>
            Insert n elements to vector
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.FindSpan(System.Int32,Avalonia.Utilities.SpanPosition,Avalonia.Utilities.SpanPosition@)">
            <summary>
            Finds the span that contains the specified character position.
            </summary>
            <param name="cp">position to find</param>
            <param name="latestPosition">Position of the most recently accessed span (e.g., the current span
            of a SpanRider) for performance; FindSpan runs in O(1) time if the specified cp is in the same span 
            or an adjacent span.</param>
            <param name="spanPosition">receives the index and first cp of the span that contains the specified 
            position or, if the position is past the end of the vector, the index and cp just past the end of 
            the last span.</param>
            <returns>Returns true if cp is in range or false if not.</returns>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Set an element as a value to a character range
            </summary>
            <remarks>
            Implementation of span element object must implement Object.Equals to
            avoid runtime reflection cost on equality check of nested-type object.
            </remarks>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.SetValue(System.Int32,System.Int32,System.Object,Avalonia.Utilities.SpanPosition)">
            <summary>
            Set an element as a value to a character range; takes a SpanPosition of a recently accessed
            span for performance and returns a known valid SpanPosition
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.SetReference(System.Int32,System.Int32,System.Object)">
            <summary>
            Set an element as a reference to a character range
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanVector.SetReference(System.Int32,System.Int32,System.Object,Avalonia.Utilities.SpanPosition)">
            <summary>
            Set an element as a reference to a character range; takes a SpanPosition of a recently accessed
            span for performance and returns a known valid SpanPosition
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanVector.Count">
            <summary>
            Number of spans in vector
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanVector.Default">
            <summary>
            The default element of vector
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanVector.Item(System.Int32)">
            <summary>
            Span accessor at nth element
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.Equals">
            <summary>
            Equality check method
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SpanEnumerator">
            <summary>
            ENUMERATOR: To navigate a vector through its element
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanEnumerator.Current">
            <summary>
            The current span
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanEnumerator.MoveNext">
            <summary>
            Move to the next span
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanEnumerator.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SpanPosition">
            <summary>
            Represents a Span's position as a pair of related values: its index in the 
            SpanVector its CP offset from the start of the SpanVector.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SpanRider">
            <summary>
            RIDER: To navigate a vector through character index
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpanRider.At(System.Int32)">
            <summary>
            Move rider to a given cp
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanRider.CurrentSpanStart">
            <summary>
            The first cp of the current span
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanRider.Length">
            <summary>
            The length of current span start from the current cp
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanRider.CurrentPosition">
            <summary>
            The current position
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanRider.CurrentElement">
            <summary>
            The element of the current span
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanRider.CurrentSpanIndex">
            <summary>
            Index of the span at the current position.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.SpanRider.SpanPosition">
            <summary>
            Index and first cp of the current span.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.SpringSolver.#ctor(System.TimeSpan,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="period">The time period.</param>
            <param name="zeta">The damping ratio.</param>
            <param name="initialVelocity"></param>
        </member>
        <member name="M:Avalonia.Utilities.SpringSolver.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m">The mass of the oscillating body.</param>
            <param name="k">The stiffness of the oscillated body (spring constant).</param>
            <param name="c">The actual damping.</param>
            <param name="initialVelocity">The initial velocity.</param>
        </member>
        <member name="M:Avalonia.Utilities.SpringSolver.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="ωn">The the natural frequency of the system [rad/s].</param>
            <param name="zeta">The damping ratio.</param>
            <param name="initialVelocity"></param>
        </member>
        <member name="T:Avalonia.Utilities.StopwatchHelper">
            <summary>
            Allows using <see cref="T:System.Diagnostics.Stopwatch"/> as timestamps without allocating.
            </summary>
            <remarks>Equivalent to Stopwatch.GetElapsedTime in .NET 7.</remarks>
        </member>
        <member name="M:Avalonia.Utilities.StringBuilderCache.Acquire(System.Int32)">
            <summary>Get a StringBuilder for the specified capacity.</summary>
            <remarks>If a StringBuilder of an appropriate size is cached, it will be returned and the cache emptied.</remarks>
        </member>
        <member name="M:Avalonia.Utilities.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>Place the specified builder in the cache if it is not too big.</summary>
        </member>
        <member name="M:Avalonia.Utilities.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>ToString() the stringbuilder, Release it to the cache, and return the resulting string.</summary>
        </member>
        <member name="T:Avalonia.Utilities.SynchronousCompletionAsyncResult`1">
            <summary>
            A task-like operation that is guaranteed to finish continuations synchronously,
            can be used for parametrized one-shot events
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SynchronousCompletionAsyncResultSource`1">
            <summary>
            Source for incomplete SynchronousCompletionAsyncResult
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Avalonia.Utilities.ThrowHelper">
            <summary>
            Helper method to help inlining methods that do a throw check.
            Equivalent of .NET6+ ArgumentNullException.ThrowIfNull() for netstandard2.0+
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.TypeUtilities">
            <summary>
            Provides utilities for working with types at runtime.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.AcceptsNull(System.Type)">
            <summary>
            Returns a value indicating whether null can be assigned to the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type accepts null values; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.AcceptsNull``1">
            <summary>
            Returns a value indicating whether null can be assigned to the specified type.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>True if the type accepts null values; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.CanCast``1(System.Object)">
            <summary>
            Returns a value indicating whether value can be casted to the specified type.
            If value is null, checks if instances of that type can be null.
            </summary>
            <typeparam name="T">The type to cast to</typeparam>
            <param name="value">The value to check if cast possible</param>
            <returns>True if the cast is possible, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.TryConvert(System.Type,System.Object,System.Globalization.CultureInfo,System.Object@)">
            <summary>
            Try to convert a value to a type by any means possible.
            </summary>
            <param name="to">The type to convert to.</param>
            <param name="value">The value to convert.</param>
            <param name="culture">The culture to use.</param>
            <param name="result">If successful, contains the convert value.</param>
            <returns>True if the cast was successful, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.TryConvertImplicit(System.Type,System.Object,System.Object@)">
            <summary>
            Try to convert a value to a type using the implicit conversions allowed by the C#
            language.
            </summary>
            <param name="to">The type to convert to.</param>
            <param name="value">The value to convert.</param>
            <param name="result">If successful, contains the converted value.</param>
            <returns>True if the convert was successful, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.ConvertOrDefault(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Convert a value to a type by any means possible, returning the default for that type
            if the value could not be converted.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="type">The type to convert to.</param>
            <param name="culture">The culture to use.</param>
            <returns>A value of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.ConvertImplicitOrDefault(System.Object,System.Type)">
            <summary>
            Convert a value to a type using the implicit conversions allowed by the C# language or
            return the default for the type if the value could not be converted.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="type">The type to convert to.</param>
            <returns>A value of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.Default(System.Type)">
            <summary>
            Gets the default value for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.IsNumeric(System.Type)">
            <summary>
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
            <returns>
            True if the type is numeric; otherwise false.
            </returns>
            <remarks>
            Boolean is not considered numeric.
            </remarks>
        </member>
        <member name="T:Avalonia.Utilities.ValueSingleOrList`1">
            <summary>
            A list like struct optimized for holding zero or one items.
            </summary>
            <typeparam name="T">The type of items held in the list.</typeparam>
            <remarks>
            Once more than value has been added to this storage it will switch to using <see cref="P:Avalonia.Utilities.ValueSingleOrList`1.List"/> internally.
            </remarks>
        </member>
        <member name="P:Avalonia.Utilities.ValueSingleOrList`1.Single">
            <summary>
            Single contained value. Only valid if <see cref="P:Avalonia.Utilities.ValueSingleOrList`1.IsSingle"/> is set.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSingleOrList`1.List">
            <summary>
            List of values.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSingleOrList`1.HasList">
            <summary>
            If this struct is backed by a list.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSingleOrList`1.IsSingle">
            <summary>
            If this struct contains only single value and storage was not promoted to a list.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.ValueSingleOrList`1.Add(`0)">
            <summary>
            Adds a value.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:Avalonia.Utilities.ValueSingleOrList`1.Remove(`0)">
            <summary>
            Removes a value.
            </summary>
            <param name="value">Value to remove.</param>
        </member>
        <member name="T:Avalonia.Utilities.ValueSpan`1">
            <summary>
            Pairing of value and positions sharing that value.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSpan`1.Start">
            <summary>
            Get's the start of the span.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSpan`1.Length">
            <summary>
            Get's the length of the span.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSpan`1.Value">
            <summary>
            Get's the value of the span.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.WeakEvent`2">
            <summary>
            Manages subscriptions to events using weak listeners.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.WeakEventHandlerManager">
            <summary>
            Manages subscriptions to events using weak listeners.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.WeakEventHandlerManager.Subscribe``3(``0,System.String,System.EventHandler{``1})">
            <summary>
            Subscribes to an event on an object using a weak subscription.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <typeparam name="TSubscriber">The type of the subscriber.</typeparam>
            <param name="target">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Avalonia.Utilities.WeakEventHandlerManager.Unsubscribe``2(System.Object,System.String,System.EventHandler{``0})">
            <summary>
            Unsubscribes from an event.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <typeparam name="TSubscriber">The type of the subscriber.</typeparam>
            <param name="target">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="F:Avalonia.Utilities.WeakEvents.CollectionChanged">
            <summary>
            Represents CollectionChanged event from <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </summary>
        </member>
        <member name="F:Avalonia.Utilities.WeakEvents.ThreadSafePropertyChanged">
            <summary>
            Represents PropertyChanged event from <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> with auto-dispatching to the UI thread
            </summary>
        </member>
        <member name="F:Avalonia.Utilities.WeakEvents.AvaloniaPropertyChanged">
            <summary>
            Represents PropertyChanged event from <see cref="T:Avalonia.AvaloniaObject"/>
            </summary>
        </member>
        <member name="F:Avalonia.Utilities.WeakEvents.CommandCanExecuteChanged">
            <summary>
            Represents CanExecuteChanged event from <see cref="T:System.Windows.Input.ICommand"/>
            </summary>
        </member>
        <member name="T:Avalonia.Vector">
            <summary>
            Defines a vector.
            </summary>
        </member>
        <member name="F:Avalonia.Vector._x">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:Avalonia.Vector._y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Vector"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="P:Avalonia.Vector.X">
            <summary>
            Gets the X component.
            </summary>
        </member>
        <member name="P:Avalonia.Vector.Y">
            <summary>
            Gets the Y component.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.op_Explicit(Avalonia.Vector)~Avalonia.Point">
            <summary>
            Converts the <see cref="T:Avalonia.Vector"/> to a <see cref="T:Avalonia.Point"/>.
            </summary>
            <param name="a">The vector.</param>
        </member>
        <member name="M:Avalonia.Vector.op_Multiply(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Multiply(Avalonia.Vector,System.Double)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Multiply(System.Double,Avalonia.Vector)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Division(Avalonia.Vector,System.Double)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scale">The divisor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Vector"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Vector"/>.</returns>
        </member>
        <member name="P:Avalonia.Vector.Length">
            <summary>
            Length of the vector.
            </summary>
        </member>
        <member name="P:Avalonia.Vector.SquaredLength">
            <summary>
            Squared Length of the vector.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.op_UnaryNegation(Avalonia.Vector)">
            <summary>
            Negates a vector.
            </summary>
            <param name="a">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Addition(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Subtraction(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.Vector.Equals(Avalonia.Vector)">
            <summary>
            Check if two vectors are equal (bitwise).
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Vector.NearlyEquals(Avalonia.Vector)">
            <summary>
            Check if two vectors are nearly equal (numerically).
            </summary>
            <param name="other">The other vector.</param>
            <returns>True if vectors are nearly equal.</returns>
        </member>
        <member name="M:Avalonia.Vector.ToString">
            <summary>
            Returns the string representation of the vector.
            </summary>
            <returns>The string representation of the vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.WithX(System.Double)">
            <summary>
            Returns a new vector with the specified X component.
            </summary>
            <param name="x">The X component.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.WithY(System.Double)">
            <summary>
            Returns a new vector with the specified Y component.
            </summary>
            <param name="y">The Y component.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Normalize">
            <summary>
            Returns a normalized version of this vector.
            </summary>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Negate">
            <summary>
            Returns a negated version of this vector.
            </summary>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Dot(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Avalonia.Vector.Cross(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:Avalonia.Vector.Normalize(Avalonia.Vector)">
            <summary>
            Normalizes the given vector.
            </summary>
            <param name="vector">The vector</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Divide(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Divide(Avalonia.Vector,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="vector">The vector</param>
            <param name="scalar">The scalar value</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Multiply(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Multiplies the first vector by the second.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Multiply(Avalonia.Vector,System.Double)">
            <summary>
            Multiplies the vector by the given scalar.
            </summary>
            <param name="vector">The vector</param>
            <param name="scalar">The scalar value</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Add(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Adds the second to the first vector
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Subtract(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Subtracts the second from the first vector
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Negate(Avalonia.Vector)">
            <summary>
            Negates the vector
            </summary>
            <param name="vector">The vector to negate.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="P:Avalonia.Vector.Zero">
            <summary>
            Returns the vector (0.0, 0.0).
            </summary>
        </member>
        <member name="P:Avalonia.Vector.One">
            <summary>
            Returns the vector (1.0, 1.0).
            </summary>
        </member>
        <member name="P:Avalonia.Vector.UnitX">
            <summary>
            Returns the vector (1.0, 0.0).
            </summary>
        </member>
        <member name="P:Avalonia.Vector.UnitY">
            <summary>
            Returns the vector (0.0, 1.0).
            </summary>
        </member>
        <member name="M:Avalonia.Vector.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the vector into its X and Y components.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:Avalonia.Vector.Abs">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Vector.Clamp(Avalonia.Vector,Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Restricts a vector between a minimum and a maximum value.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.Max(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors
            </summary>
        </member>
        <member name="M:Avalonia.Vector.Min(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors
            </summary>
        </member>
        <member name="M:Avalonia.Vector.Distance(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Computes the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The Euclidean distance.</returns>
        </member>
        <member name="M:Avalonia.Vector.DistanceSquared(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns the Euclidean distance squared between two specified points
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The Euclidean distance squared.</returns>
        </member>
        <member name="M:Avalonia.Vector3D.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Vector"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Vector3D"/>.</returns>
        </member>
        <member name="M:Avalonia.Vector3D.Dot(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Add(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Adds the second to the first vector
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.op_Addition(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Adds the second to the first vector
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Substract(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Subtracts the second from the first vector
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.op_Subtraction(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Subtracts the second from the first vector
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.op_UnaryNegation(Avalonia.Vector3D)">
            <summary>
            Negates the vector
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Multiply(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Multiplies the first vector by the second.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Multiply(Avalonia.Vector3D,System.Double)">
            <summary>
            Multiplies the vector by the given scalar.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.op_Multiply(Avalonia.Vector3D,System.Double)">
            <summary>
            Multiplies the vector by the given scalar.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Divide(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Divides the first vector by the second.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Divide(Avalonia.Vector3D,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Abs">
            <summary>Returns a vector whose elements are the absolute values of each of the specified vector's elements.</summary>
        </member>
        <member name="M:Avalonia.Vector3D.Clamp(Avalonia.Vector3D,Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Restricts a vector between a minimum and a maximum value.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Max(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Min(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors
            </summary>
        </member>
        <member name="P:Avalonia.Vector3D.Length">
            <summary>
            Length of the vector.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Normalize(Avalonia.Vector3D)">
            <summary>
            Returns a normalized version of this vector.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.DistanceSquared(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Computes the squared Euclidean distance between the two given points.
            </summary>
        </member>
        <member name="M:Avalonia.Vector3D.Distance(Avalonia.Vector3D,Avalonia.Vector3D)">
            <summary>
            Computes the Euclidean distance between the two given points.
            </summary>
        </member>
        <member name="T:Avalonia.Visual">
            <summary>
            Base class for controls that provides rendering and related visual properties.
            </summary>
            <remarks>
            The <see cref="T:Avalonia.Visual"/> class represents elements that have a visual on-screen
            representation and stores all the information needed for an 
            <see cref="T:Avalonia.Rendering.IRenderer"/> to render the control. To traverse the visual tree, use the
            extension methods defined in <see cref="T:Avalonia.VisualExtensions"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Visual.BoundsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Bounds"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.ClipToBoundsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.ClipToBounds"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.ClipProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Clip"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.IsVisibleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.IsVisible"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.OpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Opacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.OpacityMaskProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.OpacityMask"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.EffectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Effect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.HasMirrorTransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.HasMirrorTransform"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.RenderTransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.RenderTransform"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.RenderTransformOriginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.RenderTransformOrigin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.FlowDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.FlowDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.VisualParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.VisualParent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.ZIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.ZIndex"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Visual"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Visual"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Visual.AttachedToVisualTree">
            <summary>
            Raised when the control is attached to a rooted visual tree.
            </summary>
        </member>
        <member name="E:Avalonia.Visual.DetachedFromVisualTree">
            <summary>
            Raised when the control is detached from a rooted visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Bounds">
            <summary>
            Gets the bounds of the control relative to its parent.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether the control should be clipped to its bounds.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Clip">
            <summary>
            Gets or sets the geometry clip for this visual.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.IsEffectivelyVisible">
            <summary>
            Gets a value indicating whether this control and all its parents are visible.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.IsVisible">
            <summary>
            Gets or sets a value indicating whether this control is visible.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Opacity">
            <summary>
            Gets or sets the opacity of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.OpacityMask">
            <summary>
            Gets or sets the opacity mask of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Effect">
            <summary>
            Gets or sets the effect of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.HasMirrorTransform">
            <summary>
            Gets or sets a value indicating whether to apply mirror transform on this control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.RenderTransform">
            <summary>
            Gets or sets the render transform of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.RenderTransformOrigin">
            <summary>
            Gets or sets the transform origin of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.FlowDirection">
            <summary>
            Gets or sets the text flow direction.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.ZIndex">
            <summary>
            Gets or sets the Z index of the control.
            </summary>
            <remarks>
            Controls with a higher <see cref="P:Avalonia.Visual.ZIndex"/> will appear in front of controls with
            a lower ZIndex. If two controls have the same ZIndex then the control that appears
            later in the containing element's children collection will appear on top.
            </remarks>
        </member>
        <member name="P:Avalonia.Visual.VisualChildren">
            <summary>
            Gets the control's child visuals.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.VisualRoot">
            <summary>
            Gets the root of the visual tree, if the control is attached to a visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.IsAttachedToVisualTree">
            <summary>
            Gets a value indicating whether this control is attached to a visual root.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.VisualParent">
            <summary>
            Gets the control's parent visual.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.BypassFlowDirectionPolicies">
            <summary>
            Gets a value indicating whether control bypass FlowDirecton policies.
            </summary>
            <remarks>
            Related to FlowDirection system and returns false as default, so if 
            <see cref="P:Avalonia.Visual.FlowDirection"/> is RTL then control will get a mirror presentation. 
            For controls that want to avoid this behavior, override this property and return true.
            </remarks>
        </member>
        <member name="M:Avalonia.Visual.GetFlowDirection(Avalonia.Visual)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Visual.FlowDirectionProperty"/> on a control.
            </summary>
            <param name="visual">The control.</param>
            <returns>The flow direction.</returns>
        </member>
        <member name="M:Avalonia.Visual.SetFlowDirection(Avalonia.Visual,Avalonia.Media.FlowDirection)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Visual.FlowDirectionProperty"/> on a control.
            </summary>
            <param name="visual">The control.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Avalonia.Visual.InvalidateVisual">
            <summary>
            Invalidates the visual and queues a repaint.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the visual to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Visual.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Indicates that a property change should cause <see cref="M:Avalonia.Visual.InvalidateVisual"/> to be
            called.
            </summary>
            <typeparam name="T">The control which the property affects.</typeparam>
            <param name="properties">The properties.</param>
            <remarks>
            This method should be called in a control's static constructor with each property
            on the control which when changed should cause a redraw. This is similar to WPF's
            FrameworkPropertyMetadata.AffectsRender flag.
            </remarks>
        </member>
        <member name="M:Avalonia.Visual.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Visual.OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Calls the <see cref="M:Avalonia.Visual.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)"/> method 
            for this control and all of its visual descendants.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Calls the <see cref="M:Avalonia.Visual.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)"/> method 
            for this control and all of its visual descendants.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Called when the control is added to a rooted visual tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Called when the control is removed from a rooted visual tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnVisualParentChanged(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Called when the control's visual parent changes.
            </summary>
            <param name="oldParent">The old visual parent.</param>
            <param name="newParent">The new visual parent.</param>
        </member>
        <member name="M:Avalonia.Visual.RenderTransformChanged(Avalonia.AvaloniaPropertyChangedEventArgs{Avalonia.Media.ITransform})">
            <summary>
            Called when a visual's <see cref="P:Avalonia.Visual.RenderTransform"/> changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.ValidateVisualChild(Avalonia.Visual)">
            <summary>
            Ensures a visual child is not null and not already parented.
            </summary>
            <param name="c">The visual child.</param>
        </member>
        <member name="M:Avalonia.Visual.ZIndexChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Visual.ZIndex"/> property changes on any control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.RenderTransformChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Visual.RenderTransform"/>'s <see cref="E:Avalonia.Media.Transform.Changed"/> event
            is fired.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.SetVisualParent(Avalonia.Visual)">
            <summary>
            Sets the visual parent of the Visual.
            </summary>
            <param name="value">The visual parent.</param>
        </member>
        <member name="M:Avalonia.Visual.VisualChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Visual.VisualChildren"/> collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.InvalidateMirrorTransform">
            <summary>
            Computes the <see cref="P:Avalonia.Visual.HasMirrorTransform"/> value according to the 
            <see cref="P:Avalonia.Visual.FlowDirection"/> and <see cref="P:Avalonia.Visual.BypassFlowDirectionPolicies"/>
            </summary>
        </member>
        <member name="T:Avalonia.VisualExtensions">
            <summary>
            Extension methods for <see cref="T:Avalonia.Visual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.VisualExtensions.PointToClient(Avalonia.Visual,Avalonia.PixelPoint)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="visual">The visual.</param>
            <param name="point">The point in screen coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.PointToScreen(Avalonia.Visual,Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="visual">The visual.</param>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen coordinates.</returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.TransformToVisual(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Returns a transform that transforms the visual's coordinates into the coordinates
            of the specified <paramref name="to"/>.
            </summary>
            <param name="from">The visual whose coordinates are to be transformed.</param>
            <param name="to">The visual to translate the coordinates to.</param>
            <returns>
            A <see cref="T:Avalonia.Matrix"/> containing the transform or null if the visuals don't share a
            common ancestor.
            </returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.TranslatePoint(Avalonia.Visual,Avalonia.Point,Avalonia.Visual)">
            <summary>
            Translates a point relative to this visual to coordinates that are relative to the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <param name="point">The point value, as relative to this visual.</param>
            <param name="relativeTo">The visual to translate the given point into.</param>
            <returns>
            A point value, now relative to the target visual rather than this source element, or null if the
            two elements have no common ancestor.
            </returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.GetOffsetFrom(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Gets a transform from an ancestor to a descendent.
            </summary>
            <param name="ancestor">The ancestor visual.</param>
            <param name="visual">The visual.</param>
            <returns>The transform.</returns>
        </member>
        <member name="T:Avalonia.VisualTreeAttachmentEventArgs">
            <summary>
            Holds the event arguments for the <see cref="E:Avalonia.Visual.AttachedToVisualTree"/> and 
            <see cref="E:Avalonia.Visual.DetachedFromVisualTree"/> events.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTreeAttachmentEventArgs.#ctor(Avalonia.Visual,Avalonia.Rendering.IRenderRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.VisualTreeAttachmentEventArgs"/> class.
            </summary>
            <param name="parent">The parent that the visual is being attached to or detached from.</param>
            <param name="root">The root visual.</param>
        </member>
        <member name="P:Avalonia.VisualTreeAttachmentEventArgs.Parent">
            <summary>
            Gets the parent that the visual is being attached to or detached from.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTreeAttachmentEventArgs.Root">
            <summary>
            Gets the root of the visual tree that the visual is being attached to or detached from.
            </summary>
        </member>
        <member name="T:Avalonia.VisualTree.IHostedVisualTreeRoot">
            <summary>
            Interface for controls that are at the root of a hosted visual tree, such as popups.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IHostedVisualTreeRoot.Host">
            <summary>
            Gets the visual tree host.
            </summary>
            <value>
            The visual tree host.
            </value>
        </member>
        <member name="P:Avalonia.VisualTree.IVisualWithRoundRectClip.ClipToBoundsRadius">
            <summary>
            Gets a value indicating the corner radius of control's clip bounds
            </summary>
        </member>
        <member name="T:Avalonia.VisualTree.TransformedBounds">
            <summary>
            Holds information about the bounds of a control, together with a transform and a clip.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.TransformedBounds.#ctor(Avalonia.Rect,Avalonia.Rect,Avalonia.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.VisualTree.TransformedBounds"/> struct.
            </summary>
            <param name="bounds">The control's bounds.</param>
            <param name="clip">The control's clip rectangle.</param>
            <param name="transform">The control's transform.</param>
        </member>
        <member name="P:Avalonia.VisualTree.TransformedBounds.Bounds">
            <summary>
            Gets the control's bounds in its local coordinate space.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.TransformedBounds.Clip">
            <summary>
            Gets the control's clip rectangle in global coordinate space.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.TransformedBounds.Transform">
            <summary>
            Gets the transform from local to global coordinate space.
            </summary>
        </member>
        <member name="T:Avalonia.VisualTree.VisualExtensions">
            <summary>
            Provides extension methods for working with the visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.CalculateDistanceFromAncestor(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Calculates the distance from a visual's ancestor.
            </summary>
            <param name="visual">The visual.</param>
            <param name="ancestor">The ancestor visual.</param>
            <returns>
            The number of steps from the visual to the ancestor or -1 if
            <paramref name="visual"/> is not a descendent of <paramref name="ancestor"/>.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.CalculateDistanceFromRoot(Avalonia.Visual)">
            <summary>
            Calculates the distance from a visual's root.
            </summary>
            <param name="visual">The visual.</param>
            <returns>
            The number of steps from the visual to the root.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.FindCommonVisualAncestor(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Tries to get the first common ancestor of two visuals.
            </summary>
            <param name="visual">The first visual.</param>
            <param name="target">The second visual.</param>
            <returns>The common ancestor, or null if not found.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualAncestors(Avalonia.Visual)">
            <summary>
            Enumerates the ancestors of an <see cref="T:Avalonia.Visual"/> in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual's ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.FindAncestorOfType``1(Avalonia.Visual,System.Boolean)">
            <summary>
            Finds first ancestor of given type.
            </summary>
            <typeparam name="T">Ancestor type.</typeparam>
            <param name="visual">The visual.</param>
            <param name="includeSelf">If given visual should be included in search.</param>
            <returns>First ancestor of given type.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.FindDescendantOfType``1(Avalonia.Visual,System.Boolean)">
            <summary>
            Finds first descendant of given type.
            </summary>
            <typeparam name="T">Descendant type.</typeparam>
            <param name="visual">The visual.</param>
            <param name="includeSelf">If given visual should be included in search.</param>
            <returns>First descendant of given type.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetSelfAndVisualAncestors(Avalonia.Visual)">
            <summary>
            Enumerates an <see cref="T:Avalonia.Visual"/> and its ancestors in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual and its ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualAt(Avalonia.Visual,Avalonia.Point)">
            <summary>
            Gets the first visual in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <returns>The visual at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualAt(Avalonia.Visual,Avalonia.Point,System.Func{Avalonia.Visual,System.Boolean})">
            <summary>
            Gets the first visual in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visual at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualsAt(Avalonia.Visual,Avalonia.Point)">
            <summary>
            Enumerates the visible visuals in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <returns>The visuals at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualsAt(Avalonia.Visual,Avalonia.Point,System.Func{Avalonia.Visual,System.Boolean})">
            <summary>
            Enumerates the visuals in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visuals at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualChildren(Avalonia.Visual)">
            <summary>
            Enumerates the children of an <see cref="T:Avalonia.Visual"/> in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual children.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualDescendants(Avalonia.Visual)">
            <summary>
            Enumerates the descendants of an <see cref="T:Avalonia.Visual"/> in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual's ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetSelfAndVisualDescendants(Avalonia.Visual)">
            <summary>
            Enumerates an <see cref="T:Avalonia.Visual"/> and its descendants in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual and its ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualParent(Avalonia.Visual)">
            <summary>
            Gets the visual parent of an <see cref="T:Avalonia.Visual"/>.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The parent, or null if the visual is unparented.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualParent``1(Avalonia.Visual)">
            <summary>
            Gets the visual parent of an <see cref="T:Avalonia.Visual"/>.
            </summary>
            <typeparam name="T">The type of the visual parent.</typeparam>
            <param name="visual">The visual.</param>
            <returns>
            The parent, or null if the visual is unparented or its parent is not of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualRoot(Avalonia.Visual)">
            <summary>
            Gets the root visual for an <see cref="T:Avalonia.Visual"/>.
            </summary>
            <param name="visual">The visual.</param>
            <returns>
            The root visual or null if the visual is not rooted.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.IsAttachedToVisualTree(Avalonia.Visual)">
            <summary>
            Returns a value indicating whether this control is attached to a visual root.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.IsVisualAncestorOf(Avalonia.Visual,Avalonia.Visual)">
            <summary>
            Tests whether an <see cref="T:Avalonia.Visual"/> is an ancestor of another visual.
            </summary>
            <param name="visual">The visual.</param>
            <param name="target">The potential descendant.</param>
            <returns>
            True if <paramref name="visual"/> is an ancestor of <paramref name="target"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
